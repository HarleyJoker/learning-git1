<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Packaging</name>
    </assembly>
    <members>
        <member name="T:NuGet.Client.AnyFramework">
            <summary>
            An internal NuGetFramework marker for ManagedCodeConventions.
            Most conventions disallow the string 'any' as a txm, so to allow
            it for conventions with no txm in the path we use this special type.
            </summary>
        </member>
        <member name="T:NuGet.Client.ManagedCodeConventions">
            <summary>
            Defines all the package conventions used by Managed Code packages
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.AnyTargettedFile">
            <summary>
            Pattern used to locate all files targetted at a specific runtime and/or framework
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.RuntimeAssemblies">
            <summary>
            Pattern used to locate all files designed for loading as managed code assemblies at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.CompileRefAssemblies">
            <summary>
            Pattern used to locate ref assemblies for compile.
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.CompileLibAssemblies">
            <summary>
            Pattern used to locate lib assemblies for compile.
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.NativeLibraries">
            <summary>
            Pattern used to locate all files designed for loading as native code libraries at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.ResourceAssemblies">
            <summary>
            Pattern used to locate all files designed for loading as managed code resource assemblies at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.MSBuildFiles">
            <summary>
            Pattern used to identify MSBuild targets and props files
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.MSBuildMultiTargetingFiles">
            <summary>
            Pattern used to identify MSBuild global targets and props files
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.ContentFiles">
            <summary>
            Pattern used to identify content files
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.ToolsAssemblies">
            <summary>
            Pattern used to identify Tools assets for global tools
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.EmbedAssemblies">
            <summary>
            Pattern used to locate embed interop types assemblies
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.MSBuildTransitiveFiles">
            <summary>
            Pattern used to identify MSBuild transitive targets and props files
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.ContentItemCollection.HasContract">
            <summary>
            True if lib/contract exists
            </summary>
        </member>
        <member name="M:NuGet.ContentModel.ContentItemCollection.PopulateItemGroups(NuGet.ContentModel.PatternSet,System.Collections.Generic.IList{NuGet.ContentModel.ContentItemGroup})">
            <summary>
            Populate the provided list with ContentItemGroups based on a provided pattern set.
            </summary>
            <param name="definition">The pattern set to match</param>
            <param name="contentItemGroupList">The list that will be mutated and populated with the item groups</param>
        </member>
        <member name="M:NuGet.ContentModel.ContentItemCollection.IsValidAsset(System.String)">
            <summary>
            False if the path would not match any patterns.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.ContentPropertyDefinition">
            <summary>
            Defines a property that can be used in Content Model query patterns
            <seealso cref="T:NuGet.ContentModel.PatternSet" />
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.ContentPropertyDefinition.CompareTest">
            <summary>
            Find the nearest compatible candidate.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternSet">
            <summary>
            A set of patterns that can be used to query a set of file paths for items matching a provided criteria.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.GroupPatterns">
            <summary>
            Patterns used to select a group of items that matches the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.GroupExpressions">
            <summary>
            Pattern expressions.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PathPatterns">
            <summary>
            Patterns used to select individual items that match the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PathExpressions">
            <summary>
            Path expressions.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PropertyDefinitions">
            <summary>
            Property definitions used for matching patterns
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternDefinition">
            <summary>
            A pattern that can be used to match file paths given a provided criteria.
            </summary>
            <remarks>
            The pattern is defined as a sequence of literal path strings that must match exactly and property
            references,
            wrapped in {} characters, which are tested for compatibility with the consumer-provided criteria.
            <seealso cref="T:NuGet.ContentModel.ContentPropertyDefinition" />
            </remarks>
        </member>
        <member name="P:NuGet.ContentModel.PatternDefinition.Table">
            <summary>
            Replacement token table.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternTable">
            <summary>
            Replacement token table organized by property.
            </summary>
        </member>
        <member name="M:NuGet.ContentModel.PatternTable.TryLookup(System.String,System.String,System.Object@)">
            <summary>
            Lookup a token and get the replacement if it exists.
            </summary>
            <param name="propertyName">Property moniker</param>
            <param name="name">Token name</param>
            <param name="value">Replacement value</param>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.PropertyName">
            <summary>
            PropertyName moniker
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Value">
            <summary>
            Item replacement value
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.IPackageIdentityComparer">
            <summary>
            Compares the id and version of a package
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Core.PackageDependencyComparer.Default">
            <summary>
            Default comparer
            Null ranges and the All range are treated as equal.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependencyInfoComparer.Default">
            <summary>
            Default comparer
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.PackageIdentityComparer">
            <summary>
            Compares the Id, Version, and Version release label. Version build metadata is ignored.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.#ctor">
            <summary>
            Default version range comparer.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.#ctor(NuGet.Versioning.VersionComparison)">
            <summary>
            Compare versions with a specific VersionComparison
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.#ctor(NuGet.Versioning.IVersionComparer)">
            <summary>
            Compare versions with a specific IVersionComparer
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageIdentityComparer.Default">
            <summary>
            Default comparer that compares on the id, version, and version release labels.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.Equals(NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            True if the package identities are the same when ignoring build metadata.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.GetHashCode(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Hash code of the id and version
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentityComparer.Compare(NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Compares on the Id first, then version
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.ContentFilesEntry">
            <summary>
            metadata/contentFiles/files entry from a nuspec
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.ContentFilesEntry.Include">
            <summary>
            Included files
            </summary>
            <remarks>Required</remarks>
        </member>
        <member name="P:NuGet.Packaging.Core.ContentFilesEntry.Exclude">
            <summary>
            Excluded files
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.ContentFilesEntry.BuildAction">
            <summary>
            Build action
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.ContentFilesEntry.CopyToOutput">
            <summary>
            If true the item will be copied to the output folder.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.ContentFilesEntry.Flatten">
            <summary>
            If true the content items will keep the same folder structure in the output
            folder.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.ExtractPackageFileDelegate">
            <summary>
            Callback invoked to extract a package file.
            </summary>
            <param name="sourceFile">The path of the file in the package.</param>
            <param name="targetPath">The path to write to.</param>
            <param name="fileStream">The file <see cref="T:System.IO.Stream" />.</param>
            <returns>The file name if the file was written; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:NuGet.Packaging.Core.IAsyncPackageCoreReader">
            <summary>
            A basic asynchronous package reader that provides the identity, min client version, and file access.
            </summary>
            <remarks>Higher level concepts used for normal development nupkgs should go at a higher level</remarks>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the identity of the package.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:NuGet.Packaging.Core.PackageIdentity" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetMinClientVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the minimum client version needed to consume the package.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:NuGet.Versioning.NuGetVersion" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetPackageTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets zero or more package types from the .nuspec.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns a file stream from the package.
            </summary>
            <param name="path">The file path in the package.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.IO.Stream" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetFilesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets all files in the package.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetFilesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets files in a folder in the package.
            </summary>
            <param name="folder">A folder path in the package.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> for files under the specified folder.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetNuspecAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a nuspec stream.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.IO.Stream" />.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.GetNuspecFileAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a nuspec file path.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />
            representing the nuspec file path.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.Core.IAsyncPackageCoreReader.CopyFilesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},NuGet.Packaging.Core.ExtractPackageFileDelegate,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies files from a package to a new location.
            </summary>
            <param name="destination">The destination path to copy to.</param>
            <param name="packageFiles">The package files to copy.</param>
            <param name="extractFile">A package file extraction delegate.</param>
            <param name="logger">A logger.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns am
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the copied file paths.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.Packaging.Core.INuspecCoreReader">
            <summary>
            A basic nuspec reader that understands ONLY the id, version, and min client version of a package.
            </summary>
            <remarks>Higher level concepts used for normal development nupkgs should go at a higher level</remarks>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetId">
            <summary>
            Package Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetVersion">
            <summary>
            Package Version
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetMinClientVersion">
            <summary>
            Minimum client version needed to consume the package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetPackageTypes">
            <summary>
            Gets zero or more package types from the .nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetIdentity">
            <summary>
            Id and Version of a package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.INuspecCoreReader.GetMetadata">
            <summary>
            Package metadata in the nuspec
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.IPackageCoreReader">
            <summary>
            Basic package reader that provides the identity, min client version, and file access.
            </summary>
            <remarks>Higher level concepts used for normal development nupkgs should go at a higher level</remarks>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetIdentity">
            <summary>
            Gets the package identity.
            </summary>
            <returns>A package identity.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetMinClientVersion">
            <summary>
            Gets the minimum client version needed to consume the package.
            </summary>
            <returns>A NuGet version.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetPackageTypes">
            <summary>
            Gets zero or more package types from the .nuspec.
            </summary>
            <returns>A readonly list of package types.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetStream(System.String)">
            <summary>
            Gets a file stream from the package.
            </summary>
            <returns>A stream for a file in the package.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetFiles">
            <summary>
            Gets all files in the package.
            </summary>
            <returns>An enumerable of files in the package.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetFiles(System.String)">
            <summary>
            Gets files in a folder in the package.
            </summary>
            <param name="folder">Folder path</param>
            <returns>An enumerable of files under specified folder.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetNuspec">
            <summary>
            Gets a nuspec stream.
            </summary>
            <returns>A stream for the nuspec.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.GetNuspecFile">
            <summary>
            Gets a nuspec file path.
            </summary>
            <returns>The nuspec file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.Core.IPackageCoreReader.CopyFiles(System.String,System.Collections.Generic.IEnumerable{System.String},NuGet.Packaging.Core.ExtractPackageFileDelegate,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Copies files from a package to a new location.
            </summary>
            <param name="destination">The destination folder path.</param>
            <param name="packageFiles">The package files to copy.</param>
            <param name="extractFile">A package file extraction delegate.</param>
            <param name="logger">A logger.</param>
            <param name="token">A cancellation token.</param>
            <returns>An enumerable of paths of files copied to the destination.</returns>
        </member>
        <member name="T:NuGet.Packaging.Core.NuspecCoreReader">
            <summary>
            A basic nuspec reader that understand id, version, and a flat list of dependencies.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReader.#ctor(System.IO.Stream)">
            <summary>
            Read a nuspec from a stream.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Reads a nuspec from XML
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReader.GetDependencies">
            <summary>
            Returns a flat list of dependencies from a nuspec
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.NuspecCoreReaderBase">
            <summary>
            A very basic Nuspec reader that understands the Id, Version, PackageType, and MinClientVersion of a package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.#ctor(System.String)">
            <summary>
            Read a nuspec from a path.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.#ctor(System.IO.Stream)">
            <summary>
            Read a nuspec from a stream.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Read a nuspec from a stream.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Reads a nuspec from XML
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetId">
            <summary>
            Id of the package
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetVersion">
            <summary>
            Version of the package
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetMinClientVersion">
            <summary>
            The minimum client version this package supports.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetPackageTypes">
            <summary>
            Gets zero or more package types from the .nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.IsServiceable">
            <summary>
            Returns if the package is serviceable.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetDevelopmentDependency">
            <summary>
            The developmentDependency attribute
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetMetadata">
            <summary>
            Nuspec Metadata
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecCoreReaderBase.GetMetadataValue(System.String)">
            <summary>
            Returns a nuspec metadata value or string.Empty.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.NuspecCoreReaderBase.MetadataValues">
            <summary>
            Indexed metadata values of the XML elements in the nuspec.
            If duplicate keys exist only the first is used.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.NuspecCoreReaderBase.Xml">
            <summary>
            Raw XML doc
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.NuspecUtility">
            <summary>
            Until NuspecReader and Manifest are unified, this is a place to share implementations of
            reading and parsing specific elements out of the .nuspec XML.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecUtility.GetPackageTypes(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Gets the package types from a .nuspec metadata XML element.
            </summary>
            <param name="metadataNode">The metadata XML element.</param>
            <param name="useMetadataNamespace">
            Whether or not to use the metadata element's namespace when finding the package type
            nodes. If false is specified, only the local names of the package type nodes are used
            for comparison. If true is specified, the package type nodes must have the same
            namespace as the metadata node.
            </param>
            <returns>
            A list of package types. If no package types are found in the metadata node, an empty
            list is returned.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecUtility.IsServiceable(System.Xml.Linq.XElement)">
            <summary>
            Gets the value of serviceable element from a .nuspec metadata XML element.
            </summary>
            <param name="metadataNode">The metadata XML element.</param>
            <returns>
            true if the serviceable element is set in the .nuspec file as true, else false.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.Core.NuspecUtility.GetFrameworkReferenceGroups(System.Xml.Linq.XElement,NuGet.Frameworks.IFrameworkNameProvider,System.Boolean)">
            <summary>
            Gets the FrameworkReference groups. This refers to the FrameworkReference concept added in .NET Core 3.0
            </summary>
            <param name="metadataNode">The metadata node</param>
            <param name="frameworkProvider">A FrameworkNameProvider</param>
            <param name="useMetadataNamespace">Whether or not to use the metadata element's namespace when getting the framework reference nodes.
            If false is specified, only the local names of the FrameworkReference nodes are used
            for comparison. If true is specified, the fremeworkreference nodes must have the same
            namespace as the metadata node.</param>
            <returns></returns>
        </member>
        <member name="T:NuGet.Packaging.Core.PackageDependency">
            <summary>
            Represents a package dependency Id and allowed version range.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependency.Id">
            <summary>
            Dependency package Id
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependency.Include">
            <summary>
            Types to include from the dependency package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependency.Exclude">
            <summary>
            Types to exclude from the dependency package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependency.VersionRange">
            <summary>
            Range of versions allowed for the depenency
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageDependency.GetHashCode">
            <summary>
            Hash code from the default PackageDependencyComparer
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageDependency.ToString">
            <summary>
            Id and Version range string
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.PackageDependencyInfo">
            <summary>
            Represents a package identity and the dependencies of a package.
            </summary>
            <remarks>
            This class does not support groups of dependencies, the group will need to be selected before
            populating this.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageDependencyInfo.#ctor(System.String,NuGet.Versioning.NuGetVersion,System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependency})">
            <summary>
            Represents a package identity and the dependencies of a package.
            </summary>
            <param name="id">package name</param>
            <param name="version">package version</param>
            <param name="dependencies">package dependencies</param>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageDependencyInfo.Dependencies">
            <summary>
            Package dependencies
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageDependencyInfo.GetHashCode">
            <summary>
            Hash code from the default PackageDependencyInfoComparer
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageDependencyInfo.ToString">
            <summary>
            Example: Id : Dependency1, Dependency2
            </summary>
            <returns></returns>
        </member>
        <member name="T:NuGet.Packaging.Core.PackageIdentity">
            <summary>
            Represents the core identity of a nupkg.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.#ctor(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Creates a new package identity.
            </summary>
            <param name="id">name</param>
            <param name="version">version</param>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageIdentity.Id">
            <summary>
            Package name
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageIdentity.Version">
            <summary>
            Package Version
            </summary>
            <remarks>can be null</remarks>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageIdentity.HasVersion">
            <summary>
            True if the version is non-null
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.Equals(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            True if the package identities are the same.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.Equals(NuGet.Packaging.Core.PackageIdentity,NuGet.Versioning.VersionComparison)">
            <summary>
            True if the identity objects are equal based on the given comparison mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.CompareTo(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Sorts based on the id, then version
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.Equals(System.Object)">
            <summary>
            Compare using the default comparer.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.GetHashCode">
            <summary>
            Creates a hash code using the default comparer.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Core.PackageIdentity.Comparer">
            <summary>
            An equality comparer that checks the id, version, and version release label.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Core.PackageIdentity.ToString">
            <summary>
            PackageIdentity.ToString returns packageId.packageVersion"
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Core.PackageType">
             It is important that this type remains immutable due to the cloning of package specs
            
        </member>
        <member name="F:NuGet.Packaging.Core.PackagingCoreConstants.EmptyFolder">
            <summary>
            _._ denotes an empty folder since OPC does not allow an
            actual empty folder.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Core.PackagingCoreConstants.ForwardSlashEmptyFolder">
            <summary>
            /_._ can be used to check empty folders from package readers where the / is normalized.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Rules.AnalysisResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.AssemblyDirectlyUnderLibWarning">
            <summary>
              Looks up a localized string similar to The assembly '{0}' is placed directly under 'lib' folder. It is recommended that assemblies be placed inside a framework-specific folder. Move it into a framework-specific folder..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.AssemblyOutsideLibWarning">
            <summary>
              Looks up a localized string similar to The assembly '{0}' is not inside the 'lib' folder and hence it won't be added as a reference when the package is installed into a project. Move it into the 'lib' folder if it needs to be referenced..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.BuildConventionIsViolatedWarning">
            <summary>
              Looks up a localized string similar to - At least one {0} file was found in '{1}', but '{2}' was not..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DefaultSpecValueWarning">
            <summary>
              Looks up a localized string similar to The value "{0}" for {1} is a sample value and should be removed. Replace it with an appropriate value or remove it and rebuild your package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMBeginningToFiles">
            <summary>
              Looks up a localized string similar to - Add lib or ref assemblies for the.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMBeginningToNuspec">
            <summary>
              Looks up a localized string similar to - Add a dependency group for.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMEndingToFile">
            <summary>
              Looks up a localized string similar to target framework.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMEndingToNuspec">
            <summary>
              Looks up a localized string similar to to the nuspec.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMHasCompatMatch">
            <summary>
              Looks up a localized string similar to Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder have compatible matches, but not exact matches in the other location. Unless intentional, consult the list of actions below:.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.DependenciesGroupsForEachTFMHasNoExactMatch">
            <summary>
              Looks up a localized string similar to Some target frameworks declared in the dependencies group of the nuspec and the lib/ref folder do not have exact matches in the other location. Consult the list of actions below:.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.FilePathTooLongWarning">
            <summary>
              Looks up a localized string similar to The file '{0}' path, name, or both are too long. Your package might not work without long file path support. Please shorten the file path or file name..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.IconUrlDeprecationWarning">
            <summary>
              Looks up a localized string similar to The 'PackageIconUrl'/'iconUrl' element is deprecated. Consider using the 'PackageIcon'/'icon' element instead. Learn more at https://aka.ms/deprecateIconUrl.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidFrameworkWarning">
            <summary>
              Looks up a localized string similar to The folder '{0}' under 'lib' is not recognized as a valid framework name or a supported culture identifier. Rename it to a valid framework name or culture identifier..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidPlaceholderFileWarning">
            <summary>
              Looks up a localized string similar to The file at '{0}' uses the symbol for empty directory '_._', but it is present in a directory that contains other files. Please remove this file from directories that contain other files..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidPrereleaseDependencyWarning">
            <summary>
              Looks up a localized string similar to A stable release of a package should not have a prerelease dependency. Either modify the version spec of dependency "{0}" or update the version field in the nuspec..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInDependencyGroupsWarning">
            <summary>
              Looks up a localized string similar to The following dependency group(s) require(s) dots in the framework version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInFilesWarning">
            <summary>
              Looks up a localized string similar to The following packaged file folder(s) require(s) dots in the framework version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInFrameworkAssemblyGroupsWarning">
            <summary>
              Looks up a localized string similar to The following framework assembly group(s) require(s) dots in the framework version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInReferenceGroupsWarning">
            <summary>
              Looks up a localized string similar to The following reference group(s) require(s) dots in the framework version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkWarning">
            <summary>
              Looks up a localized string similar to One or more target framework specifiers in your package are missing required dots in their framework version numbers. This is required as of .NET5.0. Please rename them to include dots as needed (e.g. 'net50' to 'net5.0')..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.LegacyVersionWarning">
            <summary>
              Looks up a localized string similar to The package version '{0}' uses SemVer 2.0.0 or components of SemVer 1.0.0 that are not supported on legacy clients. Change the package version to a SemVer 1.0.0 string. If the version contains a release label it must start with a letter. This message can be ignored if the package is not intended for older clients..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.LicenseUrlDeprecationWarning">
            <summary>
              Looks up a localized string similar to The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.Migrator_AssemblyDirectlyUnderLibWarning">
            <summary>
              Looks up a localized string similar to The assembly 'lib\{0}' will be ignored when the package is installed after the migration..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.Migrator_PackageHasContentFolder">
            <summary>
              Looks up a localized string similar to 'content' assets will not be available when the package is installed after the migration..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.Migrator_PackageHasInstallScript">
            <summary>
              Looks up a localized string similar to install.ps1 script will be ignored when the package is installed after the migration..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.Migrator_XdtTransformInPackage">
            <summary>
              Looks up a localized string similar to XDT transform file '{0}' will not be applied when the package is installed after the migration..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.MisplacedInitScriptWarning">
            <summary>
              Looks up a localized string similar to The file '{0}' will be ignored by NuGet because it is not directly under 'tools' folder. Place the file directly under 'tools' folder..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.MisplacedTransformFileWarning">
            <summary>
              Looks up a localized string similar to The transform file '{0}' is outside the 'content' folder and hence will not be transformed during installation of this package. Move it into the 'content' folder..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.NoRefOrLibFolderInPackage">
             <summary>
               Looks up a localized string similar to This package does not contain a lib/ or ref/ folder, and will therefore be treated as compatible for all frameworks. Since framework specific files were found under the build/ directory for {0}, consider creating the following empty files to correctly narrow the compatibility of the package:
            {1}.
             </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.PlaceholderFileInPackageWarning">
            <summary>
              Looks up a localized string similar to An empty folder placeholder file '{0}' is in a non-empty folder and should be removed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ReferencesInNuspecAndRefFilesDontMatchWarning">
            <summary>
              Looks up a localized string similar to References were found in the nuspec, but some reference assemblies were not found in both the nuspec and ref folder. Add the following reference assemblies:.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ReferencesInNuspecAndRefFilesDontMatchWarningAddToNuspecListItemFormat">
            <summary>
              Looks up a localized string similar to - Add {0} to the {1} reference group in the nuspec.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ReferencesInNuspecAndRefFilesDontMatchWarningAddToNuspecNoTfmListItemFormat">
            <summary>
              Looks up a localized string similar to - Add {0} to the references element in the nuspec.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ReferencesInNuspecAndRefFilesDontMatchWarningAddToRefListItemFormat">
            <summary>
              Looks up a localized string similar to - Add {0} to the ref/{1}/ directory.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.ScriptOutsideToolsWarning">
            <summary>
              Looks up a localized string similar to The script file '{0}' is outside the 'tools' folder and hence will not be executed during installation of this package. Move it into the 'tools' folder..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.UnrecognizedLicenseIdentifier">
            <summary>
              Looks up a localized string similar to The license identifier '{0}' is not recognized by the current toolset..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.UnrecognizedScriptWarning">
            <summary>
              Looks up a localized string similar to The script file '{0}' is not recognized by NuGet and hence will not be executed during installation of this package. Rename it to install.ps1, uninstall.ps1 or init.ps1 and place it directly under 'tools'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.UnspecifiedDependencyVersionWarning">
            <summary>
              Looks up a localized string similar to The version of dependency '{0}' is not specified. Specify the version of dependency and rebuild your package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.AnalysisResources.WinRTObsoleteWarning">
            <summary>
              Looks up a localized string similar to The file at '{0}' uses the obsolete 'WinRT' as the framework folder. Replace 'WinRT' or 'WinRT45' with 'NetCore45'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.MisplacedAssemblyOutsideLibRule.ValidFolders">
            <summary>
            Folders that are expected to have .dll and .winmd files
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Rules.MisplacedAssemblyUnderLibRule.ValidFolders">
            <summary>
            Folders that are expected to have .dll and .winmd files
            </summary>
        </member>
        <member name="T:NuGet.Packaging.FrameworkReferenceGroup">
            <summary>
            A group of FrameworkReference with the same target framework.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FrameworkReferenceGroup.#ctor(NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGet.Packaging.FrameworkReference})">
            <summary>
            FrameworkReference group
            </summary>
            <param name="targetFramework">group target framework</param>
            <param name="frameworkReferences">FrameworkReferences</param>
        </member>
        <member name="P:NuGet.Packaging.FrameworkReferenceGroup.TargetFramework">
            <summary>
            Group target framework
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FrameworkReferenceGroup.FrameworkReferences">
            <summary>
            FrameworkReferences
            </summary>
        </member>
        <member name="T:NuGet.Packaging.FrameworkSpecificGroup">
            <summary>
            A group of items/files from a nupkg with the same target framework.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FrameworkSpecificGroup.#ctor(NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Framework specific group
            </summary>
            <param name="targetFramework">group target framework</param>
            <param name="items">group items</param>
        </member>
        <member name="P:NuGet.Packaging.FrameworkSpecificGroup.TargetFramework">
            <summary>
            Group target framework
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FrameworkSpecificGroup.Items">
            <summary>
            Item relative paths
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageDependencyGroup">
            <summary>
            Package dependencies grouped to a target framework.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageDependencyGroup.#ctor(NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependency})">
            <summary>
            Dependency group
            </summary>
            <param name="targetFramework">target framework</param>
            <param name="packages">dependant packages</param>
        </member>
        <member name="P:NuGet.Packaging.PackageDependencyGroup.TargetFramework">
            <summary>
            Dependency group target framework
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageDependencyGroup.Packages">
            <summary>
            Package dependencies
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IAsyncPackageContentReader">
            <summary>
            An asynchronous package content reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetFrameworkItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all framework references found in the nuspec.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetBuildItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items under the build folder.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetToolItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items under the tools folder.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetContentItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetLibItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all lib items without any filtering.
            </summary>
            <remarks>Use GetReferenceItemsAsync(...) for the filtered list.</remarks>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetReferenceItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetPackageDependenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns package dependencies.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.Packaging.INuspecReader">
            <summary>
            A development package nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.INuspecReader.GetLanguage">
            <summary>
            The locale ID for the package, such as en-us.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetFrameworkItems">
            <summary>
            Returns all framework references found in the nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetBuildItems">
            <summary>
            Returns all items under the build folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetToolItems">
            <summary>
            Returns all items under the tools folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetContentItems">
            <summary>
            Returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetLibItems">
            <summary>
            Returns all lib items without any filtering. Use GetReferenceItems for the filtered list.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetReferenceItems">
            <summary>
            Returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetPackageDependencies">
            <summary>
            Returns package dependencies.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IPackageDownloader">
            <summary>
            A package downloader.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageDownloader.ContentReader">
            <summary>
            Gets an asynchronous package content reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="P:NuGet.Packaging.IPackageDownloader.CoreReader">
            <summary>
            Gets an asynchronous package core reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.CopyNupkgFileToAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a .nupkg to a target file path.
            </summary>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the copy was successful.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="destinationFilePath" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.GetPackageHashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a package hash.
            </summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />
            representing the package hash.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="hashAlgorithm" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.SetExceptionHandler(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Sets an exception handler for package downloads.
            </summary>
            <remarks>The exception handler returns a task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the exception was handled.  To handle an exception and stop its
            propagation, the task should return <c>true</c>.  Otherwise, the exception will be rethrown.</remarks>
            <param name="handleExceptionAsync">An exception handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handleExceptionAsync" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.SetThrottle(System.Threading.SemaphoreSlim)">
            <summary>
            Sets a throttle for package downloads.
            </summary>
            <param name="throttle">A throttle.  Can be <c>null</c>.</param>
        </member>
        <member name="T:NuGet.Packaging.IPackageResolver">
            <summary>
            Core package resolver
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="T:NuGet.Packaging.MinClientVersionException">
            <summary>
            Custom exception type for a package that has a higher minClientVersion than the current client.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.PathResolver">
            <summary>
            Path resolver for the root package folder containing this package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.Id">
            <summary>
            Package id.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.Version">
            <summary>
            Package version.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.#ctor(NuGet.Common.INuGetPathContext)">
            <summary>
            Creates a package folder path resolver that scans multiple folders to find a package.
            </summary>
            <param name="pathContext">NuGet paths loaded from NuGet.Config settings.</param>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageDirectory(System.String,System.String)">
            <summary>
            Returns the root directory of an installed package.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the path if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageDirectory(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Returns the root directory of an installed package.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the path if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageInfo(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Returns the package info along with a path resolver specific to the folder where the package exists.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the package info if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="T:NuGet.Packaging.IHashFunction">
            <summary>
            Provides incremental hashing.
            
            This is non-private only to facilitate unit testing.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IHashFunction.GetHash">
             <summary>
             Gets the hash.
            
             Once GetHash is called, no further hash updates are allowed.
             </summary>
             <returns>A base64-encoded hash.</returns>
        </member>
        <member name="M:NuGet.Packaging.IHashFunction.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Incrementally updates the hash.
            </summary>
            <param name="data">The data to be included in the hash.</param>
            <param name="offset">The offset from which data should be read.</param>
            <param name="count">The count of bytes to read.</param>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LicenseExpressionToken">
            <summary>
            Represents a token of a parsed license expression. The tokens are either operators, parentheses or values. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.LicenseExpressionToken.TokenType">
            <summary>
            The token type
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.LicenseExpressionToken.Value">
            <summary>
            The value of this token.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Licenses.LicenseExpressionTokenizer.#ctor(System.String)">
            <summary>
            A tokenizer for a license expression.
            This implementation assumes that the input has been sanitized and that there are no invalid characters.
            </summary>
            <param name="value">value to be tokenized</param>
            <exception cref="T:System.ArgumentException">If the string is null or whitespace.</exception>
        </member>
        <member name="M:NuGet.Packaging.Licenses.LicenseExpressionTokenizer.HasValidCharacters">
            <summary>
            The valid characters for a license identifier are a-zA-Z0-9.-+
            The valid characters for a license expression are the above whitespace and ().
            </summary>
            <returns>Whether the value has valid characters.</returns>
        </member>
        <member name="M:NuGet.Packaging.Licenses.LicenseExpressionTokenizer.Tokenize">
            <summary>
            Given a string, tokenizes by space into operators and values. The considered operators are, AND, OR, WITH, (, and ). 
            </summary>
            <returns>tokens, <see cref="T:NuGet.Packaging.Licenses.LicenseExpressionToken" />/&gt;</returns>
        </member>
        <member name="M:NuGet.Packaging.Licenses.LicenseExpressionTokenizer.ParseTokenType(System.String)">
            <summary>
            Parses a token type given a string.
            This method assumes that the brackets have been parsed out. 
            </summary>
            <param name="token">The token</param>
            <returns>A parsed token, operator or value.</returns>
            <remarks>This method assumes the brackets have already been parsed.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LicenseExpressionType">
            <summary>
            Represents the expression type of a <see cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpression" />.
            License type means that it's a <see cref="T:NuGet.Packaging.Licenses.NuGetLicense" />. Operator means that it's a <see cref="T:NuGet.Packaging.Licenses.LicenseOperator" />
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LicenseOperator">
            <summary>
            A NuGetLicenseOperator. The operator options are: WITH or Logical operator, AND and OR.
            This is an abstract class so based on the NuGetLicenseOperatorType, it can be either a <see cref="T:NuGet.Packaging.Licenses.WithOperator" /> or a <see cref="T:NuGet.Packaging.Licenses.LogicalOperator" />.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.LicenseOperator.OperatorType">
            <summary>
            The operator type.
            LogicalOperator means it's AND or OR and <see cref="T:NuGet.Packaging.Licenses.LogicalOperator" />
            NuGetLicenseWithOperator means it's the WITH operator and <see cref="T:NuGet.Packaging.Licenses.WithOperator" />
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LicenseOperatorType">
            <summary>
            Represents the type of <see cref="T:NuGet.Packaging.Licenses.LicenseOperator" /> <see cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpression" />.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LicenseTokenType">
            <summary>
            The valid token types in a license expression. These are ordered by priority, be aware when changing them. See <seealso cref="T:NuGet.Packaging.Licenses.LicenseTokenTypeExtensions" />
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LogicalOperator">
            <summary>
            A Logical Operator NuGetLicenseExpression.
            It is either an OR or an AND operator, represented by <see cref="P:NuGet.Packaging.Licenses.LogicalOperator.LogicalOperatorType" />.
            This operator will always have a left and a right side, both of which are <see cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpression" /> and never null. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.LogicalOperator.LogicalOperatorType">
            <summary>
            Represents the logical operator type of NuGetLicenseExpression.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.LogicalOperatorType">
            <summary>
            Represents the logical operator type of a <see cref="T:NuGet.Packaging.Licenses.LogicalOperator" />.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.NuGetLicense">
            <summary>
            NuGet's internal representation of a license identifier. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.NuGetLicense.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.NuGetLicense.Plus">
            <summary>
            Signifies whether the plus operator has been specified on this license
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.NuGetLicense.IsStandardLicense">
            <summary>
            Signifies whether this is a standard license known by the NuGet APIs.
            Pack for example should warn for these.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicense.ParseIdentifier(System.String,System.Boolean)">
            <summary>
            Parse a licenseIdentifier. If a licenseIdentifier is deprecated, this will throw. Non-standard licenses get parsed into a object model as well.
            </summary>
            <param name="licenseIdentifier">license identifier to be parsed</param>
            <param name="allowUnlicensed">Whether the parser allows the UNLICENSED identifier</param>
            <returns>Prased NuGetLicense object</returns>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the identifier is deprecated, contains invalid characters or is an exception identifier.</exception>
            <exception cref="T:System.ArgumentException">If it's null or empty.</exception>
            <remarks>The purpose of the <paramref name="allowUnlicensed" /> switch is to allow the expression parser communicate at which operand location the unlicensed identifier is legal. </remarks>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicense.HasValidCharacters(System.String)">
            <summary>
            The valid characters for a license identifier are a-zA-Z0-9.-
            This method assumes that the trailing + operator has been stripped out.
            </summary>
            <param name="value">The value to be validated.</param>
            <returns>whether the value has valid characters</returns>
        </member>
        <member name="T:NuGet.Packaging.Licenses.NuGetLicenseException">
            <summary>
            NuGet's internal representation of a license exception identifier. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.NuGetLicenseException.Identifier">
            <summary>
            The Exception's identifier
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseException.ParseIdentifier(System.String)">
            <summary>
            Parse an exceptionIdentifier. If the exceptionIdentifier is deprecated, this will throw. Non-standard exception do not get parsed into an object model.
            </summary>
            <param name="exceptionIdentifier">Exception identifier to be parsed.</param>
            <returns>Parsed License Exception</returns>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the identifier is deprecated, is a license or simply does not exist.</exception>
            <exception cref="T:System.ArgumentException">If it's null or empty.</exception>
        </member>
        <member name="T:NuGet.Packaging.Licenses.NuGetLicenseExpression">
            <summary>
            Represents a parsed NuGetLicenseExpression.
            This is an abstract class so based on the Type, it can be either a <see cref="T:NuGet.Packaging.Licenses.NuGetLicense" /> or a <see cref="T:NuGet.Packaging.Licenses.LicenseOperator" />.
            <seealso cref="T:NuGet.Packaging.Licenses.LicenseExpressionType" />
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.NuGetLicenseExpression.Type">
            <summary>
            The type of the NuGetLicenseExpression.
            License type means that it's a <see cref="T:NuGet.Packaging.Licenses.NuGetLicense" />.
            Operator means that it's a <see cref="T:NuGet.Packaging.Licenses.LicenseOperator" />
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseExpression.Parse(System.String)">
            <summary>
            Parses a License Expression if valid.
            The expression would be parsed correct, even if non-standard exceptions are encountered.
            The non-standard Licenses/Exceptions have metadata on them with which the caller can make decisions.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <returns>Parsed NuGet License Expression model.</returns>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression is empty or null.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression has invalid characters</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression itself is invalid. Example: MIT OR OR Apache-2.0, or the MIT or Apache-2.0, because the expressions are case sensitive.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression's brackets are mismatched.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the licenseIdentifier is deprecated.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the exception identifier is deprecated.</exception>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseExpressionExtensions.HasOnlyStandardIdentifiers(NuGet.Packaging.Licenses.NuGetLicenseExpression)">
            <summary>
            Determines whether all the licenses and exceptions are not deprecated.
            </summary>
            <param name="expression">expression to be validated</param>
            <returns>Whether this expression consists of licenses with standard identifiers</returns>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseExpressionExtensions.OnEachLeafNode(NuGet.Packaging.Licenses.NuGetLicenseExpression,System.Action{NuGet.Packaging.Licenses.NuGetLicense},System.Action{NuGet.Packaging.Licenses.NuGetLicenseException})">
            <summary>
            A leaf node in an expression can only be a License or an Exception. Run a func on each one.
            </summary>
            <param name="expression">The expression to be walked.</param>
            <param name="licenseProcessor">A processor for the licenses.</param>
            <param name="exceptionProcessor">A processor for the exceptions.</param>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseExpressionParser.Parse(System.String)">
            <summary>
            Parses a License Expression if valid.
            The expression would be parsed correct, even if non-standard exceptions are encountered. The non-standard Licenses/Exceptions have metadata on them with which the caller can make decisions.
            Based on the Shunting Yard algorithm. <see href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" />
            This method first creates an postfix expression by separating the operators and operands.
            Later the postfix expression is evaluated into an object model that represents the expression. Note that brackets are dropped in this conversion and this is not round-trippable.
            The token precedence helps make sure that the expression is a valid infix one. 
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <returns>Parsed NuGet License Expression model.</returns>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression is empty or null.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression has invalid characters</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression itself is invalid. Example: MIT OR OR Apache-2.0, or the MIT or Apache-2.0, because the expressions are case sensitive.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the expression's brackets are mismatched.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the licenseIdentifier is deprecated.</exception>
            <exception cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpressionParsingException">If the exception identifier is deprecated.</exception>
        </member>
        <member name="M:NuGet.Packaging.Licenses.NuGetLicenseExpressionParser.GetTokens(System.String)">
            <summary>
            Tokenizes the expression as per the license expression rules. Throws if the string contains invalid characters.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Licenses.WithOperator">
            <summary>
            Represents a <see cref="T:NuGet.Packaging.Licenses.NuGetLicenseExpression" /> that's a WITH operator.
            It has a License and Exception.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.WithOperator.License">
            <summary>
            The license.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Licenses.WithOperator.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.LocalPackageArchiveDownloader">
            <summary>
            A package downloader for local archive packages.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LocalPackageArchiveDownloader.ContentReader">
            <summary>
            Gets an asynchronous package content reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="P:NuGet.Packaging.LocalPackageArchiveDownloader.CoreReader">
            <summary>
            Gets an asynchronous package core reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.#ctor(System.String,System.String,NuGet.Packaging.Core.PackageIdentity,NuGet.Common.ILogger)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.LocalPackageArchiveDownloader" /> class.
            </summary>
            <param name="source">A package source.</param>
            <param name="packageFilePath">A source package archive file path.</param>
            <param name="packageIdentity">A package identity.</param>
            <param name="logger">A logger.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="packageFilePath" />
            is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" />
            is either <c>null</c> or an empty string.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.CopyNupkgFileToAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a .nupkg to a target file path.
            </summary>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the copy was successful.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="destinationFilePath" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.GetPackageHashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a package hash.
            </summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />
            representing the package hash.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="hashAlgorithm" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.SetExceptionHandler(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Sets an exception handler for package downloads.
            </summary>
            <remarks>The exception handler returns a task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the exception was handled.  To handle an exception and stop its
            propagation, the task should return <c>true</c>.  Otherwise, the exception will be rethrown.</remarks>
            <param name="handleExceptionAsync">An exception handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handleExceptionAsync" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.SetThrottle(System.Threading.SemaphoreSlim)">
            <summary>
            Sets a throttle for package downloads.
            </summary>
            <param name="throttle">A throttle.  Can be <c>null</c>.</param>
        </member>
        <member name="T:NuGet.Packaging.MinClientVersionUtility">
            <summary>
            Helpers for dealing with the NuGet client version and package minClientVersions.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.VerifyMinClientVersion(NuGet.Packaging.Core.NuspecCoreReaderBase)">
            <summary>
            Check the package minClientVersion and throw if it is greater than the current client version.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.IsMinClientVersionCompatible(NuGet.Packaging.Core.NuspecCoreReaderBase)">
            <summary>
            Verify minClientVersion.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.IsMinClientVersionCompatible(NuGet.Versioning.NuGetVersion)">
            <summary>
            Verify minClientVersion.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.GetNuGetClientVersion">
            <summary>
            Read the NuGet client version from the assembly info as a NuGetVersion.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.NuspecReader">
            <summary>
            Reads .nuspec files
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,System.Boolean)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups(System.Boolean)">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReferenceGroups">
            <summary>
            Reference item groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkReferenceGroups">
            <summary>
            Framework assembly groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkAssemblyGroups">
            <summary>
            Framework assembly groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLanguage">
            <summary>
            Package language
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLicenseUrl">
            <summary>
            Package License Url
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetContentFiles">
            <summary>
            Build action groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetTitle">
            <summary>
            Package title.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetAuthors">
            <summary>
            Package authors.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetTags">
            <summary>
            Package tags.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetOwners">
            <summary>
            Package owners.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDescription">
            <summary>
            Package description.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReleaseNotes">
            <summary>
            Package release notes.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetSummary">
            <summary>
            Package summary.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetProjectUrl">
            <summary>
            Package project url.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetIconUrl">
            <summary>
            Package icon url.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetCopyright">
            <summary>
            Copyright information.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetRepositoryMetadata">
            <summary>
            Source control repository information.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLicenseMetadata">
            <summary>
            Parses the license object if specified.
            The metadata can be of 2 types, Expression and File.
            The method will not fail if it sees values that invalid (empty/unparseable license etc), but it will rather add validation errors/warnings. 
            </summary>
            <remarks>This method never throws. Bad data is still parsed. </remarks>
            <returns>The licensemetadata if specified</returns>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetRequireLicenseAcceptance">
            <summary>
            Require license acceptance when installing the package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkRefGroups">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetIcon">
            <summary>
            Gets the icon metadata from the .nuspec
            </summary>
            <returns>A string containing the icon path or null if no icon entry is found</returns>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReadme">
            <summary>
            Gets the readme metadata from the .nuspec
            </summary>
            <returns>A string containing the readme path or null if no readme entry is found</returns>
        </member>
        <member name="T:NuGet.Packaging.PackageArchiveReader">
            <summary>
            Reads a development nupkg
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageArchiveReader.SigningSpecifications">
            <summary>
            Signature specifications.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageArchiveReader.ZipReadStream">
            <summary>
            Stream underlying the ZipArchive. Used to do signature verification on a SignedPackageArchive.
            If this is null then we cannot perform signature verification.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageArchiveReader._isSigned">
            <summary>
            True if the package is signed
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">If true the nupkg stream will not be closed by the zip reader.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">leave nupkg stream open</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.CopyNupkgAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a package to the specified destination file path.
            </summary>
            <param name="nupkgFilePath">The destination file path.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="nupkgFilePath" />
            is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.Packaging.PackageArchiveReader.SizedArchiveEntryStream">
            <summary>
            This class literally just exists so CopyToFile gets a file size
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.ValidatePackageEntriesAsync(System.Threading.CancellationToken)">
            <summary>
            Validate all files in package are not traversed outside of the expected extraction path.
            Eg: file entry like ../../foo.dll can get outside of the expected extraction path.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.EmptyFrameworkFolderFile">
            <summary>
            Represents an empty framework folder in NuGet 2.0+ packages. 
            An empty framework folder is represented by a file named "_._".
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.Path">
            <summary>
            Gets the full path of the file inside the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.EffectivePath">
            <summary>
            Gets the path that excludes the root folder (content/lib/tools) and framework folder (if present).
            </summary>
            <example>
            If a package has the Path as 'content\[net40]\scripts\jQuery.js', the EffectivePath 
            will be 'scripts\jQuery.js'.
            
            If it is 'tools\init.ps1', the EffectivePath will be 'init.ps1'.
            </example>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.TargetFramework">
            <summary>
            FrameworkName object representing this package file's target framework. Deprecated. Must be null on net5.0 and greater.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.NuGetFramework">
            <summary>
            NuGetFramework object representing this package file's target framework. Use this instead of TargetFramework.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.FrameworkReferences">
            <summary>
            Specifies assemblies from GAC that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.PackageAssemblyReferences">
            <summary>
            Returns sets of References specified in the manifest.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.DependencyGroups">
            <summary>
            Specifies sets other packages that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.ContentFiles">
            <summary>
            Returns sets of Content Files specified in the manifest.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.LicenseMetadata">
            <summary>
            Represents the Package LicenseMetadata details.
            All the relevant warnings and errors should parsed into this model and ideally the readers of this metadata never throw. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LicenseMetadata.Type">
            <summary>
            The LicenseType, never null
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LicenseMetadata.License">
            <summary>
            The license, never null, could be empty.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LicenseMetadata.LicenseExpression">
            <summary>
            The license expression, could be null if the version is higher than the current supported or if the expression is not parseable.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LicenseMetadata.WarningsAndErrors">
            <summary>
            Non-null when the expression parsing yielded some issues. This will be used to display the errors/warnings in the UI. Only populated when the metadata element is returned by the nuspec reader;
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LicenseMetadata.Version">
            <summary>
            LicenseMetadata (expression) version. Never null.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="generateBackwardsCompatible">Write out a manifest that's consumable by legacy clients, by adding any necessary translations into legacy fields.</param>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream,System.Int32)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="minimumManifestVersion">The minimum manifest version that this class must use when saving.</param>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="minimumManifestVersion">The minimum manifest version that this class must use when saving.</param>
            <param name="generateBackwardsCompatible">Write out a manifest that's consumable by legacy clients, by adding any necessary translations into legacy fields.</param>
        </member>
        <member name="T:NuGet.Packaging.ManifestMetadata">
            <summary>
            Manifest (user created .nuspec) file metadata model
            </summary>
        </member>
        <member name="M:NuGet.Packaging.ManifestMetadata.#ctor(NuGet.Packaging.IPackageMetadata)">
            <summary>
            Constructs a ManifestMetadata instance from an IPackageMetadata instance
            </summary>
        </member>
        <member name="M:NuGet.Packaging.ManifestMetadata.Validate">
            <summary>
            Checks that the metadata in the nuspec is enough to create a package
            </summary>
            <returns>A iterable collection with the validation error messages</returns>
            <remarks>Error codes are not associated with the validation error messages returned</remarks>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV1">
            <summary>
            Baseline schema 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV2">
            <summary>
            Added copyrights, references and release notes
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV3">
            <summary>
            Used if the version is a semantic version.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV4">
            <summary>
            Added 'targetFramework' attribute for 'dependency' elements.
            Allow framework folders under 'content' and 'tools' folders. 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV5">
            <summary>
            Added 'targetFramework' attribute for 'references' elements.
            Added 'minClientVersion' attribute
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV6">
            <summary>
            Allows XDT transformation
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageBuilder.MaxIconFileSize">
            <summary>
            Maximum Icon file size: 1 megabyte
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageBuilder.Properties">
            <summary>
            Exposes the additional properties extracted by the metadata
            extractor or received from the command line.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageBuilder.ContentFiles">
            <summary>
            ContentFiles section from the manifest for content v2
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.FindFileInPackage(System.String,System.Collections.Generic.IEnumerable{NuGet.Packaging.IPackageFile},System.String@)">
            <summary>Looks for the specified file within the package</summary>
            <param name="filePath">The file path to search for</param>
            <param name="packageFiles">The list of files to search within</param>
            <param name="filePathIncorrectCase">If the file was not found, this will be a path which almost matched but had the incorrect case</param>
            <returns>An <see cref="T:NuGet.Packaging.IPackageFile" /> matching the specified path or <c>null</c></returns>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ValidateIconFile(System.Collections.Generic.IEnumerable{NuGet.Packaging.IPackageFile},System.String)">
            <summary>
            Given a list of resolved files,
            determine which file will be used as the icon file and validate its size and extension.
            </summary>
            <param name="files">Files resolved from the file entries in the nuspec</param>
            <param name="iconPath">icon entry found in the .nuspec</param>
            <exception cref="T:NuGet.Packaging.Core.PackagingException">When a validation rule is not met</exception>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ValidateReadmeFile(System.Collections.Generic.IEnumerable{NuGet.Packaging.IPackageFile},System.String)">
            <summary>
            Validate that the readme file is of the correct size/type and can be opened properly except for Symbol packages.
            </summary>
            <param name="files">Files resolved from the file entries in the nuspec</param>
            <param name="readmePath">readmepath found in the .nuspec</param>
            <exception cref="T:NuGet.Packaging.Core.PackagingException">When a validation rule is not met</exception>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ResolvePackagePath(System.String,System.String,System.String,System.String)">
            <summary>
            Determins the path of the file inside a package.
            For recursive wildcard paths, we preserve the path portion beginning with the wildcard.
            For non-recursive wildcard paths, we use the file name from the actual file path on disk.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.IsKnownFolder(System.String)">
            <summary>
            Returns true if the path uses a known folder root.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ParseTags(System.String)">
            <summary>
            Tags come in this format. tag1 tag2 tag3 etc..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="targetFramework">The target framework to use, pass Any for AnyFramework. Does not allow null.</param>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="targetFramework">The target framework to use.</param>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.SourcePath">
            <summary>
            Path on disk
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.TargetPath">
            <summary>
            Path in package
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageCreation.Resources.NuGetResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.CannotCreateEmptyPackage">
            <summary>
              Looks up a localized string similar to Cannot create a package that has no dependencies nor content..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DependencyHasInvalidVersion">
            <summary>
              Looks up a localized string similar to Dependency '{0}' has an invalid version..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DuplicateDependenciesDefined">
            <summary>
              Looks up a localized string similar to '{0}' already has a dependency defined for '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.FoundDuplicateFile">
            <summary>
              Looks up a localized string similar to Attempted to pack multiple files into the same location(s). The following destinations were used multiple times: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconCannotOpenFile">
            <summary>
              Looks up a localized string similar to Cannot open the icon file '{0}': {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconErrorEmpty">
            <summary>
              Looks up a localized string similar to The icon file is empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconInvalidExtension">
            <summary>
              Looks up a localized string similar to The 'icon' element '{0}' has an invalid file extension. Valid options are .png, .jpg or .jpeg..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconMaxFileSizeExceeded">
            <summary>
              Looks up a localized string similar to The icon file size must not exceed 1 megabyte..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconMissingRequiredValue">
            <summary>
              Looks up a localized string similar to The element 'icon' cannot be empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconNoFileElement">
            <summary>
              Looks up a localized string similar to The icon file '{0}' does not exist in the package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IconNoFileElementWithHint">
            <summary>
              Looks up a localized string similar to The icon file '{0}' does not exist in the package. (Did you mean '{1}'?).
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IncompatibleSchema">
            <summary>
              Looks up a localized string similar to The schema version of '{0}' is incompatible with version {1} of NuGet. Please upgrade NuGet to the latest version from http://go.microsoft.com/fwlink/?LinkId=213942..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.InvalidPackageId">
            <summary>
              Looks up a localized string similar to The package ID '{0}' contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_DependenciesHasMixedElements">
            <summary>
              Looks up a localized string similar to &lt;dependencies&gt; element must not contain both &lt;group&gt; and &lt;dependency&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ExcludeContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to Exclude path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_IdMaxLengthExceeded">
            <summary>
              Looks up a localized string similar to Id must not exceed 100 characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidMinClientVersion">
            <summary>
              Looks up a localized string similar to The 'minClientVersion' attribute in the package manifest has invalid value. It must be a valid version string..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReference">
            <summary>
              Looks up a localized string similar to Invalid assembly reference '{0}'. Ensure that a file named '{0}' exists in the lib directory..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReferenceFile">
            <summary>
              Looks up a localized string similar to Assembly reference '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_LicenseFileExtensionIsInvalid">
            <summary>
              Looks up a localized string similar to The license file '{0}' has an invalid extension. Valid options are .txt, .md or none..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_LicenseFileIsNotInNupkg">
            <summary>
              Looks up a localized string similar to The license file '{0}' does not exist in the package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_LicenseFileIsNotInNupkgWithHint">
            <summary>
              Looks up a localized string similar to The license file '{0}' does not exist in the package. (Did you mean '{1}'?).
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_LicenseUrlCannotBeUsedWithLicenseMetadata">
            <summary>
              Looks up a localized string similar to The licenseUrl and license elements cannot be used together..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_PropertyValueReadFailure">
            <summary>
              Looks up a localized string similar to An error occured while trying to parse the value '{0}' of property '{1}' in the manifest file..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesHasMixedElements">
            <summary>
              Looks up a localized string similar to &lt;references&gt; element must not contain both &lt;group&gt; and &lt;reference&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesIsEmpty">
            <summary>
              Looks up a localized string similar to The element package\metadata\references\group must contain at least one &lt;reference&gt; child element..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredElementMissing">
            <summary>
              Looks up a localized string similar to The required element '{0}' is missing from the manifest..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredMetadataMissing">
            <summary>
              Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequireLicenseAcceptanceRequiresEmit">
            <summary>
              Looks up a localized string similar to EmitRequireLicenseAcceptance must not be set to false if RequireLicenseAcceptance is set to true..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequireLicenseAcceptanceRequiresLicenseUrl">
            <summary>
              Looks up a localized string similar to Enabling license acceptance requires a license or a licenseUrl to be specified. The licenseUrl will be deprecated, consider using the license metadata..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_SourceContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to Source path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_TargetContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to Target path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_UriCannotBeEmpty">
            <summary>
              Looks up a localized string similar to {0} cannot be empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.PackageAuthoring_FileNotFound">
            <summary>
              Looks up a localized string similar to File not found: '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ReadmeCannotOpenFile">
            <summary>
              Looks up a localized string similar to Cannot open the readme file '{0}': {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ReadmeErrorEmpty">
            <summary>
              Looks up a localized string similar to The readme file is empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ReadmeFileExtensionIsInvalid">
            <summary>
              Looks up a localized string similar to The readme file '{0}' has an invalid extension..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ReadmeMissingRequiredValue">
            <summary>
              Looks up a localized string similar to The element 'readme' cannot be empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ReadmeNoFileElement">
            <summary>
              Looks up a localized string similar to The readme file '{0}' does not exist in the package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.UnknownSchemaVersion">
            <summary>
              Looks up a localized string similar to Unknown schema version '{0}'..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FrameworkNameUtility.ParseFrameworkFolderName(System.String,System.Boolean,System.String@)">
            <summary>
            Parses the specified string into FrameworkName object.
            </summary>
            <param name="path">The string to be parse.</param>
            <param name="strictParsing">if set to <c>true</c>, parse the first folder of path even if it is unrecognized framework.</param>
            <param name="effectivePath">returns the path after the parsed target framework</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.FrameworkNameUtility.ParseNuGetFrameworkFolderName(System.String,System.Boolean,System.String@)">
            <summary>
            Parses the specified string into FrameworkName object.
            </summary>
            <param name="path">The string to be parse.</param>
            <param name="strictParsing">if set to <c>true</c>, parse the first folder of path even if it is unrecognized framework.</param>
            <param name="effectivePath">returns the path after the parsed target framework</param>
            <returns></returns>
        </member>
        <member name="F:NuGet.Packaging.PackageIdValidator.MaxPackageIdLength">
            <summary>
            Max allowed length for package Id.
            In case update this value please update in src\NuGet.Core\NuGet.Configuration\PackageSourceMapping\PackageSourceMapping.cs too.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageExtraction.PackageExtractionBehavior.XmlDocFileSaveMode">
            <summary>
            Gets or sets the <see cref="!:PackageExtraction.XmlDocFileSaveMode" />.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageExtractionContext.SignedPackageVerifier">
            <remarks>
            This property should only be used to override the default verifier on tests.
            It is public only so that NuGet.Commands.RestoreRequest can pass this property through
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetSatellitePackageInfoAsync(NuGet.Packaging.Core.IAsyncPackageCoreReader,System.Threading.CancellationToken)">
            <summary>
            A package is deemed to be a satellite package if it has a language property set, the id of the package is
            of the format [.*].[Language]
            and it has at least one dependency with an id that maps to the runtime package .
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetInstalledPackageFilesAsync(NuGet.Packaging.PackageArchiveReader,NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackagePathResolver,NuGet.Packaging.PackageSaveMode,System.Threading.CancellationToken)">
            <summary>
            This returns all the installed package files (does not include satellite files)
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv2">
            <summary>
            Default package save mode for v2 (packages.config)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files" /> and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg" />.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv3">
            <summary>
            Default package save mode for v3 (project.json)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files" />, <see cref="F:NuGet.Packaging.PackageSaveMode.Nuspec" />, and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg" />.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.None">
            <summary>
            Treat XML doc files as regular files (legacy behavior).
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Skip">
            <summary>
            Do not extract XML documentation files
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Compress">
            <summary>
            Compress XML doc files in a zip archive.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.ZipArchiveExtensions">
            <summary>
            Nupkg reading helper methods
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageExtractor.InstallFromSourceAsync(System.String,NuGet.Packaging.Core.PackageIdentity,System.Func{System.IO.Stream,System.Threading.Tasks.Task},NuGet.Packaging.VersionFolderPathResolver,NuGet.Packaging.PackageExtractionContext,System.Threading.CancellationToken,System.Guid)">
            <summary>
            Uses a copy function to install a package to a global packages directory.
            </summary>
            <param name="copyToAsync">
            A function which should copy the package to the provided destination stream.
            </param>
            <param name="packageExtractionContext">
            The version folder path context, which encapsulates all of the parameters to observe
            while installing the package.
            </param>
            <param name="token">The cancellation token.</param>
            <returns>
            True if the package was installed. False if the package already exists and therefore
            resulted in no copy operation.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.PackageExtractor.DeleteTargetAndTempPaths(System.String,System.String)">
            <summary>
            Delete the target directory path and the temp nupkg path in case of a failed extraction.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageFolderReader">
            <summary>
            Reads an unzipped nupkg folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String)">
            <summary>
            Package folder reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folderPath">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetStream(System.String)">
            <summary>
            Opens a local file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.IsFileInRoot(System.String)">
            <summary>
            True if the path does not contain /
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.IsNupkg(System.String)">
            <summary>
            True if the path ends with .nupkg
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetRelativePath(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
            Build the relative path in the same format that ZipArchive uses
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagePathResolver">
            <summary>
            A V2 path resolver.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagePathResolver.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NuGet.Packaging.PackagePathResolver" /> class.
            </summary>
            <param name="rootDirectory">The root directory.</param>
            <param name="useSideBySidePaths">A value indicating whether to use side-by-side paths.</param>
            <exception cref="T:System.ArgumentException">If rootDirectory is null, empty or does not contain an absolute path. </exception>
        </member>
        <member name="T:NuGet.Packaging.PackageReaderBase">
            <summary>
            Abstract class that both the zip and folder package readers extend
            This class contains the path conventions for both zip and folder readers
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Instantiates a new <see cref="T:NuGet.Packaging.PackageReaderBase" /> class.
            </summary>
            <param name="frameworkProvider">A framework mapping provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="frameworkProvider" /> is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Instantiates a new <see cref="T:NuGet.Packaging.PackageReaderBase" /> class.
            </summary>
            <param name="frameworkProvider">A framework mapping provider.</param>
            <param name="compatibilityProvider">A framework compatibility provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="frameworkProvider" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="compatibilityProvider" /> is <c>null</c>.</exception>
        </member>
        <member name="P:NuGet.Packaging.PackageReaderBase.NuspecReader">
            <summary>
            Nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks">
            <summary>
            Frameworks mentioned in the package.
            </summary>
            <remarks>
            This method returns the target frameworks supported for packages.config projects.
            For PackageReference compatibility, use <see cref="T:NuGet.Client.ManagedCodeConventions" />
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetSupportedFrameworksAsync(System.Threading.CancellationToken)">
            <summary>
            Frameworks mentioned in the package.
            </summary>
            <remarks>
            This method returns the target frameworks supported for packages.config projects.
            For PackageReference compatibility, use <see cref="T:NuGet.Client.ManagedCodeConventions" />
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsAllowedBuildFile(System.String,System.String)">
            <summary>
            only packageId.targets and packageId.props should be used from the build folder
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsReferenceAssembly(System.String)">
            <summary>
            True only for assemblies that should be added as references to msbuild projects
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.ValidatePackageEntry(System.String,System.String,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Validate file entry in package is not traversed outside of the expected extraction path.
            Eg: file entry like ../../foo.dll can get outside of the expected extraction path.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetContentHash(System.Threading.CancellationToken,System.Func{System.String})">
            <summary>
            Get contenthash for a package.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReference">
            <summary>
            Represents a package element in the packages.config file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean,NuGet.Versioning.VersionRange)">
            <summary>
            Creates a new packages config entry
            </summary>
            <param name="identity">Package id and version</param>
            <param name="targetFramework">Package target framework installed to the project</param>
            <param name="userInstalled">True if the user installed this package directly</param>
            <param name="developmentDependency">True if the package is a development dependency</param>
            <param name="requireReinstallation">True if this package needs to be reinstalled</param>
            <param name="allowedVersions">Restrict package versions to the allowedVersions range</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.PackageIdentity">
            <summary>
            Id and Version of the package
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.AllowedVersions">
            <summary>
            The allowed range of versions that this package can be upgraded/downgraded to.
            </summary>
            <remarks>This is null if unbounded</remarks>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.HasAllowedVersions">
            <summary>
            True if allowedVersions exists.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.TargetFramework">
            <summary>
            Installed target framework version of the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsDevelopmentDependency">
            <summary>
            Development dependency
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsUserInstalled">
            <summary>
            True if the user installed or updated this package directly.
            False if this package was installed as a dependency by another package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.RequireReinstallation">
            <summary>
            Require reinstallation
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.ToString">
            <summary>
            Displays the identity and target framework of the reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.HasAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Determine if the package node has the attribute value as the targetValue.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.BoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Get a boolean attribute value, or false if it does not exist
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigReader">
            <summary>
            Reads packages.config
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetMinClientVersion">
            <summary>
            Reads the minimum client version from packages.config
            </summary>
            <returns>Minimum client version or the default of 2.5.0</returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages">
            <summary>
            Reads all package node entries in the config.
            If duplicate package ids exist an exception will be thrown.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages(System.Boolean)">
            <summary>
            Reads all package node entries in the config.
            </summary>
            <param name="allowDuplicatePackageIds">If True validation will be performed to ensure that 
            only one entry exists for each unique package id.</param>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigWriter">
            <summary>
            Writes the packages.config XML file to a stream
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteMinClientVersion(NuGet.Versioning.NuGetVersion)">
            <summary>
            Write a minimum client version to packages.config
            </summary>
            <param name="version">Minumum version of the client required to parse and use this file.</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Add a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package Version</param>
            <param name="targetFramework">Package targetFramework that's compatible with current project</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Adds a basic package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Adds a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdatePackageEntry(NuGet.Packaging.PackageReference,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdateOrAddPackageEntry(System.Xml.Linq.XDocument,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry using the original entry as a base if it exists.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package version</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package identity from the file
            </summary>
            <param name="identity">Package identity</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Removes a package entry from the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteFile(System.String)">
            <summary>
            Write the XDocument to the packages.config and disallow further changes.
            </summary>
            <param name="fullPath">the full path to packages.config file</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.Dispose">
            <summary>
            Write the XDocument to the stream and close it to disallow further changes.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackagingConstants.ManifestExtension">
            <summary>
            Represents the ".nuspec" extension.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Sha512HashFunction">
            <summary>
            A SHA-512 hash function that supports incremental hashing.
            
            This is non-private only to facilitate unit testing.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata">
            <summary>
            This class is used to hold metadata about the central directory archive structure
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.Position">
            <summary>
            Position in bytes of the corresponding central directory header relative to the start of the archive
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.OffsetToLocalFileHeader">
            <summary>
            Offset in bytes to the corresponding file header relative to the start of the archive
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.FileEntryTotalSize">
            <summary>
            Total size of corresponding file entry in bytes
            This should include size of local file header + encryption header + file data + data descriptor
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.IsPackageSignatureFile">
            <summary>
            Flag indicating if the entry is the package signature file
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.HeaderSize">
            <summary>
            Size of central directory header, in bytes.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.ChangeInOffset">
            <summary>
            Value used to identify how much the position of the OffsetToFileHeader property will change by
            the presence of a signature file in bytes
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.CentralDirectoryHeaderMetadata.IndexInHeaders">
            <summary>
            Index in which the central directory record was read from the archive.
            This index represents the order of the central directory record as it is in the file.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Crc32">
            <summary>
            Helper to calculate CRC-32 for data.
            Derivative of a .NET core implementation - https://source.dot.net/#System.IO.Compression.Tests/Common/System/IO/Compression/CRC.cs
            This is public to allow testing.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Crc32.CalculateCrc(System.Byte[])">
            <summary>
            Calculates a 32 bit cyclic redundancy code for the input data.
            </summary>
            <param name="data">Byte[] of the data.</param>
            <returns>32 bit cyclic redundancy code for the input data in uint.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.ReadAndWriteUntilPosition(System.IO.BinaryReader,System.IO.BinaryWriter,System.Int64)">
            <summary>
            Read bytes from a BinaryReader and write them to the BinaryWriter and stop when the provided position
            is the current position of the BinaryReader's base stream. It does not read the byte in the provided position.
            </summary>
            <param name="reader">Read bytes from this stream.</param>
            <param name="writer">Write bytes to this stream.</param>
            <param name="position">Position to stop copying data.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.ReadAndHashUntilPosition(System.IO.BinaryReader,System.Security.Cryptography.HashAlgorithm,System.Int64)">
             <summary>
             Read bytes from a BinaryReader and hash them with a given HashAlgorithm and stop when the provided position
             is the current position of the BinaryReader's base stream. It does not hash the byte in the provided position.
            
             </summary>
             <param name="reader">Read bytes from this stream</param>
             <param name="hashAlgorithm">HashAlgorithm used to hash contents</param>
             <param name="position">Position to stop copying data</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.HashBytes(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
             <summary>
             Hashes given byte array with a specified HashAlgorithm
            
             </summary>
             <param name="hashAlgorithm">HashAlgorithm used to hash contents</param>
             <param name="bytes">Content to hash</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.ReadAndHashUntilPosition(System.IO.BinaryReader,NuGet.Packaging.Sha512HashFunction,System.Int64)">
            <summary>
            Read bytes from a BinaryReader and hash them with a given HashAlgorithm wrapper and stop when the provided position
            is the current position of the BinaryReader's base stream. It does not hash the byte in the provided position.
            </summary>
            <param name="reader">Read bytes from this stream</param>
            <param name="hashFunc">HashAlgorithm wrapper used to hash contents cross platform</param>
            <param name="position">Position to stop copying data</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.HashBytes(NuGet.Packaging.Sha512HashFunction,System.Byte[])">
            <summary>
            Hashes given byte array with a specified HashAlgorithm wrapper which works cross platform.
            </summary>
            <param name="hashFunc">HashAlgorithm wrapper used to hash contents cross platform</param>
            <param name="bytes">Content to hash</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.HashBytes(NuGet.Packaging.Sha512HashFunction,System.Byte[],System.Int32)">
            <summary>
            Hashes given byte array with a specified HashAlgorithm wrapper which works cross platform.
            </summary>
            <param name="hashFunc">HashAlgorithm wrapper used to hash contents cross platform</param>
            <param name="bytes">Content to hash</param>
            <param name="count">The number of bytes in the input byte array to use as data.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.ReadSignedArchiveMetadata(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Read ZIP's offsets and positions of offsets.
            </summary>
            <param name="reader">binary reader to zip archive</param>
            <param name="validateSignatureEntry">boolean to skip validate signature entry</param>
            <returns>metadata with offsets and positions for entries</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.AssertSignatureEntryMetadata(System.IO.BinaryReader,NuGet.Packaging.Signing.SignedPackageArchiveMetadata)">
            <summary>
            Asserts the validity of central directory header and local file header for the package signature file entry.
            </summary>
            <param name="reader">BinaryReader on the package.</param>
            <param name="metadata">Metadata for the package signature file's central directory header.</param>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if either header is invalid.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.WriteSignatureIntoZip(System.IO.MemoryStream,System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Writes the signature data into the zip using the writer.
            The reader is used to read the exisiting zip. 
            </summary>
            <param name="signatureStream">MemoryStream of the signature to be inserted into the zip.</param>
            <param name="reader">BinaryReader to be used to read the existing zip data.</param>
            <param name="writer">BinaryWriter to be used to write the signature into the zip.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.WriteLocalFileHeaderIntoZip(System.IO.BinaryWriter,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Writes a local file header into a zip using the writer starting at the writer.BaseStream.Position.
            </summary>
            <param name="writer">BinaryWriter to be used to write file.</param>
            <param name="fileData">Byte[] of the corresponding file to be written into the zip.</param>
            <param name="crc32">CRC-32 for the file.</param>
            <param name="dosDateTime">Last modified DateTime for the file data.</param>
            <returns>Number of total bytes written into the zip.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.WriteFileIntoZip(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a file into a zip using the writer starting at the writer.BaseStream.Position.
            </summary>
            <param name="writer">BinaryWriter to be used to write file.</param>
            <param name="fileData">Byte[] of the file to be written into the zip.</param>
            <returns>Number of total bytes written into the zip.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.WriteCentralDirectoryHeaderIntoZip(System.IO.BinaryWriter,System.Byte[],System.UInt32,System.UInt32,System.Int64)">
            <summary>
            Writes a central directory header into a zip using the writer starting at the writer.BaseStream.Position.
            </summary>
            <param name="writer">BinaryWriter to be used to write file.</param>
            <param name="fileData">Byte[] of the file to be written into the zip.</param>
            <param name="crc32">CRC-32 checksum for the file.</param>
            <param name="dosDateTime">Last modified DateTime for the file data.</param>
            <param name="fileOffset">Offset, in bytes, for the local file header of the corresponding file from the start of the archive.</param>
            <returns>Number of total bytes written into the zip.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.ReadAndWriteUpdatedEndOfCentralDirectoryRecordIntoZip(System.IO.BinaryReader,System.IO.BinaryWriter,System.SByte,System.Int64,System.Int64)">
            <summary>
            Writes the end of central directory header into a zip using the writer starting at the writer.BaseStream.Position.
            The new end of central directory record will be based on the one at reader.BaseStream.Position.
            </summary>
            <param name="reader">BinaryReader to be used to read the existing end of central directory record.</param>
            <param name="writer">BinaryWriter to be used to write the updated end of central directory record.</param>
            <param name="entryCountChange">The change to central directory header counts.</param>
            <param name="sizeOfSignatureCentralDirectoryRecord">Size of the central directory header for the signature file.</param>
            <param name="sizeOfSignatureFileHeaderAndData">Size of the signature file and the corresponding local file header.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveIOUtility.DateTimeToDosTime(System.DateTime)">
            <summary>
            Converts a DateTime value into a unit in the MS-DOS date time format.
            Reference - https://docs.microsoft.com/en-us/cpp/c-runtime-library/32-bit-windows-time-date-formats
            Reference - https://source.dot.net/#System.IO.Compression/System/IO/Compression/ZipHelper.cs,91
            </summary>
            <param name="dateTime">DateTime value to be converted.</param>
            <returns>uint representing the MS-DOS equivalent date time.</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignedPackageArchiveMetadata">
            <summary>
            This class is used to hold metadata about the signed package archive being verified.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageArchiveMetadata.CentralDirectoryHeaders">
            <summary>
            List of central directory metadata ordered by the same order the central directory headers are in the archive
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageArchiveMetadata.StartOfLocalFileHeaders">
            <summary>
            Offset, in bytes, to the first file header relative to the start of the archive. Should typically be 0.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageArchiveMetadata.EndOfCentralDirectory">
            <summary>
            Offset, in bytes, to the end of central directory headers relative to the start of the archive.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageArchiveMetadata.SignatureCentralDirectoryHeaderIndex">
            <summary>
            Index of the signature central directory header in CentralDirectoryHeaders.
            If the CentralDirectoryHeaders list is ordered by IndexInHeaders this index indicates the position on the list for the signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveUtility.IsSigned(System.IO.BinaryReader)">
            <summary>
            Utility method to know if a zip archive is signed.
            </summary>
            <param name="reader">Binary reader pointing to a zip archive.</param>
            <returns>true if the given archive is signed</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveUtility.OpenPackageSignatureFileStream(System.IO.BinaryReader)">
            <summary>
            Opens a read-only stream for the package signature file.
            </summary>
            <remarks>Callers should first verify that a package is signed before calling this method.</remarks>
            <param name="reader">A binary reader for a signed package.</param>
            <returns>A readable stream.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="reader" /> is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if a package signature file is invalid or missing.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveUtility.RemoveRepositorySignaturesAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Removes repository primary signature (if it exists) or any repository countersignature (if it exists).
            </summary>
            <param name="input">A readable stream for a signed package.</param>
            <param name="output">A read/write stream for receiving an updated package.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A flag indicating whether or not a signature was removed.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveUtility.SignZip(System.IO.MemoryStream,System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
            Signs a Zip with the contents in the SignatureStream using the writer.
            The reader is used to read the exisiting contents for the Zip.
            </summary>
            <param name="signatureStream">MemoryStream of the signature to be inserted into the zip.</param>
            <param name="reader">BinaryReader to be used to read the existing zip data.</param>
            <param name="writer">BinaryWriter to be used to write the signature into the zip.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchiveUtility.VerifySignedPackageIntegrity(System.IO.BinaryReader,System.Security.Cryptography.HashAlgorithm,System.Byte[])">
             <summary>
             Verifies that a signed package archive's signature is valid and it has not been tampered with.
            
             </summary>
             <param name="reader">Signed package to verify</param>
             <param name="hashAlgorithm">Hash algorithm to be used to hash data.</param>
             <param name="expectedHash">Hash value of the original data.</param>
             <returns>True if package archive's hash matches the expected hash</returns>
        </member>
        <member name="P:NuGet.Packaging.Signing.AuthorSignPackageRequest.SignatureType">
            <summary>
            Gets the signature type.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.AuthorSignPackageRequest.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName)">
            <summary>
            Instantiates a new instance of the <see cref="T:NuGet.Packaging.Signing.AuthorSignPackageRequest" /> class.
            </summary>
            <param name="certificate">The signing certificate.</param>
            <param name="hashAlgorithm">The signature and timestamp hash algorithm.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="certificate" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="hashAlgorithm" />
            is invalid.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AuthorSignPackageRequest.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName,NuGet.Common.HashAlgorithmName)">
            <summary>
            Instantiates a new instance of the <see cref="T:NuGet.Packaging.Signing.AuthorSignPackageRequest" /> class.
            </summary>
            <param name="certificate">The signing certificate.</param>
            <param name="signatureHashAlgorithm">The signature hash algorithm.</param>
            <param name="timestampHashAlgorithm">The timestamp hash algorithm.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="certificate" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="signatureHashAlgorithm" />
            is invalid.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="timestampHashAlgorithm" />
            is invalid.</exception>
        </member>
        <member name="T:NuGet.Packaging.Signing.ISignatureProvider">
            <summary>
            Creates Signatures that can be added to packages.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignatureProvider.CreatePrimarySignatureAsync(NuGet.Packaging.Signing.SignPackageRequest,NuGet.Packaging.Signing.SignatureContent,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Create a signature.
            </summary>
            <param name="request">Signing request with all the information needed to create signature.</param>
            <param name="signatureContent">SignatureContent containing the Hash of the package and the signature version.</param>
            <param name="logger">Logger</param>
            <param name="token">Cancellation token.</param>
            <returns>A signature for the package.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignatureProvider.CreateRepositoryCountersignatureAsync(NuGet.Packaging.Signing.RepositorySignPackageRequest,NuGet.Packaging.Signing.PrimarySignature,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Create a repository countersignature.
            </summary>
            <param name="request">Signing request with all the information needed to create signature.</param>
            <param name="primarySignature">Primary signature to be countersigned.</param>
            <param name="logger">Logger</param>
            <param name="token">Cancellation token.</param>
            <returns>A signature for the package.</returns>
        </member>
        <member name="P:NuGet.Packaging.Signing.RepositorySignPackageRequest.V3ServiceIndexUrl">
            <summary>
            Gets the repository V3 service index URL.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.RepositorySignPackageRequest.PackageOwners">
            <summary>
            Gets a read-only list of package owners.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.RepositorySignPackageRequest.SignatureType">
            <summary>
            Gets the signature type.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.RepositorySignPackageRequest.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName,NuGet.Common.HashAlgorithmName,System.Uri,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Instantiates a new instance of the <see cref="T:NuGet.Packaging.Signing.RepositorySignPackageRequest" /> class.
            </summary>
            <param name="certificate">The signing certificate.</param>
            <param name="signatureHashAlgorithm">The signature hash algorithm.</param>
            <param name="timestampHashAlgorithm">The timestamp hash algorithm.</param>
            <param name="v3ServiceIndexUrl">The V3 service index URL.</param>
            <param name="packageOwners">A read-only list of package owners.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="certificate" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="signatureHashAlgorithm" />
            is invalid.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="timestampHashAlgorithm" />
            is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="v3ServiceIndexUrl" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="v3ServiceIndexUrl" />
            is neither absolute nor HTTPS.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="packageOwners" />
            is either empty or contains an invalid value.</exception>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningOptions.InputPackageStream">
            <summary>
            Readable stream for the package that will be used as an input for any signing operation.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningOptions.OutputPackageStream">
            <summary>
            Readable and writeable stream for the output package for any signing operation.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningOptions.Overwrite">
            <summary>
            Switch used to indicate if an existing signature should be overwritten.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningOptions.SignatureProvider">
            <summary>
            Provider to create a Signature that can be added to the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningOptions.Logger">
            <summary>
            Logger to be used to display the logs during the execution of signing actions.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SigningOptions.#ctor(System.Lazy{System.IO.Stream},System.Lazy{System.IO.Stream},System.Boolean,NuGet.Packaging.Signing.ISignatureProvider,NuGet.Common.ILogger)">
            <summary>Instantiates a new <see cref="T:NuGet.Packaging.Signing.SigningOptions" /> object.</summary>
            <param name="inputPackageStream">A readable stream for the package that will be used as input for any
            signing operation.</param>
            <param name="outputPackageStream">A readable and writeable stream for the output package for any signing
            operation.</param>
            <param name="overwrite">A flag indicating if an existing signature should be overwritten.</param>
            <param name="signatureProvider">A provider to create a Signature that can be added to the package.</param>
            <param name="logger">A logger.</param>
            <remarks>Signing operations cannot be done in place; therefore, <paramref name="inputPackageStream" />
            and <paramref name="outputPackageStream" /> should be different streams.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="inputPackageStream" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="outputPackageStream" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="signatureProvider" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inputPackageStream" /> and
            <paramref name="outputPackageStream" /> are the same object.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.SigningOptions.CreateFromFilePaths(System.String,System.String,System.Boolean,NuGet.Packaging.Signing.ISignatureProvider,NuGet.Common.ILogger)">
            <summary>Creates a new <see cref="T:NuGet.Packaging.Signing.SigningOptions" /> object from file paths.</summary>
            <param name="inputPackageFilePath">The file path of the package that will be used as input for any
            signing operation.</param>
            <param name="outputPackageFilePath">The file path of the package that will be the output for any signing
            operation.</param>
            <param name="overwrite">A flag indicating if an existing signature should be overwritten.</param>
            <param name="signatureProvider">A provider to create a Signature that can be added to the package.</param>
            <param name="logger">A logger.</param>
            <remarks>Signing operations cannot be done in place; therefore, <paramref name="inputPackageFilePath" />
            and <paramref name="outputPackageFilePath" /> should be different file paths.</remarks>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inputPackageFilePath" /> is <c>null</c>,
            an empty string, or equivalent to <paramref name="outputPackageFilePath" />.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="inputPackageFilePath" /> is <c>null</c>,
            an empty string, or equivalent to <paramref name="outputPackageFilePath" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="signatureProvider" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" /> is <c>null</c>.</exception>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignPackageRequest">
            <summary>
            Contains a request for generating package signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.SignatureHashAlgorithm">
            <summary>
            Hash algorithm used to create the package signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.TimestampHashAlgorithm">
            <summary>
            Hash algorithm used to timestamp the signed package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.Certificate">
            <summary>
            Certificate used to sign the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.AdditionalCertificates">
            <summary>
            Gets a collection of additional certificates for building a chain for the signing certificate.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.SignatureType">
            <summary>
            Gets the signature type.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignPackageRequest.PrivateKey">
            <summary>
            PrivateKey is only used in mssign command.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignPackageRequest.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.X509SignatureProvider">
            <summary>
            Sign a manifest hash with an X509Certificate2.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.X509SignatureProvider.CreatePrimarySignatureAsync(NuGet.Packaging.Signing.SignPackageRequest,NuGet.Packaging.Signing.SignatureContent,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Sign the package stream hash with an X509Certificate2.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.X509SignatureProvider.CreateRepositoryCountersignatureAsync(NuGet.Packaging.Signing.RepositorySignPackageRequest,NuGet.Packaging.Signing.PrimarySignature,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Countersign the primary signature with a X509Certificate2.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.IX509ChainBuildPolicy">
            <summary>
            Represents a wrapper around <see cref="M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> to enable
            custom behaviors (e.g.:  retry on failure).
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileReader.ReadSection">
            <summary>
            Read a section of key value pairs from the file.
            Throw for invalid formats.
            </summary>
            <remarks>Returns an empty set if the file has reached the end.</remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileUtility.GetValueOrThrow(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Throw if the expected value does not exist.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileWriter.WritePair(System.String,System.String)">
            <summary>
            Write key:value with EOL to the manifest stream.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileWriter.WriteSectionBreak">
            <summary>
            Write an empty line.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileWriter.WriteEOL">
            <summary>
            Write an end of line to the manifest writer.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.KeyPairFileWriter.FormatItem(System.String,System.String)">
            <summary>
            key:value
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignatureContent">
            <summary>
            SignedCms.ContentInfo.Content for the primary signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureContent.HashAlgorithm">
            <summary>
            Hashing algorithm used.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureContent.HashValue">
            <summary>
            Base64 package stream hash.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureContent.Save(System.IO.Stream)">
            <summary>
            Write the content to a stream.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureContent.GetBytes">
            <summary>
            Write the content to byte array.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureContent.Load(System.Byte[],NuGet.Packaging.Signing.SigningSpecifications)">
            <summary>
            Load from a byte array.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureContent.Load(System.IO.Stream,NuGet.Packaging.Signing.SigningSpecifications)">
            <summary>
            Load content from a stream.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.DerEncoding.DerEncoder">
            <summary>
            Writes data encoded via the Distinguished Encoding Rules for Abstract
            Syntax Notation 1 (ASN.1) data.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeBoolean(System.Boolean)">
            <summary>
            Encode the segments { tag, length, value } of a boolean.
            </summary>
            <param name="value">The boolean to encode</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeUnsignedInteger(System.UInt32)">
            <summary>
            Encode the segments { tag, length, value } of an unsigned integer.
            </summary>
            <param name="value">The value to encode.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeUnsignedInteger(System.Byte[])">
            <summary>
            Encode the segments { tag, length, value } of an unsigned integer.
            </summary>
            <param name="bigEndianBytes">The value to encode, in big integer representation.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeUnsignedInteger(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encode the segments { tag, length, value } of an unsigned integer represented within a bounded array.
            </summary>
            <param name="bigEndianBytes">The value to encode, in big integer representation.</param>
            <param name="offset">The offset into bigEndianBytes to read</param>
            <param name="count">The count of bytes to read, must be greater than 0</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeBitString(System.Byte[][][])">
            <summary>
            Encode the segments { tag, length, value } of a BIT STRING which is wrapped over
            other DER-encoded data.
            </summary>
            <param name="childSegments"></param>
            <remarks>
            Despite containing other DER-encoded data this does not get the constructed bit,
            because it doesn't when encoding public keys in SubjectPublicKeyInfo</remarks>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeBitString(System.Byte[])">
            <summary>
            Encode the segments { tag, length, value } of a bit string where all bits are significant.
            </summary>
            <param name="data">The data to encode</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeBitString(System.Int32,System.Byte[])">
            <summary>
            Encode the segments { tag, length, value } of a bit string where the least significant
            <paramref name="unusedBits" /> of the last byte are padding.
            </summary>
            <param name="unusedBits">The number of padding bits (0-7) in the last byte</param>
            <param name="data">The data to encode</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeNamedBitList(System.Byte[],System.Int32)">
            <summary>
            Encode the segments { tag, length, value } of a bit string value based upon a NamedBitList.
            ((<paramref name="bigEndianBytes" />[0] &gt;&gt; 7) &amp; 1) is considered the "leading" bit, proceeding
            through the array for up to <paramref name="namedBitsCount" />.
            </summary>
            <param name="bigEndianBytes">
            The data in big endian order, the most significant bit of byte 0 is the leading bit
            (corresponds to the named value for "bit 0"). Any bits beyond <paramref name="namedBitsCount" />
            are ignored, and any missing bits are assumed to be unset.
            </param>
            <param name="namedBitsCount">
            The total number of named bits.  Since the bits are numbered with a zero index, this should be
            one higher than the largest defined bit. (namedBitsCount=10 covers bits 0-9)
            </param>
            <returns>
            A triplet of { tag }, { length }, { data }.  All trailing unset named bits are removed.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeOctetString(System.Byte[])">
            <summary>
            Encode the segments { tag, length, value } of an octet string (byte array).
            </summary>
            <param name="data">The data to encode</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.EncodeOid(System.String)">
            <summary>
            Encode an object identifier (Oid).
            </summary>
            <returns>The encoded OID</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeOid(System.Security.Cryptography.Oid)">
            <summary>
            Encode the segments { tag, length, value } of an object identifier (Oid).
            </summary>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeOid(System.String)">
            <summary>
            Encode the segments { tag, length, value } of an object identifier (Oid).
            </summary>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeUtf8String(System.Char[])">
            <summary>
            Encode a character string as a UTF8String value.
            </summary>
            <param name="chars">The characters to be encoded.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeUtf8String(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encode a substring as a UTF8String value.
            </summary>
            <param name="chars">The characters whose substring is to be encoded.</param>
            <param name="offset">The character offset into <paramref name="chars" /> at which to start.</param>
            <param name="count">The total number of characters from <paramref name="chars" /> to read.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSegmentedSequence(System.Byte[][][])">
            <summary>
            Make a constructed SEQUENCE of the byte-triplets of the contents, but leave
            the value in a segmented form (to be included in a larger SEQUENCE).
            </summary>
            <param name="items">Series of Tag-Length-Value triplets to build into one sequence.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSegmentedContextSpecificValue(System.Int32,System.Byte[][][])">
            <summary>
            Make a context-specific tagged value which is constructed of other DER encoded values.
            Logically the same as a SEQUENCE, but providing context as to data interpretation (and usually
            indicates an optional element adjacent to another SEQUENCE).
            </summary>
            <param name="contextId">The value's context ID</param>
            <param name="items">Series of Tag-Length-Value triplets to build into one sequence.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSegmentedSet(System.Byte[][][])">
            <summary>
            Make a constructed SET of the byte-triplets of the contents, but leave
            the value in a segmented form (to be included in a larger SEQUENCE).
            </summary>
            <param name="items">Series of Tag-Length-Value triplets to build into one set.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSegmentedPresortedSet(System.Byte[][][])">
             <summary>
             Make a constructed SET of the byte-triplets of the contents, but leave
             the value in a segmented form (to be included in a larger SEQUENCE).
            
             This method assumes that the data is presorted, and writes it as-is.
             </summary>
             <param name="items">Series of Tag-Length-Value triplets to build into one set.</param>
             <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.IsValidPrintableString(System.Char[])">
            <summary>
            Test to see if the input characters contains only characters permitted by the ASN.1
            PrintableString restricted character set.
            </summary>
            <param name="chars">The characters to test.</param>
            <returns>
            <c>true</c> if all of the characters in <paramref name="chars" /> are valid PrintableString characters,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.IsValidPrintableString(System.Char[],System.Int32,System.Int32)">
            <summary>
            Test to see if the input substring contains only characters permitted by the ASN.1
            PrintableString restricted character set.
            </summary>
            <param name="chars">The character string to test.</param>
            <param name="offset">The starting character position within <paramref name="chars" />.</param>
            <param name="count">The number of characters from <paramref name="chars" /> to read.</param>
            <returns>
            <c>true</c> if all of the indexed characters in <paramref name="chars" /> are valid PrintableString
            characters, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodePrintableString(System.Char[])">
            <summary>
            Encode a character string as a PrintableString value.
            </summary>
            <param name="chars">The characters to be encoded.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodePrintableString(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encode a substring as a PrintableString value.
            </summary>
            <param name="chars">The character string whose substring is to be encoded.</param>
            <param name="offset">The character offset into <paramref name="chars" /> at which to start.</param>
            <param name="count">The total number of characters from <paramref name="chars" /> to read.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeIA5String(System.Char[])">
            <summary>
            Encode a string of characters as a IA5String value.
            </summary>
            <param name="chars">The characters to be encoded.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.SegmentedEncodeIA5String(System.Char[],System.Int32,System.Int32)">
            <summary>
            Encode a substring as a IA5String value.
            </summary>
            <param name="chars">The characters whose substring is to be encoded.</param>
            <param name="offset">The character offset into <paramref name="chars" /> at which to start.</param>
            <param name="count">The total number of characters from <paramref name="chars" /> to read.</param>
            <returns>The encoded segments { tag, length, value }</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSequence(System.Byte[][][])">
            <summary>
            Make a constructed SEQUENCE of the byte-triplets of the contents.
            Each byte[][] should be a byte[][3] of {tag (1 byte), length (1-5 bytes), payload (variable)}.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerEncoder.ConstructSequence(System.Collections.Generic.IEnumerable{System.Byte[][]})">
            <summary>
            Make a constructed SEQUENCE of the byte-triplets of the contents.
            Each byte[][] should be a byte[][3] of {tag (1 byte), length (1-5 bytes), payload (variable)}.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.DerEncoding.DerGeneralizedTime">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.DerEncoding.DerSequenceReader">
            <summary>
            Reads data encoded via the Distinguished Encoding Rules for Abstract
            Syntax Notation 1 (ASN.1) data.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.DerEncoding.DerSequenceReader.ReadNextEncodedValue">
            <summary>
            Returns the next value encoded (this includes tag and length)
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.DerEncoding.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.DerEncoding.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.DerEncoding.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.DerEncoding.SR.Argument_InvalidOidValue">
            <summary>
              Looks up a localized string similar to The OID value was invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.DerEncoding.SR.Cryptography_Der_Invalid_Encoding">
            <summary>
              Looks up a localized string similar to ASN1 corrupted data..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.DerEncoding.SR.Cryptography_Invalid_IA5String">
            <summary>
              Looks up a localized string similar to The string contains a character not in the 7 bit ASCII character set..
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.ISignedPackage">
            <summary>
            A package that can read and write signatures.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.ISignedPackageReader">
            <summary>
            A readonly package that can provide signatures and a sign manifest from a package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.GetPrimarySignatureAsync(System.Threading.CancellationToken)">
            <summary>
            Get package signature.
            </summary>
            <remarks>Returns a null if the package is unsigned.</remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.IsSignedAsync(System.Threading.CancellationToken)">
            <summary>
            Check if a package contains signing information.
            </summary>
            <returns>True if the package is signed.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.GetArchiveHashAsync(NuGet.Common.HashAlgorithmName,System.Threading.CancellationToken)">
            <summary>
            Gets the hash of an archive to be embedded in the package signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.ValidateIntegrityAsync(NuGet.Packaging.Signing.SignatureContent,System.Threading.CancellationToken)">
            <summary>
            Checks for the integrity of a package
            </summary>
            <param name="signatureContent">SignatureContent with expected hash value and hash algorithm used</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.GetContentHash(System.Threading.CancellationToken,System.Func{System.String})">
            <summary>
            Get the hash of the package content excluding signature context for signed package.
            If the package is not signed it calculates it from the whole package.
            </summary>
            <param name="token">Cancellation token.</param>
            <param name="GetUnsignedPackageHash">Function to return the hash in case the package is not signed.</param>
            <remarks>The method takes an optional function to get the hash of an unsigned package instead of calculating it.</remarks>
            <returns>hash of the unsigned content of the package.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageReader.CanVerifySignedPackages(NuGet.Packaging.Signing.SignedPackageVerifierSettings)">
            <summary>
            Indicates if the the ISignedPackageReader instance can verify signed packages.
            </summary>
            <param name="verifierSettings">Package verification settings. Include information about what is allowed.</param>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">if the ISignedPackageReader does not support signed packages</exception>
        </member>
        <member name="T:NuGet.Packaging.Signing.ISignedPackageWriter">
            <summary>
            A writer that only allows editing for the package signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageWriter.RemoveSignatureAsync(System.Threading.CancellationToken)">
            <summary>
            Removes a signature if it exists.
            </summary>
            <param name="token">CancellationToken</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageWriter.AddSignatureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Adds a signature in the package.
            Throws exception if the package is already signed.
            </summary>
            <param name="packageSignatureProvider">A stream of the signature to be added to the package.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignedPackageWriter.IsZip64Async(System.Threading.CancellationToken)">
            <summary>
            Check if a package is Zip64.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether the package is signed.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="token" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignedPackageArchive">
            <summary>
            A nupkg that supports both reading and writing signatures.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignedPackageArchive._zipWriteStream">
            <summary>
            Stream underlying the ZipArchive. Used to do signature verification on a SignedPackageArchive.
            If this is null then we cannot perform signature verification.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchive.AddSignatureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Adds a signature to a package if it is not already signed.
            </summary>
            <param name="signatureStream">Stream of the signature SignedCms object to be added to the package.</param>
            <param name="token">Cancellation Token.</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageArchive.RemoveSignatureAsync(System.Threading.CancellationToken)">
            <summary>
            Remove a signature from the package, if it exists.
            </summary>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureException.Results">
            <summary>
            Individual trust results.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignatureLog">
            <summary>
            Log message for signature verification.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureLog.AsRestoreLogMessage">
            <summary>
            Converts an SignatureLog into a Restore
            This is needed when an SignatureLog needs to be logged and loggers do not have visibility to SignatureLog.
            </summary>
            <returns>RestoreLogMessage equivalent to the SignatureLog.</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.AlgorithmIdentifier">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.CommitmentTypeIndication">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.CommitmentTypeQualifier">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.EssCertId">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.EssCertIdV2">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.GeneralName">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.IssuerSerial">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.NuGetPackageOwners">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.NuGetV3ServiceIndexUrl">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.PolicyInformation">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.PolicyQualifierInfo">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="P:NuGet.Packaging.Signing.PrimarySignature.SignedCms">
            <summary>
            A SignedCms object holding the signature and SignerInfo.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.PrimarySignature.SignatureContent">
            <summary>
            Signature content.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.PrimarySignature.Save(System.IO.Stream)">
            <summary>
            Save the signed cms signature to a stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NuGet.Packaging.Signing.PrimarySignature.GetBytes">
            <summary>
            Retrieve the bytes of the signed cms signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.PrimarySignature.Load(System.Security.Cryptography.Pkcs.SignedCms)">
            <summary>
            Create a signature based on a valid signed cms
            </summary>
            <param name="cms">signature data</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.PrimarySignature.Load(System.Byte[])">
            <summary>
            Create a signature based on a valid byte array to be decoded as a signed cms
            </summary>
            <param name="data">signature data</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.PrimarySignature.Load(System.IO.Stream)">
            <summary>
            Create a signature based on a valid byte stream to be decoded as a signed cms
            </summary>
            <param name="stream">signature data</param>
        </member>
        <member name="T:NuGet.Packaging.Signing.Signature">
            <summary>
            Package signature information.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Signature.Type">
            <summary>
            Indicates if this is an author or repository signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Signature.Timestamps">
            <summary>
            Signature timestamps.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Signature.SignerInfo">
            <summary>
            SignerInfo for this signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Signature.TryGetValidTimestamp(NuGet.Packaging.Signing.SignedPackageVerifierSettings,NuGet.Common.HashAlgorithmName,System.Collections.Generic.List{NuGet.Packaging.Signing.SignatureLog},NuGet.Packaging.Signing.SignatureVerificationStatusFlags@,NuGet.Packaging.Signing.Timestamp@)">
            <summary>
            Get a valid timestamp from the unsigned attributes if present
            </summary>
            <param name="settings">Specify what is allowed in the validation for timestamp</param>
            <param name="fingerprintAlgorithm">fingerprint algorithm for displaying timestamp's certificate information</param>
            <param name="issues">List of log messages.</param>
            <param name="verificationFlags">Flags that specify the status of the verification</param>
            <param name="validTimestamp">TTimestamp found in the signature that passes validation with the given <see cref="!:settings" /></param>
            <remarks>If <see cref="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowNoTimestamp" /> is set to true this method return true with a <see cref="!:validTimestamp" /> set to null.</remarks>
            <returns>true if a valid timestamp was found</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.Signature.Verify(NuGet.Packaging.Signing.Timestamp,NuGet.Packaging.Signing.SignatureVerifySettings,NuGet.Common.HashAlgorithmName,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Verify if the signature object meets the specification trust and validity requirements.
            </summary>
            <param name="timestamp">Timestamp for this signature, if signature is not timestamped it can be null.</param>
            <param name="allowUntrusted">Setting that tells if a signature that does not meet any soft failure requirements can still be allowed. Used to know if warnings or errors should be logged for an issue.</param>
            <param name="allowUnknownRevocation">Setting that tells if unkown revocation is valid when building the chain.</param>
            <param name="allowUntrustedSelfSignedCertificate">Setting that tells if an untrusted self-signed certificate should be allowed as the signing certificate.</param>
            <param name="fingerprintAlgorithm">Algorithm used to calculate and display the certificate's fingerprint.</param>
            <param name="certificateExtraStore">Collection of certificates to help the chain building engine as an extra store.</param>
            <param name="issues">List of log messages.</param>
            <remarks>This is only public for ease of testing</remarks>
            <returns>Status of trust for signature.</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignaturePlacement">
            <summary>
            Indicates signature placement.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignaturePlacement.PrimarySignature">
            <summary>
            The primary signature.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignaturePlacement.Countersignature">
            <summary>
            A countersignature on the primary signature.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignaturePlacement.Any">
            <summary>
            A primary signature or a countersignature.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignatureType">
            <summary>
            Indicates author or repository signing.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureType.Unknown">
            <summary>
            Default unknown value.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureType.Author">
            <summary>
            Signed by the author.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureType.Repository">
            <summary>
            Signed by the repository.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignatureVerifySettings">
            <summary>
            Settings to customize Signature.Verify behavior.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.AllowIllegal">
            <summary>
            Allow packages with signatures that do not conform to the specification.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.AllowUntrusted">
            <summary>
            Specifies that a signing certificate's chain that chains to an untrusted root is allowed
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.AllowUnknownRevocation">
            <summary>
            Specifies that a signing certificate's chain with unknown revocation is allowed.
            If set to true, offline revocation is allowed.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.ReportUnknownRevocation">
            <summary>
            Indicates if unknown revocation status should be reported.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.ReportUntrustedRoot">
            <summary>
            Indicates if a signing certificate that chains to an untrusted root should be reported.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.RevocationMode">
            <summary>
            Gets how the revocation verification should be performed.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerifySettings.Default">
            <summary>
            Get default settings values for relaxed verification on a signature
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SigningCertificate">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.SigningCertificateV2">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.SigningSpecifications">
            <summary>
            Abstract class representing which paths may be used for signing in a package.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SigningSpecifications.V1">
            <summary>
            v1.0.0 signing settings.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.Version">
            <summary>
            Gets the signature format version.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.SignaturePath">
            <summary>
            Returns the path for the signature file.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.AllowedHashAlgorithms">
            <summary>
            Returns the set of allowed hash algorithms.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.AllowedHashAlgorithmOids">
            <summary>
            Returns the set of allowed hash algorithm Oids.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.AllowedSignatureAlgorithms">
            <summary>
            Returns the set of allowed signature algorithms.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.AllowedSignatureAlgorithmOids">
            <summary>
            Returns the set of allowed signature algorithm Oids.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.RSAPublicKeyMinLength">
            <summary>
            Returns minumum length required for RSA public keys.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecifications.Encoding">
            <summary>
            Encoding used to generate the signature.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SigningSpecifications.#ctor">
            <summary>
            Initialize a signing specification with a root folder.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SigningSpecificationsV1._allowedHashAlgorithms">
            <summary>
            Allowed digest algorithms for signature and timestamp hashing.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SigningSpecificationsV1._allowedHashAlgorithmOids">
            <summary>
            Allowed digest algorithm Oids for signature and timestamp hashing.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SigningSpecificationsV1._allowedSignatureAlgorithms">
            <summary>
            Allowed signature algorithms.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SigningSpecificationsV1._allowedSignatureAlgorithmOids">
            <summary>
            Allowed signature algorithm Oids.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SigningSpecificationsV1.Version">
            <summary>
            Gets the signature format version.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Accuracy">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.Extension">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.Extensions">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.IRfc3161TimestampRequest.GetNonce">
            <summary>
            Gets the nonce for this timestamp request.
            </summary>
            <returns>The nonce for this timestamp request as byte[], if one was present; otherwise, null</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.MessageImprint">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.Rfc3161TimestampProvider">
            <summary>
            A provider for RFC 3161 timestamps
            https://tools.ietf.org/html/rfc3161
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Rfc3161TimestampProvider.TimestampSignatureAsync(NuGet.Packaging.Signing.PrimarySignature,NuGet.Packaging.Signing.TimestampRequest,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Timestamps data present in the TimestampRequest.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Rfc3161TimestampProvider.GetTimestampAsync(NuGet.Packaging.Signing.TimestampRequest,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Timestamps data present in the TimestampRequest.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Rfc3161TimestampProvider.GetNameOrOidString(System.Security.Cryptography.Oid)">
            <summary>
            Returns the FriendlyName of an Oid. If FriendlyName is null, then the Oid string is returned.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Rfc3161TimestampProvider.EnsureValidNonce(System.Byte[])">
            <summary>
            Non-private for testing purposes only.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Rfc3161TimestampTokenInfo">
            <summary>
            Represents an RFC3161 TSTInfo.
            This class should be removed once we can reference it throught the .NET Core framework.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Rfc3161TimestampUtils">
            <summary>
            Internally used by Rfc3161TimestampProvider.
            This class should be removed once we can reference it throught the .NET Core framework.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Rfc3161TimestampVerificationUtility">
            <summary>
            Provides convinience method for verification of a RFC 3161 Timestamp.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.Rfc3161TimestampWin32">
            <summary>
            Internally used by Rfc3161TimestampProvider.
            This class should be removed once we can reference it throught the .NET Core framework.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.UpperLimit">
            <summary>
            Upper limit of Timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.LowerLimit">
            <summary>
            Lower limit of Timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.GeneralizedTime">
            <summary>
            Time timestamp was created by the Time Stamp Authority.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.SignedCms">
            <summary>
            A SignedCms object holding the timestamp and SignerInfo.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.SignerInfo">
            <summary>
            SignerInfo for this timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.Timestamp.TstInfo">
            <summary>
            Timestamp token info for this timestamp.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Timestamp.#ctor">
            <summary>
            Default constructor. Limits are set to current time.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.Timestamp.#ctor(System.Security.Cryptography.Pkcs.SignedCms)">
            <summary>
            SignedCms containing a time stamp authority token reponse
            </summary>
            <param name="timestampCms">SignedCms from Time Stamp Authority</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.Timestamp.Verify(NuGet.Packaging.Signing.Signature,NuGet.Packaging.Signing.SignedPackageVerifierSettings,NuGet.Common.HashAlgorithmName,System.Collections.Generic.List{NuGet.Packaging.Signing.SignatureLog})">
            <summary>
            Verify if the timestamp object meets the specification requirements.
            </summary>
            <param name="signature">Signature which this timestamp is for.</param>
            <param name="allowIgnoreTimestamp">Setting that tells if a timestamp can be ignored if it doesn't meet the requirements. Used to know if warnings or errors should be logged for an issue.</param>
            <param name="allowUnknownRevocation">Setting that tells if unkown revocation is valid when building the chain.</param>
            <param name="issues">List of log messages.</param>
            <returns>true if the timestamp meets the requierements, false otherwise.</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.TimestampException">
            <summary>
            Exceptions that are generated while creating a package timestamp.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.TimestampRequest">
            <summary>
            Request for timestamping a signature
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.TimestampRequest.SigningSpecifications">
            <summary>
            Signing Specification for this timestamp request.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.TimestampRequest.HashedMessage">
            <summary>
            Gets the hashed message to be timestamped.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.TimestampRequest.HashAlgorithm">
            <summary>
            Gets the hash algorithm used to generate <see cref="P:NuGet.Packaging.Signing.TimestampRequest.HashedMessage" />.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.TimestampRequest.Target">
            <summary>
            Gets the target signature for the timestamp
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.TstInfo">
            <remarks>This is public only to facilitate testing.</remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.ITrustedSignersProvider.GetTrustedSigners">
            <summary>
            Get a list of all the trusted signer entries under the computer trusted signers section.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ITrustedSignersProvider.AddOrUpdateTrustedSigner(NuGet.Configuration.TrustedSignerItem)">
            <summary>
            Adds a new trusted signer or updates an existing one in the settings.
            </summary>
            <param name="trustedSigners">Trusted signers to be added or updated</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.ITrustedSignersProvider.Remove(System.Collections.Generic.IReadOnlyList{NuGet.Configuration.TrustedSignerItem})">
            <summary>
            Removes trusted signers from the settings.
            </summary>
            <param name="trustedSigners">Trusted signers to be removed</param>
        </member>
        <member name="T:NuGet.Packaging.Signing.X509TrustStore">
            <summary>
            Represents the X.509 trust store that package signing and signed package verification will use.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.X509TrustStore.InitializeForDotNetSdk(NuGet.Common.ILogger)">
            <summary>
            Initializes the X.509 trust store for NuGet .NET SDK scenarios and logs details about the attempt.
            If initialization has already happened, a call to this method will have no effect.
            </summary>
            <param name="logger">A logger.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" /> is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.CreateCommitmentTypeIndication(NuGet.Packaging.Signing.SignatureType)">
            <summary>
            Create a CommitmentTypeIndication attribute.
            https://tools.ietf.org/html/rfc5126.html#section-5.11.1
            </summary>
            <param name="type">The signature type.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetSignatureType(System.Security.Cryptography.CryptographicAttributeObjectCollection)">
            <summary>
            Gets the signature type from one or more commitment-type-indication attributes.
            </summary>
            <param name="signedAttributes">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> signed attributes collection.</param>
            <remarks>Unknown OIDs are ignored.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="signedAttributes" /> is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if one or more attributes are invalid.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.CreateNuGetV3ServiceIndexUrl(System.Uri)">
            <summary>
            Creates a nuget-v3-service-index-url attribute.
            </summary>
            <param name="v3ServiceIndexUrl">The V3 service index HTTPS URL.</param>
            <returns>An attribute object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="v3ServiceIndexUrl" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="v3ServiceIndexUrl" /> is neither absolute
            nor HTTPS.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetNuGetV3ServiceIndexUrl(System.Security.Cryptography.CryptographicAttributeObjectCollection)">
            <summary>
            Gets the V3 service index HTTPS URL from the nuget-v3-service-index-url attribute.
            </summary>
            <param name="signedAttributes">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> signed attributes collection.</param>
            <returns>The V3 service index HTTPS URL.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="signedAttributes" />
            is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if either exactly one attribute is not present or if
            the attribute does not contain exactly one attribute value.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.CreateNuGetPackageOwners(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Creates a nuget-package-owners attribute.
            </summary>
            <param name="packageOwners">A read-only list of package owners.</param>
            <returns>An attribute object.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="packageOwners" /> is either <c>null</c>
            or empty or if any package owner name is invalid.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetNuGetPackageOwners(System.Security.Cryptography.CryptographicAttributeObjectCollection)">
            <summary>
            Gets a read-only list of package owners from an optional nuget-package-owners attribute.
            </summary>
            <param name="signedAttributes">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> signed attributes collection.</param>
            <returns>A read-only list of package owners or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="signedAttributes" /> is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if the attribute does not contain exactly one
            attribute value.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetSignatureType(System.String)">
            <summary>
            Oid -&gt; SignatureType
            </summary>
            <param name="oid">The commitment-type-indication value.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetSignatureTypeOid(NuGet.Packaging.Signing.SignatureType)">
            <summary>
            SignatureType -&gt; Oid
            </summary>
            <param name="signatureType">The signature type.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.CreateSigningCertificateV2(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName)">
            <summary>
            Create a signing-certificate-v2 from a certificate.
            </summary>
            <param name="certificate">The signing certificate.</param>
            <param name="hashAlgorithm">The hash algorithm for the signing-certificate-v2 attribute.</param>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetAttributeOrDefault(System.Security.Cryptography.CryptographicAttributeObjectCollection,System.String)">
            <summary>
            Returns the first attribute if the Oid is found.
            Returns null if the attribute is not found.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.ThrowInvalidAttributeException(System.Security.Cryptography.CryptographicAttributeObject)">
            <summary>
            Throw a signature exception due to an invalid attribute. This is used for unusual situations
            where the format is corrupt.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.ToList(System.Security.Cryptography.AsnEncodedDataCollection)">
            <summary>
            Enumerate AsnEncodedDataCollection
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetCommitmentTypeIndicationRawValues(System.Security.Cryptography.CryptographicAttributeObject)">
            <summary>
            Attribute -&gt; SignatureType values with no validation.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetAttribute(System.Security.Cryptography.CryptographicAttributeObjectCollection,System.String)">
            <summary>
            Gets 0 or 1 attribute with the specified OID.  If more than one attribute is found, an exception is thrown.
            </summary>
            <param name="attributes">A collection of attributes.</param>
            <param name="oid">The attribute OID to search for.</param>
            <returns>Either a <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> or <c>null</c>, if no attribute was found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributes" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="oid" /> is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Thrown if multiple attribute instances with the specified OID were found.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.AttributeUtility.GetAttributes(System.Security.Cryptography.CryptographicAttributeObjectCollection,System.String)">
            <summary>
            Gets 0 or 1 or many attributes with the specified OID.
            </summary>
            <param name="attributes">A collection of attributes.</param>
            <param name="oid">The attribute OID to search for.</param>
            <returns>Either a <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> or <c>null</c>, if no attribute was found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="attributes" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="oid" /> is either <c>null</c> or an empty string.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateChainUtility.GetCertificateChain(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,NuGet.Common.ILogger,NuGet.Packaging.Signing.CertificateType)">
            <summary>
            Create a list of certificates in chain order with the leaf first and root last.
            </summary>
            <param name="certificate">The certificate for which a chain should be built.</param>
            <param name="extraStore">A certificate store containing additional certificates necessary
            for chain building.</param>
            <param name="logger">A logger.</param>
            <param name="certificateType">The certificate type.</param>
            <returns>A certificate chain.</returns>
            <remarks>This is intended to be used only during signing and timestamping operations,
            not verification.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="certificate" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="extraStore" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="certificateType" /> is undefined.</exception>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateChainUtility.GetCertificateChain(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create an ordered list of certificates. The leaf node is returned first.
            </summary>
            <param name="x509Chain">Certificate chain to be converted to list.</param>
            <remarks>This does not check validity or trust. It returns the chain as-is.</remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.X509Certificate2ToString(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName)">
            <summary>
            Converts a X509Certificate2 to a human friendly string of the following format -
            Subject Name: CN=name
            SHA1 hash: hash
            Issued by: CN=issuer
            Valid from: issue date time to expiry date time in local time
            </summary>
            <param name="cert">X509Certificate2 to be converted to string.</param>
            <param name="fingerprintAlgorithm">Algorithm used to calculate certificate fingerprint</param>
            <returns>string representation of the X509Certificate2.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.X509Certificate2ToLogMessages(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName,System.String)">
            <summary>
            Converts a X509Certificate2 to a collection of log messages for various verbosity levels -
            Subject Name: CN=name
            SHA1 hash: hash
            Issued by: CN=issuer
            Valid from: issue date time to expiry date time in local time
            </summary>
            <param name="cert">X509Certificate2 to be converted to string.</param>
            <param name="fingerprintAlgorithm">Algorithm used to calculate certificate fingerprint</param>
            <returns>string representation of the X509Certificate2.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.X509Certificate2CollectionToString(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,NuGet.Common.HashAlgorithmName)">
             <summary>
             Converts a X509Certificate2Collection to a human friendly string of the following format -
             Subject Name: CN=name
             SHA1 hash: hash
             Issued by: CN=issuer
             Valid from: issue date time to expiry date time in local time
            
             Subject Name: CN=name
             SHA1 hash: hash
             Issued by: CN=issuer
             Valid from: issue date time to expiry date time in local time
            
             ... N more.
             </summary>
             <param name="certCollection">X509Certificate2Collection to be converted to string.</param>
             <param name="fingerprintAlgorithm">Algorithm used to calculate certificate fingerprint</param>
             <returns>string representation of the X509Certificate2Collection.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.IsSignatureAlgorithmSupported(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Determines if a certificate's signature algorithm is supported.
            </summary>
            <param name="certificate">Certificate to validate</param>
            <returns>True if the certificate's signature algorithm is supported.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.IsCertificatePublicKeyValid(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Validates the public key requirements for a certificate
            </summary>
            <param name="certificate">Certificate to validate</param>
            <returns>True if the certificate's public key is valid within NuGet signature requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.HasLifetimeSigningEku(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Validates if the certificate contains the lifetime signing EKU
            </summary>
            <param name="certificate">Certificate to validate</param>
            <returns>True if the certificate has the lifetime signing EKU</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.HasExtendedKeyUsage(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Checks if an X509Certificate2 contains a particular Extended Key Usage (EKU).
            </summary>
            <param name="certificate">X509Certificate2 to be checked.</param>
            <param name="ekuOid">String OID of the Extended Key Usage</param>
            <returns>A bool indicating if the X509Certificate2 contains specified OID in its Extended Key Usage.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.IsValidForPurposeFast(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Checks if an X509Certificate2 is valid for a particular purpose.
            </summary>
            <remarks>
            This must not be used in evaluation of a signed package.
            A more accurate test is building a chain with the specified EKU asserted in the application policy.
            </remarks>
            <param name="certificate">X509Certificate2 to be checked.</param>
            <param name="ekuOid">String OID of the Extended Key Usage</param>
            <returns>A bool indicating if the X509Certificate2 contains specified OID string in its Extended Key Usage.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.GetHash(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName)">
            <summary>
            Gets the certificate fingerprint with the given hashing algorithm
            </summary>
            <param name="certificate">X509Certificate2 to be compute fingerprint</param>
            <param name="hashAlgorithm">Hash algorithm for fingerprint</param>
            <returns>A byte array representing the certificate hash.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.GetHashString(System.Security.Cryptography.X509Certificates.X509Certificate2,NuGet.Common.HashAlgorithmName)">
            <summary>
            Gets the certificate fingerprint string with the given hashing algorithm
            </summary>
            <param name="certificate">X509Certificate2 to be compute fingerprint</param>
            <param name="hashAlgorithm">Hash algorithm for fingerprint</param>
            <returns>A string representing the certificate hash.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.CertificateUtility.IsSelfIssued(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Determines if a certificate is self-issued.
            </summary>
            <remarks>Warning:  this method does not evaluate certificate trust, revocation status, or validity!
            This method attempts to build a chain for the provided certificate, and although revocation status
            checking is explicitly skipped, the underlying chain building engine may go online to fetch
            additional information (e.g.:  the issuer's certificate).  This method is not a guaranteed offline
            check.</remarks>
            <param name="certificate">The certificate to check.</param>
            <returns><c>true</c> if the certificate is self-issued; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="certificate" /> is <c>null</c>.</exception>
        </member>
        <member name="T:NuGet.Packaging.Signing.IX509CertificateChain">
            <summary>
            Represents a certificate chain ordered from end certificate (index 0) to root certificate.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.RepositorySignatureInfoUtility.GetSignedPackageVerifierSettings(NuGet.Packaging.RepositorySignatureInfo,NuGet.Packaging.Signing.SignedPackageVerifierSettings)">
            <summary>
            Gets SignedPackageVerifierSettings from a given RepositorySignatureInfo.
            </summary>
            <param name="repoSignatureInfo">RepositorySignatureInfo to be used.</param>
            <param name="fallbackSettings">SignedPackageVerifierSettings to be used if RepositorySignatureInfo is unavailable.</param>
            <returns>SignedPackageVerifierSettings based on the RepositorySignatureInfo and SignedPackageVerifierSettings.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureUtility.GetCertificateChain(NuGet.Packaging.Signing.PrimarySignature)">
            <summary>
            Gets certificates in the certificate chain for the primary signature.
            </summary>
            <param name="primarySignature">The primary signature.</param>
            <returns>A non-empty, read-only list of X.509 certificates ordered from signing certificate to root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="primarySignature" /> is <c>null</c>.</exception>
            <remarks>
            WARNING:  This method does not perform revocation, trust, or certificate validity checking.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureUtility.GetCertificateChain(NuGet.Packaging.Signing.PrimarySignature,NuGet.Packaging.Signing.RepositoryCountersignature)">
            <summary>
            Gets certificates in the certificate chain for the repository countersignature.
            </summary>
            <param name="primarySignature">The primary signature.</param>
            <param name="repositoryCountersignature">The repository countersignature.</param>
            <returns>A non-empty, read-only list of X.509 certificates ordered from signing certificate to root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="primarySignature" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryCountersignature" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="repositoryCountersignature" /> is
            unrelated to <paramref name="primarySignature" />.</exception>
            <remarks>
            WARNING:  This method does not perform revocation, trust, or certificate validity checking.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureUtility.GetTimestampCertificateChain(NuGet.Packaging.Signing.PrimarySignature)">
            <summary>
            Gets certificates in the certificate chain for a timestamp on the primary signature.
            </summary>
            <param name="primarySignature">The primary signature.</param>
            <returns>A non-empty, read-only list of X.509 certificates ordered from signing certificate to root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="primarySignature" /> is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if <paramref name="primarySignature" /> does not have a valid
            timestamp.</exception>
            <remarks>
            WARNING:  This method does not perform revocation, trust, or certificate validity checking.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignatureUtility.GetTimestampCertificateChain(NuGet.Packaging.Signing.PrimarySignature,NuGet.Packaging.Signing.RepositoryCountersignature)">
            <summary>
            Gets certificates in the certificate chain for a timestamp on the repository countersignature.
            </summary>
            <param name="primarySignature">The primary signature.</param>
            <param name="repositoryCountersignature">The repository countersignature.</param>
            <returns>A non-empty, read-only list of X.509 certificates ordered from signing certificate to root.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="primarySignature" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="repositoryCountersignature" /> is <c>null</c>.</exception>
            <exception cref="T:NuGet.Packaging.Signing.SignatureException">Thrown if <paramref name="repositoryCountersignature" /> does not have a valid
            timestamp.</exception>
            <remarks>
            WARNING:  This method does not perform revocation, trust, or certificate validity checking.
            </remarks>
        </member>
        <member name="T:NuGet.Packaging.Signing.SigningUtility">
            <summary>
            Utility methods for signing.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SigningUtility.SignAsync(NuGet.Packaging.Signing.SigningOptions,NuGet.Packaging.Signing.SignPackageRequest,System.Threading.CancellationToken)">
            <summary>
            Add a signature to a package.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.X509ChainHolder">
            <summary>
            Creates and performs cleanup on an <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> instance.
            </summary>
            <remarks>
            Certificates held by individual X509ChainElement objects should be disposed immediately after use to minimize
            finalizer impact.
            </remarks>
        </member>
        <member name="P:NuGet.Packaging.Signing.ClientPolicyContext.Policy">
            <summary>
            Current policy the client is on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.ClientPolicyContext.VerifierSettings">
            <summary>
            Verification settings corresponding the current client policy.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.ClientPolicyContext.AllowList">
            <summary>
            List of signatures allowed in verification.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.IPackageSignatureVerifier">
            <summary>
            Loads trust providers and verifies package signatures.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.IPackageSignatureVerifier.VerifySignaturesAsync(NuGet.Packaging.Signing.ISignedPackageReader,NuGet.Packaging.Signing.SignedPackageVerifierSettings,System.Threading.CancellationToken,System.Guid)">
            <summary>
            Verifies package signature.
            </summary>
            <param name="package">Package to be verified.</param>
            <param name="settings">SignedPackageVerifierSettings to be used when verifying the package.</param>
            <param name="token">Cancellation Token.</param>
            <param name="telemetryOperationId">Guid of the parent event.</param>
            <returns>VerifySignaturesResult containing the result of the verify operation.</returns>
        </member>
        <member name="T:NuGet.Packaging.Signing.ISignatureVerificationProvider">
            <summary>
            Providers signature trust information.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.ISignatureVerificationProvider.GetTrustResultAsync(NuGet.Packaging.Signing.ISignedPackageReader,NuGet.Packaging.Signing.PrimarySignature,NuGet.Packaging.Signing.SignedPackageVerifierSettings,System.Threading.CancellationToken)">
            <summary>
            Check if <paramref name="signature" /> is trusted by the provider.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.PackageSignatureVerifier.IsValid(System.Collections.Generic.IEnumerable{NuGet.Packaging.Signing.PackageVerificationResult})">
            <summary>
            True if a provider trusts the package signature.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.PackageVerificationResult">
            <summary>
            Represents a signature check result and any additional information
            needed to display to the user.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.PackageVerificationResult.Trust">
            <summary>
            Trust result
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.PackageVerificationResult.Issues">
            <summary>
            List of issues found in the verification process
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.PackageVerificationResult.#ctor(NuGet.Packaging.Signing.SignatureVerificationStatus,System.Collections.Generic.IEnumerable{NuGet.Packaging.Signing.SignatureLog})">
            <summary>
            PackageVerificationResult
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationBehavior.Never">
            <summary>
            Do not verify a signature.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationBehavior.IfExists">
            <summary>
            Verify a signature if and only if it exists.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationBehavior.IfExistsAndIsNecessary">
            <summary>
            Verify a signature if and only if it exists and is necessary
            (e.g.:  trust evaluation of another signature depends on it).
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationBehavior.Always">
            <summary>
            Verify a signature always.  If the signature is not present, it is an error.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignatureVerificationStatus">
            <summary>
            Represents the trust result of a signature.
            </summary>
            <remarks>The order of the elements on this enum is important.
            It should be ordered from most severe to valid.
            When a verification with multiple steps wants to be strict it should take the min
            out of each step as the status for the whole verification.</remarks>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatus.Unknown">
            <summary>
            Default unknown value.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatus.Suspect">
            <summary>
            Invalid package signature.
            </summary>
            <remarks>This could happen because the package integrity check fails or the certificate is revoked.</remarks>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatus.Disallowed">
            <summary>
            The signature is disallowed based on verification settings.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatus.Valid">
            <summary>
            Signature is valid for the verification step.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.NoErrors">
            <summary>
            There was no error found
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.NoSignature">
            <summary>
            A signature was not found
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.NoCertificate">
            <summary>
            Signer certificate was not found
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.MultipleSignatures">
            <summary>
            Multiple signatures were found
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.SignatureCheckFailed">
            <summary>
            A call to SignedCms.CheckSignature failed
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.SignatureAlgorithmUnsupported">
            <summary>
            Signature algorithm is not supported
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.CertificatePublicKeyInvalid">
            <summary>
            Public key does not conform with the requirements of the spec
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.HasLifetimeSigningEku">
            <summary>
            Signing certificate has lifetimeSigningEku
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.CertificateValidityInTheFuture">
            <summary>
            Signer certificate's validity is in the future
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.CertificateExpired">
            <summary>
            Signing certificate has expired
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.HashAlgorithmUnsupported">
            <summary>
            Hashing algorithm is not supported
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.MessageImprintUnsupportedAlgorithm">
            <summary>
            Message imprint uses a hash algorithm that is not supported
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.IntegrityCheckFailed">
            <summary>
            Integrity check of the signature failed
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.ChainBuildingFailure">
            <summary>
            Chain building failures.
            Some specific chain building failures (like revocation, revocation status unavailable, certificate expired, etc.)
            are not covered by this flag because they are covered specially by another status flag.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.UnknownRevocation">
            <summary>
            Revocation information was unavailable or was offline for the signer certificate
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.CertificateRevoked">
            <summary>
            Signing certificate was revoked
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.UntrustedRoot">
            <summary>
            Signing certificate chains to a certificate untrusted by the computer performing the verification
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.GeneralizedTimeOutsideValidity">
            <summary>
            The Timestamp's generalized time was outside certificate's validity period
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.NoValidTimestamp">
            <summary>
            A valid timestamp was not found.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.MultipleTimestamps">
            <summary>
            Multiple timestamps were found.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.Suspect">
            <summary>
            Flags which indicate that the signed package is suspect.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.Illegal">
            <summary>
            Flags which indicate that the signed package is illegal.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.SignatureVerificationStatusFlags.Untrusted">
            <summary>
            Flags which indicate that the signed package is untrusted.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerificationSummary.SignatureType">
            <summary>
            Type of the signature that was verified
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerificationSummary.Status">
            <summary>
            Status of the verification
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerificationSummary.Flags">
            <summary>
            Reasons for the status.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerificationSummary.Timestamp">
            <summary>
            Timestamp used to validate certificate.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignatureVerificationSummary.ExpirationTime">
            <summary>
            Expiration Date and Time for signature
            </summary>
            <remarks>This field will only be set if the certificate is expired.</remarks>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerificationResult.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.SignedPackageVerifierSettings">
            <summary>
            Feed settings used to verify packages.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowUnsigned">
            <summary>
            Allow packages that do not contain signatures.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowIllegal">
            <summary>
            Allow packages with signatures that do not conform to the specification.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowUntrusted">
            <summary>
            Allow packages that have not been explicitly trusted by the consumer.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowIgnoreTimestamp">
            <summary>
            Allow ignoring timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowMultipleTimestamps">
            <summary>
            Allow more than one timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowNoTimestamp">
            <summary>
            Allow no timestamp.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.AllowUnknownRevocation">
            <summary>
            Treat unknown revocation status as a warning instead of an error during verification.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.ReportUnknownRevocation">
            <summary>
            Report unknown revocation status.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.VerificationTarget">
            <summary>
            Gets the verification target(s).
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.SignaturePlacement">
            <summary>
            Gets the placement of verification target(s).
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.RepositoryCountersignatureVerificationBehavior">
            <summary>
            Gets the repository countersignature verification behavior.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.SignedPackageVerifierSettings.RevocationMode">
            <summary>
            Gets how the revocation verification should be performed.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageVerifierSettings.GetDefault(NuGet.Common.IEnvironmentVariableReader)">
            <summary>
            Default settings.
            </summary>
            <param name="environmentVariableReader">An <see cref="T:NuGet.Common.IEnvironmentVariableReader" /> instance or <c>null</c> for the default environment variable reader.</param>
            <returns>A <see cref="T:NuGet.Packaging.Signing.SignedPackageVerifierSettings" /> instance.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageVerifierSettings.GetAcceptModeDefaultPolicy(NuGet.Common.IEnvironmentVariableReader)">
            <summary>
            The accept mode policy.
            </summary>
            <param name="environmentVariableReader">An <see cref="T:NuGet.Common.IEnvironmentVariableReader" /> instance or <c>null</c> for the default environment variable reader.</param>
            <returns>A <see cref="T:NuGet.Packaging.Signing.SignedPackageVerifierSettings" /> instance.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageVerifierSettings.GetRequireModeDefaultPolicy(NuGet.Common.IEnvironmentVariableReader)">
            <summary>
            The require mode policy.
            </summary>
            <param name="environmentVariableReader">An <see cref="T:NuGet.Common.IEnvironmentVariableReader" /> instance or <c>null</c> for the default environment variable reader.</param>
            <returns>A <see cref="T:NuGet.Packaging.Signing.SignedPackageVerifierSettings" /> instance.</returns>
        </member>
        <member name="M:NuGet.Packaging.Signing.SignedPackageVerifierSettings.GetVerifyCommandDefaultPolicy(NuGet.Common.IEnvironmentVariableReader)">
            <summary>
            Default policy for nuget.exe verify --signatures command.
            </summary>
            <param name="environmentVariableReader">An <see cref="T:NuGet.Common.IEnvironmentVariableReader" /> instance or <c>null</c> for the default environment variable reader.</param>
            <returns>A <see cref="T:NuGet.Packaging.Signing.SignedPackageVerifierSettings" /> instance.</returns>
        </member>
        <member name="P:NuGet.Packaging.Signing.TrustedSignerAllowListEntry.Owners">
            <summary>
            List of allowed owners for a repository signature
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.TrustedSignerAllowListEntry.AllowUntrustedRoot">
            <summary>
            Describe if the certificate should be allowed to chain to an untrusted certificate
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.VerificationAllowListEntry.Target">
            <summary>
            Target type of signature to verify.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.VerificationAllowListEntry.Placement">
            <summary>
            Signature placement to verify.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.VerificationTarget">
            <summary>
            Indicates the type of signature a verification is targeting
            </summary>
            <remarks>This target makes no assumption about the placement of the signature.
            It only refers to author or repository type of signature.
            If a specific placement is needed use the <see cref="T:NuGet.Packaging.Signing.SignaturePlacement" /> enum.</remarks>
        </member>
        <member name="F:NuGet.Packaging.Signing.VerificationTarget.None">
            <summary>
            Don't target any signatures.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.VerificationTarget.Unknown">
            <summary>
            Target unknown primary signatures.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.VerificationTarget.Author">
            <summary>
            Target author signatures
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.VerificationTarget.Repository">
            <summary>
            Target repository signatures
            </summary>
        </member>
        <member name="F:NuGet.Packaging.Signing.VerificationTarget.All">
            <summary>
            Target all available signatures.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Signing.VerifySignaturesResult">
            <summary>
            Collection of signature verification results.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.VerifySignaturesResult.IsValid">
            <summary>
            True if signature is valid.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.VerifySignaturesResult.IsSigned">
            <summary>
            True if the package is signed.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Signing.VerifySignaturesResult.Results">
            <summary>
            Individual trust results.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.RepositorySignatureInfoProvider">
            <summary>
            RepositorySignatureInfoProvdier is a static cache for repository signature information for package source.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.RepositorySignatureInfoProvider.TryGetRepositorySignatureInfo(System.String,NuGet.Packaging.RepositorySignatureInfo@)">
            <summary>
            Try to get repository signature information for the source.
            </summary>
            <param name="source">Package source URL.</param>
            <param name="repositorySignatureInfo">Contains the RepositorySignatureInfo when the method returns. It is null if repository signature information is unavailable.</param>
            <returns>True if the repository signature information was found. Otherwise, False.</returns>
        </member>
        <member name="M:NuGet.Packaging.RepositorySignatureInfoProvider.AddOrUpdateRepositorySignatureInfo(System.String,NuGet.Packaging.RepositorySignatureInfo)">
            <summary>
            Add or update the repository signature information for the source.
            </summary>
            <param name="source">Package source URL.</param>
            <param name="repositorySignatureInfo">RepositorySignatureInfo for the source url.</param>
        </member>
        <member name="T:NuGet.Packaging.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.AnAbsoluteUriIsRequired">
            <summary>
              Looks up a localized string similar to An absolute URI is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument cannot be null or empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.AuthorPrimarySignatureFriendlyName">
            <summary>
              Looks up a localized string similar to author primary signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertificateChainBuildFailed">
            <summary>
              Looks up a localized string similar to A complete certificate chain could not be built for the signing certificate..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertificateChainValidationFailed">
            <summary>
              Looks up a localized string similar to Certificate chain validation failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityCertificateHash">
            <summary>
              Looks up a localized string similar to {0} hash: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityCertificateHashSha1">
            <summary>
              Looks up a localized string similar to SHA1 hash: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityCertificateIssuer">
            <summary>
              Looks up a localized string similar to Issued by: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityCertificateSubjectName">
            <summary>
              Looks up a localized string similar to Subject Name: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityCertificateValidity">
            <summary>
              Looks up a localized string similar to Valid from: {0} to {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityMultipleCertificatesFooter">
            <summary>
              Looks up a localized string similar to ... {0} more..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CertUtilityMultipleCertificatesHeader">
            <summary>
              Looks up a localized string similar to The following certificates meet all given criteria:.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ChainBuilding_UsingDefaultTrustStore">
            <summary>
              Looks up a localized string similar to X.509 certificate chain validation will use the default trust store selected by .NET..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ChainBuilding_UsingFallbackCertificateBundle">
            <summary>
              Looks up a localized string similar to X.509 certificate chain validation will use the fallback certificate bundle at '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ChainBuilding_UsingNoCertificateBundle">
            <summary>
              Looks up a localized string similar to X.509 certificate chain validation will not have any trusted roots. Chain building will fail with an untrusted status..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ChainBuilding_UsingSystemCertificateBundle">
            <summary>
              Looks up a localized string similar to X.509 certificate chain validation will use the system certificate bundle at '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CommitmentTypeIndicationAttributeInvalid">
            <summary>
              Looks up a localized string similar to The commitment-type-indication attribute is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.CommitmentTypeIndicationAttributeInvalidCombination">
            <summary>
              Looks up a localized string similar to The commitment-type-indication attribute contains an invalid combination of values..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ConflictingAllowUntrustedRoot">
            <summary>
              Looks up a localized string similar to There are two certificates with conflicting allowUntrustedRoot attributes in the computed settings. The allowUntrustedRoot attribute is going to be set to false. Certificate: {0}-{1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.DefaultError_EmptyAllowList">
            <summary>
              Looks up a localized string similar to A list of trusted signers is required but none was found..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.DefaultError_NoMatchInAllowList">
            <summary>
              Looks up a localized string similar to The package signature certificate fingerprint does not match any certificate fingerprint in the allow list..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_InvalidTargetFramework">
            <summary>
              Looks up a localized string similar to Unsupported targetFramework value '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_LoadingHashFile">
            <summary>
              Looks up a localized string similar to Error parsing nupkg metadata file {0} : {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_MissingNuspecFile">
            <summary>
              Looks up a localized string similar to The package is missing the required nuspec file. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NoClientAllowList">
            <summary>
              Looks up a localized string similar to signatureValidationMode is set to require, so packages are allowed only if signed by trusted signers; however, no trusted signers were specified..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NoMatchingClientCertificate">
            <summary>
              Looks up a localized string similar to This package is signed but not by a trusted signer..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NoMatchingRepositoryCertificate">
            <summary>
              Looks up a localized string similar to This package was not repository signed with a certificate listed by this repository..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NoRepoAllowList">
            <summary>
              Looks up a localized string similar to This repository indicated that all its packages are repository signed; however, it listed no signing certificates..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NotOnePrimarySignature">
            <summary>
              Looks up a localized string similar to The package signature file does not contain exactly one primary signature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_NotOneRepositoryCounterSignature">
            <summary>
              Looks up a localized string similar to The package signature contains multiple repository countersignatures..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_RepositorySettings_UnsignedPackage">
            <summary>
              Looks up a localized string similar to This repository indicated that all its packages are repository signed; however, this package is unsigned..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_RepositorySignatureMustNotHaveARepositoryCountersignature">
            <summary>
              Looks up a localized string similar to A repository primary signature must not have a repository countersignature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_RequireMode_UnsignedPackage">
            <summary>
              Looks up a localized string similar to signatureValidationMode is set to require, so packages are allowed only if signed by trusted signers; however, this package is unsigned..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorAuthorTargetCannotBeACountersignature">
            <summary>
              Looks up a localized string similar to Cannot target author signatures that are countersignatures..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorByteSignatureNotFound">
            <summary>
              Looks up a localized string similar to Byte signature not found in package archive:  0x{0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorDuplicatePackages">
            <summary>
              Looks up a localized string similar to There are duplicate packages: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidAllowedVersions">
            <summary>
              Looks up a localized string similar to Invalid allowedVersions for package id '{0}': '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidCertificateChainUnspecifiedReason">
            <summary>
              Looks up a localized string similar to Certificate chain validation failed for an unspecified reason..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidMinClientVersion">
            <summary>
              Looks up a localized string similar to Invalid minClientVersion: '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageArchive">
            <summary>
              Looks up a localized string similar to Invalid package archive..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersion">
            <summary>
              Looks up a localized string similar to Invalid package version for package id '{0}': '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersionForDependency">
            <summary>
              Looks up a localized string similar to Invalid package version for a dependency with id '{0}' in package '{1}': '{2}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorManifestFileNotFound">
            <summary>
              Looks up a localized string similar to Manifest file not found at '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorMultipleTimestamps">
            <summary>
              Looks up a localized string similar to Multiple timestamps are not accepted..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorNoTimestamp">
            <summary>
              Looks up a localized string similar to The signature should be timestamped to enable long-term signature validity after the certificate has expired..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorNullOrEmptyPackageId">
            <summary>
              Looks up a localized string similar to Null or empty package id.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorPackageNotSigned">
            <summary>
              Looks up a localized string similar to The package is not signed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorPackageSignatureInvalid">
            <summary>
              Looks up a localized string similar to The package signature is invalid or cannot be verified on this platform..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnableCheckPackageEntries">
            <summary>
              Looks up a localized string similar to An unexpected error occurred while checking package entries..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnableToDeleteFile">
            <summary>
              Looks up a localized string similar to Unable to delete temporary file '{0}'. Error: '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnsafePackageEntry">
            <summary>
              Looks up a localized string similar to The package '{0}' contains an entry '{1}' which is unsafe for extraction..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorZip64NotSupported">
            <summary>
              Looks up a localized string similar to Signed Zip64 packages are not supported..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ExactlyOneAttributeRequired">
            <summary>
              Looks up a localized string similar to Exactly one {0} attribute is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ExactlyOneAttributeValueRequired">
            <summary>
              Looks up a localized string similar to The {0} attribute must have exactly one attribute value..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ExtractionLog_InformationPrefix">
            <summary>
              Looks up a localized string similar to Package '{0} {1}' from source '{2}': {3}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailedFileTime">
            <summary>
              Looks up a localized string similar to Failed to update file time for {0}: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToLoadPackagesConfig">
            <summary>
              Looks up a localized string similar to Fail to load packages.config as XML file. Please check it. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToWritePackagesConfig">
            <summary>
              Looks up a localized string similar to Failed to write packages.config as XML file '{0}'. Error: '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FallbackFolderNotFound">
            <summary>
              Looks up a localized string similar to Unable to find fallback package folder '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.HttpOrHttpsIsRequired">
            <summary>
              Looks up a localized string similar to HTTP or HTTPS is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidArgument">
            <summary>
              Looks up a localized string similar to The argument is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidArgumentCombination">
            <summary>
              Looks up a localized string similar to Invalid combination of arguments {0} and {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidAsn1">
            <summary>
              Looks up a localized string similar to The ASN.1 data is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidLicenseExppressionVersion_VersionTooHigh">
            <summary>
              Looks up a localized string similar to The version string '{0}' is not supported by this toolset. The highest supported version is '{1}'. Either use a lower version or upgrade your toolset..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecElement">
            <summary>
              Looks up a localized string similar to {0} This validation error occurred in a '{1}' element..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecEntry">
            <summary>
              Looks up a localized string similar to The nuspec contains an invalid entry '{0}' in package '{1}' ..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageFrameworkFolderName">
            <summary>
              Looks up a localized string similar to The framework in the folder name of '{0}' in package '{1}' could not be parsed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageNupkg">
            <summary>
              Looks up a localized string similar to The file is not a valid nupkg. File path: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageSignatureFile">
            <summary>
              Looks up a localized string similar to The package contains an invalid package signature file..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageSignatureFileEntry">
            <summary>
              Looks up a localized string similar to The package signature file entry is invalid. {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageSignatureFileEntryCentralDirectoryHeader">
            <summary>
              Looks up a localized string similar to The central directory header field '{0}' has an invalid value ({1})..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageSignatureFileEntryLocalFileHeader">
            <summary>
              Looks up a localized string similar to The local file header field '{0}' has an invalid value ({1})..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageTypeVersion">
            <summary>
              Looks up a localized string similar to Nuspec file contains a package type with an invalid package version '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPrimarySignature">
            <summary>
              Looks up a localized string similar to The primary signature is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidRepositoryCountersignature">
            <summary>
              Looks up a localized string similar to The repository countersignature is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidSignatureContent">
            <summary>
              Looks up a localized string similar to The package signature content is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidTimestampSignature">
            <summary>
              Looks up a localized string similar to The timestamp signature is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidUrl">
            <summary>
              Looks up a localized string similar to The URL value is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Log_InstalledPackage">
            <summary>
              Looks up a localized string similar to Installed {0} {1} from {2} with content hash {3}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Message_Path">
            <summary>
              Looks up a localized string similar to Path: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MinClientVersionAlreadyExist">
            <summary>
              Looks up a localized string similar to MinClientVersion already exists in packages.config.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingMetadataNode">
            <summary>
              Looks up a localized string similar to Nuspec file does not contain the '{0}' node..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingPackageTypeName">
            <summary>
              Looks up a localized string similar to Nuspec file contains a package type that is missing the name attribute..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingTargetPlatformVersionsFromDependencyGroups">
            <summary>
              Looks up a localized string similar to Some dependency group TFMs are missing a platform version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingTargetPlatformVersionsFromFrameworkAssemblyGroups">
            <summary>
              Looks up a localized string similar to Some reference assembly group TFMs are missing a platform version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingTargetPlatformVersionsFromFrameworkAssemblyReferences">
            <summary>
              Looks up a localized string similar to Some framework assembly reference TFMs are missing a platform version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingTargetPlatformVersionsFromIncludedFiles">
            <summary>
              Looks up a localized string similar to Some included files are included under TFMs which are missing a platform version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingTargetPlatformVersionsFromReferenceGroups">
            <summary>
              Looks up a localized string similar to Some reference group TFMs are missing a platform version: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultipleAttributesDisallowed">
            <summary>
              Looks up a localized string similar to Multiple {0} attributes are not allowed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultipleNuspecFiles">
            <summary>
              Looks up a localized string similar to Package contains multiple nuspec files..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultiplePackageSignatureFiles">
            <summary>
              Looks up a localized string similar to The package contains multiple package signature files..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MustContainAbsolutePath">
            <summary>
              Looks up a localized string similar to '{0}' must contain an absolute path '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NoPackageSignatureFile">
            <summary>
              Looks up a localized string similar to The package does not contain a valid package signature file..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NoRepositoryCountersignature">
            <summary>
              Looks up a localized string similar to Verification settings require a repository countersignature, but the package does not have a repository countersignature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicense_InvalidLicenseExpressionVersion">
            <summary>
              Looks up a localized string similar to The license version string '{0}'  is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicense_InvalidLicenseType">
            <summary>
              Looks up a localized string similar to Unrecognized license type '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicense_LicenseElementMissingValue">
            <summary>
              Looks up a localized string similar to The license element value is empty. This is likely due to an authoring error. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicense_LicenseExpressionVersionTooHigh">
            <summary>
              Looks up a localized string similar to The license version string '{0}' is higher than the one supported by this toolset '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicense_MissingRequiredValue">
            <summary>
              Looks up a localized string similar to The element 'license' cannot be empty. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_DeprecatedIdentifier">
            <summary>
              Looks up a localized string similar to The identifier '{0}' is deprecated..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_ExceptionIdentifierIsLicense">
            <summary>
              Looks up a localized string similar to The identifier '{0}' is a license. It cannot be used as an exception..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_IllegalUnlicensedOperator">
            <summary>
              Looks up a localized string similar to The 'UNLICENSED' license identifier cannot be combined with the '+' operator..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_InvalidCharacters">
            <summary>
              Looks up a localized string similar to The license expression '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_InvalidExceptionIdentifier">
            <summary>
              Looks up a localized string similar to The identifier '{0}' is not a standard exception..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_InvalidExpression">
            <summary>
              Looks up a localized string similar to The license expression is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_InvalidToken">
            <summary>
              Looks up a localized string similar to Invalid element '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_LicenseIdentifierIsException">
            <summary>
              Looks up a localized string similar to The identifier '{0}' is an exception. It cannot be used as a license..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_LicenseInvalidCharacters">
            <summary>
              Looks up a localized string similar to The license identifier '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_MismatchedParentheses">
            <summary>
              Looks up a localized string similar to Mismatched parentheses in the expression..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_NonStandardIdentifier">
            <summary>
              Looks up a localized string similar to The license identifier(s) '{0}' is(are) not recognized by the current toolset..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_UnexpectedIdentifier">
            <summary>
              Looks up a localized string similar to Unexpected license identifier '{0}'. The identifier is not allowed in this context..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetLicenseExpression_UnlicensedPackageWarning">
            <summary>
              Looks up a localized string similar to The owner has marked this package as 'UNLICENSED'. This means that there is no license that allows this package to be used outside of the copyright owner..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetPackageOwners">
            <summary>
              Looks up a localized string similar to Owners: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetPackageOwnersInvalid">
            <summary>
              Looks up a localized string similar to The nuget-package-owners attribute is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetPackageOwnersInvalidValue">
            <summary>
              Looks up a localized string similar to One or more package owner values are invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetV3ServiceIndexUrl">
            <summary>
              Looks up a localized string similar to Service index: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetV3ServiceIndexUrlInvalid">
            <summary>
              Looks up a localized string similar to The nuget-v3-service-index-url attribute is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.NuGetV3ServiceIndexUrlInvalidValue">
            <summary>
              Looks up a localized string similar to The nuget-v3-service-index-url attribute value is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryAlreadyExist">
            <summary>
              Looks up a localized string similar to Package entry already exists in packages.config. Id: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryNotExist">
            <summary>
              Looks up a localized string similar to Package entry does not exists in packages.config. Id: {0}, Version: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageMinVersionNotSatisfied">
            <summary>
              Looks up a localized string similar to The '{0}' package requires NuGet client version '{1}' or above, but the current NuGet version is '{2}'. To upgrade NuGet, please go to https://docs.nuget.org/consume/installing-nuget.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageSignatureVerificationLog">
            <summary>
              Looks up a localized string similar to PackageSignatureVerificationLog: PackageIdentity: {0} Source: {1} PackageSignatureValidity: {2}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackagesNodeNotExist">
            <summary>
              Looks up a localized string similar to Packages node does not exists in packages.config at {0}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageStreamShouldBeSeekable">
            <summary>
              Looks up a localized string similar to Package stream should be seekable.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PrimarySignatureFriendlyName">
            <summary>
              Looks up a localized string similar to primary signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PrimarySignatureHasNoTimestamp">
            <summary>
              Looks up a localized string similar to The primary signature does not have a timestamp..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PropertyCannotBeNull">
            <summary>
              Looks up a localized string similar to '{0}' cannot be null..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.RangeOutOfBoundsForArray">
            <summary>
              Looks up a localized string similar to Arguments {0} and {1} were out of bounds for the array..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.RepositoryCountersignatureFriendlyName">
            <summary>
              Looks up a localized string similar to repository countersignature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.RepositoryCountersignatureHasNoCertificate">
            <summary>
              Looks up a localized string similar to The repository countersignature does not have a signing certificate..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.RepositoryCountersignatureHasNoTimestamp">
            <summary>
              Looks up a localized string similar to The repository countersignature does not have a timestamp..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.RepositoryPrimarySignatureFriendlyName">
            <summary>
              Looks up a localized string similar to repository primary signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureContainsInvalidAttribute">
            <summary>
              Looks up a localized string similar to Package signature contains an invalid attribute: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureDebug_HashOidFound">
            <summary>
              Looks up a localized string similar to Signature hash OID found: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureFailureInvalidHashAlgorithmOid">
            <summary>
              Looks up a localized string similar to The package hash uses an unsupported hash algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureFriendlyName">
            <summary>
              Looks up a localized string similar to signature.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureHashAlgorithm">
            <summary>
              Looks up a localized string similar to Signature Hash Algorithm: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignaturePackageIntegrityFailure">
            <summary>
              Looks up a localized string similar to The package integrity check failed. The package has changed since it was signed. Try clearing the local http-cache and run nuget operation again..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignatureType">
            <summary>
              Looks up a localized string similar to Signature type: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageAlreadySigned">
            <summary>
              Looks up a localized string similar to The package already contains a signature. Please remove the existing signature before adding a new signature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageArchiveIOExtraRead">
            <summary>
              Looks up a localized string similar to Package stream read position cannot be longer than the length of the stream..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageArchiveIOInvalidRead">
            <summary>
              Looks up a localized string similar to Package stream read position cannot be before the current position in the stream..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageNotSignedOnRemove">
            <summary>
              Looks up a localized string similar to The package is not signed. Unable to remove signature from an unsigned package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageNotSignedOnVerify">
            <summary>
              Looks up a localized string similar to The package is not signed. Unable to verify signature from an unsigned package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackagePackageAlreadyCountersigned">
            <summary>
              Looks up a localized string similar to The package already contains a repository countersignature. Please remove the existing signature before adding a new repository countersignature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignedPackageUnableToAccessSignature">
            <summary>
              Looks up a localized string similar to The package was not opened correctly to perform signature operations. Please use a Stream-based constructor to have access to signature attributes of the package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampCertificateFailsPublicKeyLengthRequirement">
            <summary>
              Looks up a localized string similar to The timestamp certificate does not meet a minimum public key length requirement..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampGeneralizedTimeInvalid">
            <summary>
              Looks up a localized string similar to The timestamp's generalized time is outside the timestamping certificate's validity period..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampIntegrityCheckFailed">
            <summary>
              Looks up a localized string similar to The timestamp integrity check failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampNoCertificate">
            <summary>
              Looks up a localized string similar to The timestamp does not have a signing certificate..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampNotYetValid">
            <summary>
              Looks up a localized string similar to The timestamp signing certificate is not yet valid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignError_TimestampSignatureValidationFailed">
            <summary>
              Looks up a localized string similar to The timestamp signature validation failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SignFailureCertificateInvalidProviderType">
            <summary>
              Looks up a localized string similar to The following certificate cannot be used for package signing as the private key provider is unsupported:.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCannotBeDoneInPlace">
            <summary>
              Looks up a localized string similar to {0} and {1} should be different. Package signing cannot be done in place..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateAttributeMustNotBePresent">
            <summary>
              Looks up a localized string similar to The signing-certificate attribute is not allowed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateCertificateNotFound">
            <summary>
              Looks up a localized string similar to A certificate referenced by the signing-certificate attribute could not be found..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateInvalid">
            <summary>
              Looks up a localized string similar to The signing-certificate attribute is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateV1OrV2AttributeMustBePresent">
            <summary>
              Looks up a localized string similar to Either the signing-certificate or signing-certificate-v2 attribute must be present..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateV2CertificateNotFound">
            <summary>
              Looks up a localized string similar to A certificate referenced by the signing-certificate-v2 attribute could not be found..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateV2Invalid">
            <summary>
              Looks up a localized string similar to The signing-certificate-v2 attribute is invalid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningCertificateV2UnsupportedHashAlgorithm">
            <summary>
              Looks up a localized string similar to The signing-certificate-v2 attribute uses an unsupported hash algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningError_CertificateFailsPublicKeyLengthRequirement">
            <summary>
              Looks up a localized string similar to The signing certificate does not meet a minimum public key length requirement..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningError_CertificateHasLifetimeSigningEKU">
            <summary>
              Looks up a localized string similar to The lifetime signing EKU in the signing certificate is not supported..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningError_CertificateHasUnsupportedSignatureAlgorithm">
            <summary>
              Looks up a localized string similar to The signing certificate has an unsupported signature algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningError_NotYetValid">
            <summary>
              Looks up a localized string similar to The signing certificate is not yet valid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.SigningWouldRequireZip64">
            <summary>
              Looks up a localized string similar to The package cannot be signed as it would require the Zip64 format..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StreamMustBeReadable">
            <summary>
              Looks up a localized string similar to The stream must be readable..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StreamMustBeSeekable">
            <summary>
              Looks up a localized string similar to The stream must be seekable..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to String argument '{0}' cannot be null or empty.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampCertificateUnsupportedSignatureAlgorithm">
            <summary>
              Looks up a localized string similar to The timestamp certificate has an unsupported signature algorithm ({0}). The following algorithms are supported: {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampFailureInvalidHttpScheme">
            <summary>
              Looks up a localized string similar to The timestamper URL '{0}' has an invalid URI scheme. The supported schemes are '{1}' and '{2}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampFailureNonceMismatch">
            <summary>
              Looks up a localized string similar to The timestamp response is invalid.  Nonces did not match..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampServiceRespondedError">
            <summary>
              Looks up a localized string similar to The timestamp service responded with HTTP status code '{0}' ('{1}')..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampSignatureUnsupportedDigestAlgorithm">
            <summary>
              Looks up a localized string similar to The timestamp signature has an unsupported digest algorithm ({0}). The following algorithms are supported: {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.TimestampValue">
            <summary>
              Looks up a localized string similar to Timestamp: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToAddEntry">
            <summary>
              Looks up a localized string similar to An error occurred while updating packages.config. The file was closed before the entry could be added..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToParseClientVersion">
            <summary>
              Looks up a localized string similar to Unable to parse the current NuGet client version..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToReadPackageHashInformation">
            <summary>
              Looks up a localized string similar to Package hash information could not be read from the package signature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnexpectedPackageSignatureVerificationError">
            <summary>
              Looks up a localized string similar to An unexpected error occurred while verifying a package signature..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnrecognizedEnumValue">
            <summary>
              Looks up a localized string similar to The enum value '{0}' is unrecognized..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnrelatedSignatures">
            <summary>
              Looks up a localized string similar to The primary signature and repository countersignature are unrelated..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnsupportedAsn1">
            <summary>
              Looks up a localized string similar to The ASN.1 data is unsupported..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnsupportedSignatureFormatVersion">
            <summary>
              Looks up a localized string similar to The package signature format version is not supported. Updating your client may solve this problem..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerificationCertDisplay">
            <summary>
              Looks up a localized string similar to Verifying the {0} with certificate: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerificationTimestamperCertDisplay">
            <summary>
              Looks up a localized string similar to Verifying {0}'s timestamp with timestamping service certificate: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Verify_ErrorNoCertificate">
            <summary>
              Looks up a localized string similar to The {0} does not have a signing certificate..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyCertTrustOfflineWhileRevocationModeOffline">
            <summary>
              Looks up a localized string similar to The revocation function was unable to check revocation because the certificate is not available in the cached certificate revocation list and NUGET_CERT_REVOCATION_MODE environment variable has been set to offline. For more information, visit https://aka.ms/certificateRevocationMode..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyCertTrustOfflineWhileRevocationModeOnline">
            <summary>
              Looks up a localized string similar to The revocation function was unable to check revocation because the revocation server could not be reached. For more information, visit https://aka.ms/certificateRevocationMode..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyChainBuildingIssue">
            <summary>
              Looks up a localized string similar to The {0} found a chain building issue: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyChainBuildingIssue_UntrustedRoot">
            <summary>
              Looks up a localized string similar to The {0}'s signing certificate is not trusted by the trust provider..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_CertificateFailsPublicKeyLengthRequirement">
            <summary>
              Looks up a localized string similar to The {0}'s certificate does not meet a minimum public key length requirement..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_CertificateHasLifetimeSigningEKU">
            <summary>
              Looks up a localized string similar to The lifetime signing EKU in the {0}'s certificate is not supported..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_CertificateHasUnsupportedSignatureAlgorithm">
            <summary>
              Looks up a localized string similar to The {0}'s certificate has an unsupported signature algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_CertificateNotYetValid">
            <summary>
              Looks up a localized string similar to The {0}'s certificate is not yet valid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_InvalidCertificateChain">
            <summary>
              Looks up a localized string similar to The {0}'s certificate chain validation failed with error(s): {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_SignatureNotTimeValid">
            <summary>
              Looks up a localized string similar to The {0} validity period has expired..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_SignatureVerificationFailed">
            <summary>
              Looks up a localized string similar to The {0} validation failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampCertificateFailsPublicKeyLengthRequirement">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp certificate does not meet a minimum public key length requirement..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampGeneralizedTimeInvalid">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp's generalized time is outside the timestamping certificate's validity period..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampIntegrityCheckFailed">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp integrity check failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampInvalid">
            <summary>
              Looks up a localized string similar to The {0} contains an invalid timestamp..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampMessageImprintUnsupportedHashAlgorithm">
            <summary>
              Looks up a localized string similar to The {0} timestamp's message imprint uses an unsupported hash algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampNoCertificate">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp does not have a signing certificate..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampNotYetValid">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp signing certificate is not yet valid..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampSignatureUnsupportedDigestAlgorithm">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp signature has an unsupported digest algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampSignatureValidationFailed">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp signature validation failed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampUnsupportedSignatureAlgorithm">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp certificate has an unsupported signature algorithm..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyError_TimestampVerifyChainBuildingIssue">
            <summary>
              Looks up a localized string similar to The {0}'s timestamp found a chain building issue: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.VerifyTimestampChainBuildingIssue_UntrustedRoot">
            <summary>
              Looks up a localized string similar to The {0}'s timestamping certificate is not trusted by the trust provider..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ZipFileLastWriteTimeStampModifiedMessage">
            <summary>
              Looks up a localized string similar to '{0}' changed from '{1}' to '{2}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ZipFileTimeStampModifiedWarning">
            <summary>
              Looks up a localized string similar to The zip format supports a limited date range. The following files are outside the supported range:.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder``1(System.Collections.Generic.IEnumerable{``0},System.StringComparer,System.Func{``0,System.String},System.Func{``0,System.String[]})">
            <summary>
            Order dependencies by children first.
            </summary>
            <param name="items">Items to sort.</param>
            <param name="comparer">Comparer for Ids.</param>
            <param name="getId">Retrieve the id of the item.</param>
            <param name="getDependencies">Retrieve dependency ids.</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo})">
            <summary>
            Order dependencies by children first.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder(System.Collections.Generic.List{NuGet.Packaging.TopologicalSortUtility.ItemDependencyInfo},System.StringComparer)">
            <summary>
            Order dependencies by children first.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.VersionFolderPathResolver">
            <summary>
            A V3 path resolver.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.VersionFolderPathResolver.RootPath">
            <summary>
            Gets the packages directory root folder.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.VersionFolderPathResolver.IsLowerCase">
            <summary>
            Gets a flag indicating whether or not package ID's and versions are made lowercase.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.VersionFolderPathResolver" /> class.
            </summary>
            <param name="rootPath">The packages directory root folder.</param>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.VersionFolderPathResolver" /> class.
            </summary>
            <param name="rootPath">The packages directory root folder.</param>
            <param name="isLowercase"><c>true</c> if package ID's and versions are made lowercase;
            otherwise <c>false</c>.</param>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetInstallPath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package install path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package install path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetVersionListPath(System.String)">
            <summary>
            Gets the package version list path.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The package version list path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageFilePath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetManifestFilePath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the manifest file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The manifest file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetHashPath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the hash file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The hash file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetHashFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the hash file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The hash file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetNupkgMetadataPath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the new hash file path which represents the original hash of the package.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The hash file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetVersionListDirectory(System.String)">
            <summary>
            Gets the version list directory.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The version list directory.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageDirectory(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package directory.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package directory.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageDownloadMarkerFileName(System.String)">
            <summary>
            Gets the package download marker file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The package download marker file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetManifestFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the manifest file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The manifest file name.</returns>
        </member>
        <member name="T:NuGet.RuntimeModel.IObjectWriter">
            <summary>
            Provides functionality for writing an object graph.
            The output format is defined by implementors.
            </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteObjectStart">
             <summary>
             Writes the start of the root object or an object in an array.
            
             This new object becomes the scope for all other method calls until either WriteObjectStart
             is called again to start a new nested object or WriteObjectEnd is called.
            
             Every call to WriteObjectStart must be balanced by a corresponding call to WriteObjectEnd.
             </summary>
             <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteObjectStart(System.String)">
             <summary>
             Writes the start of a nested object.
            
             This new object becomes the scope for all other method calls until either WriteObjectStart
             is called again to start a new nested object or WriteObjectEnd is called.
            
             Every call to WriteObjectStart must be balanced by a corresponding call to WriteObjectEnd.
             </summary>
             <param name="name">The name of the object.</param>
             <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
             <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteObjectEnd">
             <summary>
             Writes the end of a nested object.
            
             The parent object for this object becomes the scope for subsequent method calls.
             If this object is the root object, no further writing is allowed.
            
             Every call to WriteObjectStart must be balanced by a corresponding call to WriteObjectEnd.
             </summary>
             <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.Int32)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.</param>
            <param name="value">The datum.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.Boolean)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.</param>
            <param name="value">The datum.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.String)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.</param>
            <param name="value">The datum.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameArray(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a name-collection pair.
            </summary>
            <param name="name">The name of the data.</param>
            <param name="values">The data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteArrayStart(System.String)">
            <summary>
            Writes the start of an array.
            The new object becomes the scope of all other methods until WriteArrayStart is called to start a new object in the array, or WriteArrayEnd is called.
            Every call to WriteArrayStart needs to be balanced with a corresponding call to WriteArrayEnd and not WriteObjectEnd.
            </summary>
            <param name="name">The array name</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteArrayEnd">
             <summary>
             Writes the end of an array.
            
             The parent object for this array becomes the scope for subsequent method calls.
             If this object is the root object, no further writing is allowed.
            
             Every call to WriteArrayStart needs to be balanced with a corresponding call to WriteArrayEnd and not WriteObjectEnd.
             </summary>
             <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="T:NuGet.RuntimeModel.JsonObjectWriter">
             <summary>
             Generates JSON from an object graph.
            
             This is non-private only to facilitate unit testing.
             </summary>
        </member>
        <member name="P:NuGet.RuntimeModel.RuntimeDependencySet.Id">
            <summary>
            Package Id
            </summary>
        </member>
        <member name="P:NuGet.RuntimeModel.RuntimeDependencySet.Dependencies">
            <summary>
            Package dependencies
            </summary>
        </member>
        <member name="P:NuGet.RuntimeModel.RuntimeDescription.RuntimeDependencySets">
            <summary>
            RID specific package dependencies.
            </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeDescription.Merge(NuGet.RuntimeModel.RuntimeDescription,NuGet.RuntimeModel.RuntimeDescription)">
            <summary>
            Merges the content of the other runtime description in to this runtime description
            </summary>
            <param name="other">The other description to merge in to this description</param>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.Merge(NuGet.RuntimeModel.RuntimeGraph,NuGet.RuntimeModel.RuntimeGraph)">
            <summary>
            Merges the content of the other runtime graph in to this runtime graph
            </summary>
            <param name="other">The other graph to merge in to this graph</param>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.ExpandRuntime(System.String)">
            <summary>
            Find all compatible RIDs including the current RID.
            </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.ExpandRuntimeInternal(System.String)">
            <summary>
            Expand runtimes in a BFS walk. This ensures that nearest RIDs are returned first.
            Ordering is important for finding the nearest runtime dependency.
            </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.AreCompatible(System.String,System.String)">
            <summary>
            Determines if two runtime identifiers are compatible, based on the import graph
            </summary>
            <param name="criteria">The criteria being tested</param>
            <param name="provided">The value the criteria is being tested against</param>
            <returns>
            true if an asset for the runtime in <paramref name="provided" /> can be installed in a project
            targetting <paramref name="criteria" />, false otherwise
            </returns>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.FindRuntimeDependenciesInternal(NuGet.RuntimeModel.RuntimeGraph.RuntimeDependencyKey)">
            <summary>
            Find all possible dependencies for package id.
            </summary>
        </member>
        <member name="T:NuGet.RuntimeModel.RuntimeGraph.Cache`1">
            <summary>
            Helper for renting hashsets and lists.
            </summary>
        </member>
        <member name="T:NuGet.RuntimeModel.RuntimeGraph.RuntimeDependencyKey">
            <summary>
            RID + package id
            </summary>
        </member>
        <member name="T:NuGet.RuntimeModel.RuntimeGraph.RuntimeCompatKey">
            <summary>
            RID -&gt; RID compatibility key
            </summary>
        </member>
        <member name="T:NuGet.RuntimeModel.RuntimePackageDependency">
            <summary>
            A package dependency for a specific RID.
            </summary>
        </member>
        <member name="P:NuGet.RuntimeModel.RuntimePackageDependency.Id">
            <summary>
            Dependency package id.
            </summary>
        </member>
        <member name="P:NuGet.RuntimeModel.RuntimePackageDependency.VersionRange">
            <summary>
            Dependency version constraint.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumerables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two collections for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two lists for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two collections for equality, allowing either collection to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two lists for equality, allowing either list to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.EqualsFalse(System.String)">
            <summary>
            Determines if the current string contains a value equal "false".  Leading and trailing whitespace are trimmed and the comparision is case-insensitive
            </summary>
            <param name="value">The string to compare.</param>
            <returns><c>true</c> if the current string is equal to a value of "false", otherwise <c>false&gt;</c>.</returns>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file.
            </summary>
            <param name="path">The complete file path to be read into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file. Optionally, whitespace can be preserved.
            </summary>
            <param name="path">The complete file path to be read into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a stream.
            </summary>
            <param name="input">The stream that contains the XML data.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified stream.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
            <summary>
            Creates a new System.Xml.Linq.XDocument from a stream. Optionally, whitespace can be preserved.
            </summary>
            <param name="input">The stream that contains the XML data.</param>
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified stream.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.GetEncodedXMLName(System.String)">
            <summary>
            Converts the name to a valid XML local name, if it is invalid.
            </summary>
            <param name="name">The name to be encoded.</param>
            <returns>The encoded name.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.GetXmlReaderSettings(System.Xml.Linq.LoadOptions)">
            <summary>
            Creates an instance of <see cref="T:System.Xml.XmlReaderSettings" /> with safe settings
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            </summary>
        </member>
        <member name="T:NuGet.StringBuilderPool">
            <summary>
            Provides a resource pool that enables reusing instances of <see cref="T:System.Text.StringBuilder" /> instances.
            </summary>
            <remarks>
            <para>
            Renting and returning buffers with an <see cref="T:NuGet.StringBuilderPool" /> can increase performance
            in situations where <see cref="T:System.Text.StringBuilder" /> instances are created and destroyed frequently,
            resulting in significant memory pressure on the garbage collector.
            </para>
            <para>
            This class is thread-safe.  All members may be used by multiple threads concurrently.
            </para>
            </remarks>
        </member>
        <member name="F:NuGet.StringBuilderPool.Shared">
            <summary>
            Retrieves a shared <see cref="T:NuGet.StringBuilderPool" /> instance.
            </summary>
        </member>
        <member name="M:NuGet.StringBuilderPool.Rent(System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Text.StringBuilder" /> that is at least the requested length.
            </summary>
            <param name="minimumCapacity">The minimum capacity of the <see cref="T:System.Text.StringBuilder" /> needed.</param>
            <returns>
            A <see cref="T:System.Text.StringBuilder" /> that is at least <paramref name="minimumCapacity" /> in length.
            </returns>
            <remarks>
            This buffer is loaned to the caller and should be returned to the same pool via
            <see cref="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)" /> so that it may be reused in subsequent usage of <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" />.
            It is not a fatal error to not return a rented string builder, but failure to do so may lead to
            decreased application performance, as the pool may need to create a new instance to replace
            the one lost.
            </remarks>
        </member>
        <member name="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)">
            <summary>
            Returns to the pool an array that was previously obtained via <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" /> on the same
            <see cref="T:NuGet.StringBuilderPool" /> instance.
            </summary>
            <param name="builder">
            The <see cref="T:System.Text.StringBuilder" /> previously obtained from <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" /> to return to the pool.
            </param>
            <remarks>
            Once a <see cref="T:System.Text.StringBuilder" /> has been returned to the pool, the caller gives up all ownership
            of the instance and must not use it. The reference returned from a given call to <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" />
            must only be returned via <see cref="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)" /> once.  The default <see cref="T:NuGet.StringBuilderPool" />
            may hold onto the returned instance in order to rent it again, or it may release the returned instance
            if it's determined that the pool already has enough instances stored.
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>TeB+Ew02eG13D/vTGPp0owo2hDKXdvlSHN/XIKzlYC8=</DigestValue></Reference></SignedInfo><SignatureValue>ZEQqLIj0zitR8DKtgns68KEq73OESB+QtVmWKVo+51Nj2yF9dDw3L4aJwPnnqejW66gR0e9//3NkPoLIvY93lqRqkWDHNx84GsmNYwVOHQ4yl4domXrEm6WG5hzCl+w2qKXi0eIlLWT5tR9SqTEnuU0fJx7uCSZQOdSMmRMAbfo3OPYVOOfhD6djSiymV4AdYHVSN1JNoZs5B4CpqRB7NBfU6b8Rf607Vsq5X4dt8fDdWEav2olW5viwM3QoWCPy0kF2EjTiW1n7xT7RQfqXNHu9D770oolVRPzX4alb4sXnd241p0yH0GWVPWxuHF0m9V9hFhkXjo4CDJXa97XoVA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>ok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF/zCCA+egAwIBAgITMwAAAsyOtZamvdHJTgAAAAACzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIyMDUxMjIwNDYwMVoXDTIzMDUxMTIwNDYwMVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4QIDAQABo4IBfjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFIi4R40ylsyKlSKfrDNqzhx9da30MFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMwMDEyKzQ3MDUyOTAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAHgPA7DgB0udzEyB2LvG216zuskLUQ+iX8jFnl2i7tzXPDw5xXNXn2KvxdzBsf2osDW3LCdjFOwSjVkz+SUFQQNhjSHkd5knF6pzrL9V6lz72XiEg1Vi2gUM3HiLXSMIKOgdd78ZZJEmDLwdA692MO/1vVOFpOSv0QzpyBr5iqiotwMMsZVdZqXn8u9vRSmlk+3nQXdyOPoZXTGPLHXwz41kbSc4zI12bONTlDsLR3HD2s44wuyp3c72R8f9FVi/J9DU/+NOL37Z1yonzGZEuKdrAd6CvupAnLMlrIEv93mBsNRXuDDp4p9UYYK1taxzzgyUxgFDpluMHN0Oiiq9s73u7DA2XvbX8paJz8IZPe9a1/KhsOi5Kxhb99SCXiUnv2lGxnVAz5G6wAW1bzxJYKI+Xj90RKseY3X5EMO7TnVpIZ9Iw1IdrkHp/QLY90ZCch7kdBlLCVTFhSXZCDv4BcM6DhpRzbJsb6QDVfOv9aoG9aGV3a1EacyaedzLA2gWP6cTnCdAr4OrlrN5EFoCpOWgc77F/eQc3SLR06VTLVT1uKuNVxL2xZlD9Z+qC+a3TXa0zI/x1zEZNSgpLGsdVcaN6r/td3ArGQGkDWiAL7eS75LIWZA2SD//9B56uzZ1nmEd8+KBYsPTdp922/W2kFrlj7MBtA6vWE/ZG/grOKiC</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
