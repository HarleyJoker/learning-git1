<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceHub.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs">
            <summary>
            Describes changes to brokered service availability as raised by the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.#ctor(System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs" /> class
            with an exhaustive set of impacted services.
            </summary>
            <param name="impactedServices">The set of services that are impacted by the change.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.#ctor(System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs" /> class.
            </summary>
            <param name="impactedServices">The set of services that are impacted by the change.</param>
            <param name="otherServicesImpacted">A value indicating whether other services not included in <see cref="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices" /> may also be impacted.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices">
            <summary>
            Gets the set of services that are impacted by the change.
            </summary>
            <remarks>
            Services in this set may have been added, removed, or proffered by a different <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            such that a service's implementation or location has changed.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.OtherServicesImpacted">
            <summary>
            Gets a value indicating whether other services not included in <see cref="P:Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs.ImpactedServices" />
            may also be impacted.
            </summary>
            <remarks>
            This may be true when an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> is proffered, changed, or removed without exhaustively enumerating the services it may offer.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter">
            <summary>
            Converts between <see cref="T:System.Globalization.CultureInfo" /> and a string representation which is its <see cref="P:System.Globalization.CultureInfo.Name" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.CultureInfoJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.DisposableBag">
            <summary>
            A thread-safe collection of disposable objects.
            </summary>
            <remarks>
            The objects are guaranteed to be disposed exactly once when or after this collection is disposed.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.DisposableBag.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposableBag.Dispose">
            <summary>
            Disposes of all contained links and signals the cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposableBag.AddDisposable(System.IDisposable)">
            <summary>
            Arranges to dispose of a value when this <see cref="T:Microsoft.ServiceHub.Framework.DisposableBag" /> is disposed of, or immediately if the bag is already disposed.
            </summary>
            <param name="disposable">The value to dispose.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.DisposeAction">
            <summary>
            Invokes an <see cref="T:System.Action" /> delegate upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposeAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.DisposeAction" /> class.
            </summary>
            <param name="action">The delegate to invoke upon disposal.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.DisposeAction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers">
            <summary>
            Extension methods used via reflection in IServiceManager.
            <seealso cref="!:ServiceHub.HostStub.IServiceManager" />
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetServiceBrokerAsync(Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> extension method for getting an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to get the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> from.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> referenced in the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> or null if one is not referenced.</returns>
            <devremarks>
            This is called via reflection from Microsoft.ServiceHub.HostStub.ServiceManager.GetServiceBrokerFromServiceActivationOptionsAsync so that the
            <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> can be passed directly to the constructor of a ServiceHub service.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetAuthorizationServiceClientAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> extension method for getting a <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" />.
            </summary>
            <param name="broker">The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to get the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> from.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation or null if the
            service wasn't found.</returns>
            <devremarks>
            This called via reflection from Microsoft.ServiceHub.HostStub.ServiceManager.GetServiceFactoryCreateAsyncArguments so that an
            <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> can be passed directly to the constructor of a ServiceHub service.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.SetupRpcConnectionAsync(System.Func{System.Object,System.Threading.Tasks.Task{System.Object}},System.IO.Stream,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Diagnostics.TraceSource,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Helper method for setting up RpcConnection for hosted services.
            </summary>
            <param name="getRpcObject">The method reference to get the ServiceFactoryResult from ServiceFactory that accepts input <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</param>
            <param name="stream">Stream.</param>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the requested service.</param>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> for the requested service.</param>
            <param name="traceSource">The default <see cref="T:System.Diagnostics.TraceSource" /> object.</param>
            <param name="completionTask">The method reference to get the completion task from <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" />.</param>
            <returns>&gt;Local RPC service object.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetServiceMonikerForRequestingService(System.String,System.String)">
            <summary>
            Helper method for constructing a <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> with the version of the service getting activated.
            </summary>
            <param name="name">The service name.</param>
            <param name="version">Version of service.</param>
            <returns>The service moniker for service.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceManagerReflectionHelpers.GetVersionInformationFromServiceActivationOptions(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Helper method for getting the version information from <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ActivationArguments" />.
            </summary>
            <param name="serviceActivationOptions">The serviceActivationOptions.</param>
            <returns>The value that is associated for the requested service version.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.FrameworkServices">
            <summary>
            Services and service contracts that provide core infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker">
            <summary>
            The descriptor for a remote service broker.
            </summary>
            <remarks>
            This descriptor defines the default protocol used to communicate with an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.
            The moniker is irrelevant because this service is not queried for.
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.FrameworkServices.Authorization">
            <summary>
            The descriptor for the authorization service.
            </summary>
            <remarks>
            This descriptor defines the default protocol used to communicate with an <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            Requests for this service should include client credentials to impersonate a client other than the local process hosting the authorization service.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor">
            <summary>
            A <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> derived type that applies camelCase naming transforms to method and event names
            and trims off any trailing "Async" suffix.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.#ctor(Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.FrameworkServices.CamelCaseTransformingDescriptor.CreateConnection(StreamJsonRpc.JsonRpc)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IDiscoveryService">
            <summary>
            Interface that all ServiceHub discovery services should implement.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IDiscoveryService.DiscoverServiceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Find the location of the configuration file for the given service.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>The full path to the service's configuration file or null if the service was not found.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IJsonRpcLocalProxy">
            <summary>
            An interface that local proxy objects may implement to generate proxies for other types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IJsonRpcLocalProxy.ConstructLocalProxy``1">
            <summary>
            Creates a local proxy for a new type that targets the same underlying object as the current proxy.
            </summary>
            <typeparam name="T">Type of the interface to create a proxy for.</typeparam>
            <returns>An instance of T or null if the underlying object does not implement T.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory">
            <summary>
            Describes a class that can create a ServiceHub service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.CreateAsync(System.IServiceProvider,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of a ServiceHub service asynchronously.
            </summary>
            <param name="hostProvidedServices">Provides other services to the service.</param>
            <param name="serviceMoniker">An identifier for a service.</param>
            <param name="serviceActivationOptions">The activation options used to start the service.</param>
            <param name="serviceBroker">
            The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that can be used to request additional services.
            </param>
            <param name="authorizationServiceClient">
            The <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> retrieved from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <remarks>
            <para>
            Uses <see cref="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)" /> to establishes an RPC connection over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            Adds ServiceHub service object to receive RPC calls and begins listening for incoming messages. The service will only be disposed if the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> does on disconnection.
            </para>
            </remarks>
            <returns>An instance of a ServiceHub service that implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IMultiVersionedServiceFactory.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Gets the description of a service.
            </summary>
            <param name="serviceMoniker">An identifier for a service.</param>
            <returns>An instance of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" />.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.INotifyDisposable">
            <summary>
            An interface that offers notification after the implementing object is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.INotifyDisposable.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
            <remarks>
            <para>If the object has already been disposed, an attempt to add a handler will result in
            the handler being invoked synchronously before the returning without retaining a reference.</para>
            <para>Once disposed, all references to handlers are removed.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker">
            <summary>
            An <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> which proffers all services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            over named pipes on Windows or Unix domain sockets on other operating systems.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.disposedEvent">
            <summary>
            An event to set upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">The service broker whose services are to be exposed.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed of.
            </summary>
            <remarks>
            This event will occur when the client disconnects from the relay,
            if the RPC library is configured to dispose target objects at that time.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes managed and unmanaged resources owned by this instance.
            </summary>
            <param name="disposing"><see langword="true" /> if this object is being disposed; <see langword="false" /> if it is being finalized.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.LinkAsync(System.IO.Pipelines.PipeReader,System.IO.Pipelines.PipeWriter)">
            <summary>
            Copies all bytes from a <see cref="T:System.IO.Pipelines.PipeReader" /> to a <see cref="T:System.IO.Pipelines.PipeWriter" />.
            </summary>
            <param name="reader">The reader to copy from.</param>
            <param name="writer">The writer to copy to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes on error or when the <paramref name="reader" /> has completed and all bytes have been written to the <paramref name="writer" />.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker">
            <summary>
            Describes a remotable service broker.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.AvailabilityChanged">
            <summary>
            Occurs when a service previously queried for since the last <see cref="E:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.AvailabilityChanged" /> event may have changed availability.
            </summary>
            <remarks>
            Not all service availability changes result in raising this event.
            Only those changes that impact services queried for on this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance
            will result in an event being raised. Changes already broadcast in a prior event are not included in a subsequent event.
            The data included in this event may be a superset of the minimum described here.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <summary>
            Introduces the client to the server to detail the client's capabilities.
            </summary>
            <param name="clientMetadata">The environment, capabilities and attributes of a client of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task representing this async call.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when this service broker does not support any of the supported service connection kinds that the client offered
            in <see cref="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.SupportedConnections" />.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Gets a pipe to a service.
            </summary>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Instructions for how the client may connect to the service.</returns>
            <remarks>
            Upon successful completion, resources may have already been allocated for the anticipated connection.
            If the connection will not be made (either because the client lost interest or cannot follow the instructions),
            the client should call <see cref="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.CancelServiceRequestAsync(System.Guid)" /> with the value of
            <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId" /> to release the allocated resources.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <summary>
            Releases resources allocated as a result of a prior call to <see cref="M:Microsoft.ServiceHub.Framework.IRemoteServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)" />
            when the client cannot or will not complete the connection to the requested service.
            </summary>
            <param name="serviceRequestId">The value of <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId" /> from the connection instructions that will not be followed.</param>
            <returns>A task representing the request to cancel.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IServiceBroker">
            <summary>
            Provides access to arbitrary services by activating them if necessary and returning an object that may be used to communicate with it.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged">
            <summary>
            Occurs when a service previously queried for since the last <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event may have changed availability.
            </summary>
            <remarks>
            Not all service availability changes result in raising this event.
            Only those changes that impact services queried for on this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance
            will result in an event being raised. Changes already broadcast in a prior event are not included in a subsequent event.
            The data included in this event may be a superset of the minimum described here.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceDescriptor">An descriptor of the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The client proxy that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            This should be disposed when no longer required if the instance returned implements <see cref="T:System.IDisposable" />.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The duplex pipe that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            This should be disposed when no longer required.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            Thrown when a service discovery or activation error occurs,
            or when the only service activation option is local service host activation since this overload
            does not accept a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> parameter.
            </exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.IServiceHubServiceFactory">
            <summary>
            Describes a class that can create a ServiceHub service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.IServiceHubServiceFactory.CreateAsync(System.IO.Stream,System.IServiceProvider,Microsoft.ServiceHub.Framework.ServiceActivationOptions,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient)">
            <summary>
            Creates an instance of a ServiceHub service asynchronously.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> that will be used to communicate with the service.</param>
            <param name="hostProvidedServices">Provides other services to the service.</param>
            <param name="serviceActivationOptions">The activation options used to start the service.</param>
            <param name="serviceBroker">The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that can be used to request additional services.</param>
            <param name="authorizationServiceClient">The <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> retrieved from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</param>
            <returns>An instance of a ServiceHub service.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker">
            <summary>
            An <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> which proffers all services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            over an existing <see cref="T:Nerdbank.Streams.MultiplexingStream" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.serviceBroker">
            <summary>
            The broker whose services are relayed by this instance.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithClient">
            <summary>
            The multiplexing stream shared with the client. Never null.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.channelsOfferedToClient">
            <summary>
            The multiplexing channels currently offered (and not yet accepted or rejected) to the client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.disposedEvent">
            <summary>
            An event to set upon disposal.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithRemoteClientOwned">
            <summary>
            A value indicating whether to dispose of the <see cref="F:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.multiplexingStreamWithClient" /> upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker,Nerdbank.Streams.MultiplexingStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">The service broker whose services should be multiplexed to the <paramref name="multiplexingStreamWithClient" />.</param>
            <param name="multiplexingStreamWithClient">The multiplexing stream to proffer services on.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed of.
            </summary>
            <remarks>
            This event will occur when the client disconnects from the relay,
            if the RPC library is configured to dispose target objects at that time.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.ConnectToServerAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> class
            and establishes a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> protocol with the client over the given stream.
            </summary>
            <param name="serviceBroker">A broker for services to be relayed.</param>
            <param name="duplexStreamWithClient">
            The duplex stream over which the client will make RPC calls to the returned <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> instance.
            A multiplexing stream will be established on this stream and the client is expected to accept an offer for a channel with an <see cref="F:System.String.Empty" /> name.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> that provides access to remote services, all over a multiplexing stream.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and/or unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to dispose of managed resources as well as unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker">
            <summary>
            Exposes a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service as a local <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.multiplexingStreamOwned">
            <summary>
            A value indicating whether to dispose of the <see cref="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.multiplexingStream" /> upon disposal.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.traceSource">
            <summary>
            The backing field for the <see cref="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceSource" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.clientMetadata">
            <summary>
            The data sent in the last handshake.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.authorizationServiceClient">
            <summary>
            The authorization service that can acquire fresh client credentials.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="remoteServiceBroker">The proxy to the remote service broker.</param>
            <param name="clientMetadata">The client metadata transmitted in the handshake.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that may utilize a multiplexing stream to proffer services.
            </summary>
            <param name="remoteServiceBroker">The proxy to the remote service broker.</param>
            <param name="multiplexingStream">The multiplexing stream on which the requested services may be exposed. Must not be null.</param>
            <param name="clientMetadata">The client metadata transmitted in the handshake.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.RemoteServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.ServiceRequestFailure">
            <summary>
            Indicates a failure in requesting a service (not just a negative result from the remote service broker).
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.RequestedServiceUnavailable">
            <summary>
            Indicates a response for a service indicates the service was not available.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.IncompatibleServiceConnection">
            <summary>
            Indicates the remote service broker proposed we connect to a service using a means we did not support.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.ServiceConnectionFailure">
            <summary>
            A service was offered, but a failure occurred while trying to connect to it.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceEvents.Disposed">
            <summary>
            This instance was explicitly disposed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when this instance is disposed or the underlying <see cref="T:System.IO.Stream" /> it was created with (if applicable) is closed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceBroker.TraceSource">
            <summary>
            Gets or sets the <see cref="T:System.Diagnostics.TraceSource" /> this instance will use for trace messages.
            </summary>
            <value>Never null.</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that connects to an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> on the default channel
            after establishing a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on the given <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="duplexStream">
            A full duplex stream on which to create a multiplexing stream.
            This multiplexing stream is expected to offer a default channel (<see cref="F:System.String.Empty" /> name) with a
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(System.IO.Stream,Nerdbank.Streams.MultiplexingStream.Options,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class
            that connects to an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> on the default channel
            after establishing a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on the given <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="duplexStream">
            A full duplex stream on which to create a multiplexing stream.
            This multiplexing stream is expected to offer a default channel (<see cref="F:System.String.Empty" /> name) with a
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="options">Options to pass along to the created <see cref="T:Nerdbank.Streams.MultiplexingStream" /> on creation.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToMultiplexingServerAsync(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">
            An existing proxy established to acquire remote services.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="multiplexingStream">A multiplexing stream that underlies the <paramref name="serviceBroker" /> proxy.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(System.IO.Pipelines.IDuplexPipe,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="pipe">
            A duplex pipe over which to exchange JSON-RPC messages with an
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be completed when the returned value is disposed,
            or completed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="pipeName">
            The name of a pipe over which to exchange JSON-RPC messages with an
            <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> service.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToServerAsync(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> class.
            </summary>
            <param name="serviceBroker">
            An existing proxy established to acquire remote services.
            This object is considered "owned" by the returned <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> and will be disposed when the returned value is disposed,
            or disposed before this method throws.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that provides access to remote services.</returns>
            <remarks>
            The <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.RemoteServiceBroker" /> is used as the wire protocol.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.OfferLocalServiceHostAsync(System.Threading.CancellationToken)">
            <summary>
            Offers the local environment as a host for services proffered by the remote service broker when they can be activated locally.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes after the service broker has acknowledged the local service host.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.SetAuthorizationService(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Sets the authorization service to use to obtain the default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />
            for all service requests that do not explicitly provide it.
            </summary>
            <param name="authorizationService">The authorization service. May be <c>null</c> to clear a previously set value.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
            <remarks>
            This method is free threaded, but not thread-safe. It should not be called concurrently with itself.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.SetAuthorizationService(Microsoft.ServiceHub.Framework.Services.IAuthorizationService)">
            <summary>
            Sets the authorization service to use to obtain the default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />
            for all service requests that do not explicitly provide it.
            </summary>
            <param name="authorizationService">The authorization service. May be <c>null</c> to clear a previously set value.</param>
            <remarks>
            This method is free threaded, but not thread-safe. It should not be called concurrently with itself.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and/or unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to dispose of managed resources as well as unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.RemoteServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ConnectToPipeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Connects to a named pipe.
            </summary>
            <param name="pipeName">The name of the pipe.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A duplex pipe.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.ActivateLocalService(Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation)">
            <summary>
            Activates a service within the current AppDomain.
            </summary>
            <param name="serviceActivation">Details on which service to activate.</param>
            <returns>The activated service object.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceBroker.GetLocalServiceHostInformation">
            <summary>
            Prepares a description of the kind of service host we can proffer.
            </summary>
            <returns>A description of our own local service host capabilities.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo">
            <summary>
            Describes how to connect to a provisioned remote service.
            </summary>
            <remarks>
            An initialized instance of this struct is expected to represent exactly one connection mechanism.
            </remarks>
            <devremarks>
            When adding connection styles to this struct, be sure to add a value to <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceConnections" /> to match.
            </devremarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.RequestId">
            <summary>
            Gets or sets the ID assigned to the service request that this instance is in response to.
            </summary>
            <remarks>
            This value is useful when canceling this service request without connecting to it.
            If null, no resources are allocated for this service prior to the client connecting to it,
            and thus no resources need to be released if the client decides not to connect.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.MultiplexingChannelId">
            <summary>
            Gets or sets the ID of the channel created over the remote service broker's multiplexing stream where the activated service is listening.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.PipeName">
            <summary>
            Gets or sets the name of an IPC pipe to connect to where the activated service is listening.
            On Windows this is a named pipe, whereas on OSX/Linux this is the path to a unix domain socket.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.ClrActivation">
            <summary>
            Gets or sets instructions to activate the service within the client process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.IsEmpty">
            <summary>
            Gets a value indicating whether this instance represents no connection information.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.IsOneOf(Microsoft.ServiceHub.Framework.RemoteServiceConnections)">
            <summary>
            Checks whether this instance contains instructions for any of a set of connection types.
            </summary>
            <param name="connections">The set of connection types to test for.</param>
            <returns>
            <c>true</c> if any of the <paramref name="connections" /> specified coincide with instructions available in this value; <c>false</c> otherwise.
            <c>false</c> is returned if <paramref name="connections" /> is set to <see cref="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.None" />.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.ThrowIfOutsideAllowedConnections(Microsoft.ServiceHub.Framework.RemoteServiceConnections)">
            <summary>
            Throws an exception if the connection info is non-empty yet contains only activation details that
            are not supported.
            </summary>
            <param name="allowedConnections">The set of supported activation details.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation">
            <summary>
            Describes activation instructions for a CLR-based service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation" /> class.
            </summary>
            <param name="assemblyPath">the local path to the assembly to be loaded.</param>
            <param name="fullTypeName">the full name (not including assembly name qualifier) of the type that serves as the entrypoint and (if applicable) the RPC target for the service.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.AssemblyPath">
            <summary>
            Gets the local path to the assembly to be loaded.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.RemoteServiceConnectionInfo.LocalCLRServiceActivation.FullTypeName">
            <summary>
            Gets the full name (not including assembly name qualifier) of the type
            that serves as the entrypoint and (if applicable) the RPC target for the service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.RemoteServiceConnections">
            <summary>
            Identifies the connections that are supported for a remote service connection.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.None">
            <summary>
            No connection types.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.Multiplexing">
            <summary>
            Supports multiplexing channels across the existing stream shared between the remote service broker and its client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.IpcPipe">
            <summary>
            Supports opening an IPC pipe between service and its client.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.RemoteServiceConnections.ClrActivation">
            <summary>
            Supports sharing assembly path and full name of the type that represents the service (e.g. its entrypoint and RPC target).
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServerFactory">
            <summary>
            A static class for creating named pipe servers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServerFactory.CreateAsync(System.String,System.Diagnostics.TraceSource,System.Func{System.IO.Stream,System.Threading.Tasks.Task})">
            <summary>
            Creates a named pipe server.
            </summary>
            <param name="pipeName">The name of the server.</param>
            <param name="logger">The logger for the server.</param>
            <param name="onConnectedCallback">Callback function to be run whenever a client connects to the server.</param>
            <returns>
            A disposable server that should be disposed of when it is no longer needed as well as the name of the pipe or socket that the server is opened on.
            This server is also castable to <see cref="T:System.IAsyncDisposable" />.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException">
            <summary>
            Used to indicate a failure in a <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to activate a service that was found.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationFailedException.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException" /> class.
            </summary>
            <param name="serviceMoniker">The moniker of the service that failed to activate.</param>
            <param name="inner">The exception thrown from the service during activation.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationFailedException" /> class.
            </summary>
            <param name="info">Seralization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions">
            <summary>
            Activation options that may optionally be supplied to a service when activating it.
            </summary>
            <remarks>
            This type must use only built-in types since every applicable <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> is required to be able to directly serialize it.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ActivationArguments">
            <summary>
            Gets or sets a map of arbitrary data, presumably meaningful to the service.
            </summary>
            <value>May be null.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials">
            <summary>
            Gets or sets a map that describes the client's identity in terms that an identity or authorization service can interpret.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture">
            <summary>
            Gets or sets the client's preferred culture.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture">
            <summary>
            Gets or sets the client's preferred UI culture.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientRpcTarget">
            <summary>
            Gets or sets an RPC target that the client offers to the requested service so the service can invoke members on the client.
            </summary>
            <remarks>
            This object is never serialized.
            If the service is available locally this object is made available directly to the service.
            If the service is remote, the remote service broker client such as <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" /> should set this object as the local RPC target when setting up an RPC connection,
            and the service-side should set up a proxy for this object based on the type given in <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ClientInterface" />.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.MultiplexingStream">
            <summary>
            Gets or sets the <see cref="T:Nerdbank.Streams.MultiplexingStream" /> associated with the connection
            between the client and the service broker.
            This may be used to establish additional channels between client and service.
            </summary>
            <remarks>
            This object is never serialized.
            If the service is available locally this object can be ignored by the broker and service because client and service can exchange streams directly.
            If the service is remote, the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> such as <see cref="T:Microsoft.ServiceHub.Framework.MultiplexingRelayServiceBroker" /> should set this property on the activation options
            before forwarding the request to the final service broker.
            The final service broker should then apply this value to the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> using <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.SetClientDefaults">
            <summary>
            Automatically set properties on this type where possible based on the client environment,
            if they have not already had values assigned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ApplyCultureToCurrentContext">
            <summary>
            Applies the values of <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture" /> and <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture" /> to the current <see cref="T:System.Threading.ExecutionContext" />, if they have been set on this struct.
            </summary>
            <returns>A value to dispose of to revert the <see cref="T:System.Globalization.CultureInfo" /> properties to their prior values.</returns>
            <remarks>
            By surrounding construction of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" /> with the client's applied culture,
            that connection is expected to pick it up and dispatch incoming RPC requests using that culture.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.Equals(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.Equals(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Compares content equality between two dictionaries.
            </summary>
            <param name="dictionary1">The first dictionary.</param>
            <param name="dictionary2">The second dictionary.</param>
            <returns><c>true</c> if the two instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication">
            <summary>
            A disposable struct for applying and reverting changes to <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication" /> struct and
            applies <see cref="T:System.Globalization.CultureInfo" /> as specified by the owner to the calling thread.
            </summary>
            <param name="newCulture">The new value for <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</param>
            <param name="newUICulture">The new value for <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication.Dispose">
            <summary>Reverts changes to <see cref="T:System.Globalization.CultureInfo" /> that were made by the constructor.</summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator">
            <summary>
            A class that aggregates one or more <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances into one, with various policies applied.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.Sequential(System.Collections.Generic.IReadOnlyList{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Service requests are forwarded to a list of other <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances one-at-a-time.
            The first broker to return a successful response is returned to the caller.
            </summary>
            <param name="serviceBrokers">A list of service brokers aggregated into the new one. This collection is stored; not copied. The collection should *not* be modified while the returned broker is in use.</param>
            <returns>The aggregate service broker.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.Parallel(System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Service requests are forwarded to a list of other <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instances in parallel.
            At most one broker is allowed to respond with a service or all results are disposed and an exception is thrown.
            </summary>
            <param name="serviceBrokers">A collection of service brokers aggregated into the new one. This collection is stored; not copied. The collection should *not* be modified while the returned broker is in use.</param>
            <returns>The aggregate service broker.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshal(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that forces all RPC calls to be marshaled even if a service is available locally.
            </summary>
            <param name="serviceBroker">The inner service broker.</param>
            <returns>The marshaling service broker.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker">
            <summary>
            A broker which will query many other brokers sequentially, and return the first successful result.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker" /> class.
            </summary>
            <param name="serviceBrokers">A list of brokers to use. This collection is stored; not copied.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.SequentialBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker">
            <summary>
            A broker which will query many other brokers in parallel, but assert that at most one service comes back.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.IServiceBroker})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker" /> class.
            </summary>
            <param name="serviceBrokers">A collection of brokers to use. This collection is stored; not copied.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ParallelAtMostOneBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker">
            <summary>
            Wraps an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> such that any locally provisioned service is forced to marshal all calls anyway.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.OnAvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerAggregator.ForceMarshalingBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">This parameter is ignored. The event will be raised with "this" as the sender.</param>
            <param name="args">Details regarding what changes have occurred.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient">
            <summary>
            A wrapper around <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that caches and shares client proxies.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.joinableTaskFactory">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that can be used to mitigate deadlocks. May be null.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.clientCache">
            <summary>
            A cache of current (non-stale) proxies.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.rentedProxies">
            <summary>
            A map of any currently rented proxies with a count of open rentals.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.availabilityChangedHookedUp">
            <summary>
            A flag indicating whether the <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ServiceBroker_AvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)" />
            handler has been wired up to the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event on
            <see cref="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.serviceBroker" /> already.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.lastInvalidationEventCancellationSource">
            <summary>
            The source for a <see cref="T:System.Threading.CancellationToken" /> which was handed to the last raising of the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.serviceBroker">
            <summary>
            The inner <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> from which client proxies are obtained.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.staleRentedProxies">
            <summary>
            The set of proxies that are stale but still being rented.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient" /> class.
            </summary>
            <param name="serviceBroker">The underlying service broker.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ClientProxiesInvalidatedEventHandler">
            <summary>
            The delegate for a handler of the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
            <param name="sender">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient" /> instance that is raising the event.</param>
            <param name="args">Details regarding which services actually changed that led to this event being raised.</param>
            <param name="cancellationToken">A token that is canceled when the new set of services begun with this event is itself invalidated.</param>
            <returns>A task whose completion will allow a subsequent invocation of this event handler.</returns>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated">
            <summary>
            Occurs when previously acquired proxies have gone stale.
            </summary>
            <remarks>
            <para>
            Handlers should release any outstanding rentals at their earliest convenience and use <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> to get new proxies.
            Exceptions thrown or faulted tasks returned by the handler are ignored.
            </para>
            <para>
            Handlers return a <see cref="T:System.Threading.Tasks.Task" /> to they can carry out asynchronous operations such as acquiring and initializing new services without fear that another invocation of their handler will happen concurrently.
            Any further invalidation event will await for handlers of the prior event to complete before raising the next one. The <see cref="T:System.Threading.CancellationToken" /> provided to the earlier invocation signals that a follow-up event is waiting to be raised to reset the services again.
            Note however that even if the event handler has not yet completed, all calls to <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> will always return a proxy to the most current service available.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.InvalidationSemaphore">
            <summary>
            Gets the semaphore that is entered to raise the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
            <remarks>
            This can be used to enter the same semaphore during initialization in order to ensure that an <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event does not disrupt initialization.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            The same client proxy is returned for a given service and proxy type until it is invalidated.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceRpcDescriptor">An descriptor of the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A rental around the client proxy that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            Proxies are kept alive while "rented", and may be kept alive beyond a rental until they are invalidated.
            The rental struct should be disposed as soon as the caller is done using it (such that the next use will call <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> again and could tolerate getting a client proxy to a different service instance.)
            The client proxy itself within the rental struct should NOT be disposed directly since it can be shared across invocations of this method.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            The same client proxy is returned for a given service and proxy type until it is invalidated.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceRpcDescriptor">An descriptor of the service.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor. Only used if the service has not already been cached.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A rental around the client proxy that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            Proxies are kept alive while "rented", and may be kept alive beyond a rental until they are invalidated.
            The rental struct should be disposed as soon as the caller is done using it (such that the next use will call <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> again and could tolerate getting a client proxy to a different service instance.)
            The client proxy itself within the rental struct should NOT be disposed directly since it can be shared across invocations of this method.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Dispose">
            <summary>
            Invalidates all previously produced client proxies and disposes this object.
            Any client proxies currently rented will be disposed of when they are all returned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Dispose(System.Boolean)">
            <summary>
            Disposes managed and unmanaged resources held by this instance.
            </summary>
            <param name="disposing"><c>true</c> to dispose managed and native resources; <c>false</c> to dispose of only native resources.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.OnInvalidated(Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event and swallows any exceptions thrown by handlers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ServiceBroker_AvailabilityChanged(System.Object,Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Invalidates proxies of changed services and raises the <see cref="E:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Invalidated" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.ReleaseRental(Microsoft.VisualStudio.Threading.AsyncLazy{System.Object},System.Object)">
            <summary>
            Releases a rental and disposes of the client proxy if appropriate.
            </summary>
            <param name="clientProxy">The shared client proxy with its lazy wrapper.</param>
            <param name="proxy">The value from the <see cref="T:Microsoft.VisualStudio.Threading.AsyncLazy`1" />, if it could be obtained; otherwise <c>null</c>.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.InvalidateProxies(Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs)">
            <summary>
            Invalidates all current proxies.
            </summary>
            <returns>A list of proxies that are stale and not rented and thus should be disposed of. May be null if no proxies need to be disposed of.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.DisposeOldProxies(System.Collections.Generic.List{System.IDisposable})">
            <summary>
            Disposes old proxies.
            </summary>
            <param name="disposableProxies">The list of proxies to dispose. May be <c>null</c>.</param>
            <exception cref="T:System.AggregateException">Thrown with all exceptions thrown by proxy <see cref="M:System.IDisposable.Dispose" /> methods.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.EnsureAvailabilityChangedIsHookedUp">
            <summary>
            Adds the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> handler.
            </summary>
            <remarks>
            The caller should have already entered the <see cref="F:Microsoft.ServiceHub.Framework.ServiceBrokerClient.syncObject" /> lock
            and confirmed that <see cref="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.IsDisposed" /> is <see langword="false" />.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1">
            <summary>
            Provides access to a client proxy as a rental that should be disposed of to signify no active use, allowing it to be disposed of when invalidated.
            </summary>
            <typeparam name="T">The type of the client proxy.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.#ctor(Microsoft.ServiceHub.Framework.ServiceBrokerClient,Microsoft.VisualStudio.Threading.AsyncLazy{System.Object},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1" /> struct.
            </summary>
            <param name="client">The owner.</param>
            <param name="proxy">The (already evaluated) lazy that we use to track rentals.</param>
            <param name="value">The client proxy itself.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.Proxy">
            <summary>
            Gets the client proxy.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this instance has not been initialized.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed (after being initialized).</exception>
            <remarks>
            This value should NOT be disposed directly since it can be shared across invocations of the <see cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.IsInitialized">
            <summary>
            Gets a value indicating whether this rental has been initialized (and not yet disposed).
            </summary>
            <remarks>
            This value can be useful to discern between a default <see cref="T:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1" /> instance (where no proxy was yet requested)
            and one which is initialized but with a null proxy because no matching service was found.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.IsDisposed">
            <summary>
            Gets a value indicating whether this rental has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental`1.Dispose">
            <summary>
            Returns the rental of the client proxy, allowing it to be subject to disposal upon invalidation if all rentals have been similarly disposed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata">
            <summary>
            Describes the environment, capabilities and attributes of a client of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.SupportedConnections">
            <summary>
            Gets or sets the remote service connections that the client supports.
            </summary>
            <remarks>
            This allows an <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> to choose the optimal mutually supported connection kind
            when responding to future service requests.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata.LocalServiceHost">
            <summary>
            Gets or sets metadata regarding the client's environment for use as a potential services host
            for service which are originally requested of the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" />
            but which services may in fact be available for activation locally within the client's environment.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> interface and related types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through a client proxy.
            </summary>
            <typeparam name="T">The type of client proxy to create.</typeparam>
            <param name="serviceBroker">The service broker.</param>
            <param name="serviceDescriptor">An descriptor of the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The client proxy that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            This should be disposed when no longer required if the instance returned implements <see cref="T:System.IDisposable" />.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">Thrown when a service discovery or activation error occurs.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor{``0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetProxyAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceBrokerExtensions.GetPipeAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Requests access to some service through an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="serviceBroker">The service broker.</param>
            <param name="serviceMoniker">The moniker for the service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            The duplex pipe that may be used to communicate with the service; or <c>null</c> if no matching service could be found.
            This should be disposed when no longer required.
            </returns>
            <exception cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            Thrown when a service discovery or activation error occurs,
            or when the only service activation option is local service host activation since this overload
            does not accept a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> parameter.
            </exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceCompositionException">
            <summary>
            Used to indicate when a failure to discover or activate a service occurs.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceCompositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceCompositionException" /> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostInformation">
            <summary>
            Describes important attributes of a service host that are often required to assess compatibility with a service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.OperatingSystem">
            <summary>
            Gets or sets the operating system the service host is running on.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.OperatingSystemVersion">
            <summary>
            Gets or sets the version of the operating system the service host is running on.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.ProcessArchitecture">
            <summary>
            Gets or sets the architecture of the service host process.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.Runtime">
            <summary>
            Gets or sets the runtime offered by the service host.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceHostInformation.RuntimeVersion">
            <summary>
            Gets or sets the version of the runtime, if applicable.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem">
            <summary>
            The recognized operating systems that can act as service hosts.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.Windows">
            <summary>
            The Windows operating system.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.Linux">
            <summary>
            The Linux operating system.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostOperatingSystem.OSX">
            <summary>
            The Mac OSX operating system.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHostRuntime">
            <summary>
            The set of recognized runtimes for service hosts.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.None">
            <summary>
            No runtime (i.e. native code only).
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NETFramework">
            <summary>
            The .NET Framework.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NETCore">
            <summary>
            .NET Core.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.Mono">
            <summary>
            Mono.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceHostRuntime.NodeJS">
            <summary>
            Node.JS.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker">
            <summary>
            ServiceBroker provided to services running inside of ServiceHub Hosts. Wraps an existing <see cref="T:Microsoft.ServiceHub.Framework.RemoteServiceBroker" />
            and adds the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> ServiceHubHostProcessId to each request.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker" /> class.
            </summary>
            <param name="inner">The inner <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that this object wraps.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor">
            <content>
            The <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration" /> nested class.
            </content>
            <summary>
            An RPC descriptor for services that support JSON-RPC.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration">
            <summary>
            Creates and caches proxies generated to wrap local target objects for the <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructLocalProxy``1(``0)" /> method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.GetProxyModuleBuilder(System.Reflection.TypeInfo)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use for generating a proxy for the given type.
            </summary>
            <param name="interfaceType">The type of the interface to generate a proxy for.</param>
            <returns>The <see cref="T:System.Reflection.Emit.ModuleBuilder" /> to use.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.Get(System.Reflection.TypeInfo)">
            <summary>
            Gets the generated type for a proxy for a given interface.
            </summary>
            <param name="serviceInterface">The interface the proxy must implement.</param>
            <returns>The generated type.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.LocalProxyGeneration.ExceptionHelper(System.Exception,StreamJsonRpc.ExceptionProcessing)">
            <summary>
            Called from the generated proxy to help prepare the exception to throw.
            </summary>
            <param name="ex">The exception thrown from the target object.</param>
            <param name="exceptionStrategy">The value of <see cref="P:StreamJsonRpc.JsonRpc.ExceptionStrategy" /> to emulate.</param>
            <returns>The exception the generated code should throw.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and no support for opening additional streams except by relying on the underlying service broker to provide one.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and does support for opening additional streams with <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions" />.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
            <param name="multiplexingStreamOptions">The options that a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> may be created with. A <c>null</c> value will prevent a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> from being created for the RPC connection.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> class and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters">
            <summary>
            The formats that JSON-RPC can be serialized to.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters.UTF8">
            <summary>
            Format messages with UTF-8 text for a human readable JSON representation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters.MessagePack">
            <summary>
            Format messages with MessagePack for a high throughput, compact binary representation.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters">
            <summary>
            The various headers that introduce a JSON-RPC message.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters.HttpLikeHeaders">
            <summary>
            Adds an HTTP-like header in front of each JSON-RPC message that describes its encoding and length.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters.BigEndianInt32LengthHeader">
            <summary>
            Adds a big endian 32-bit integer before each JSON-RPC message describing its length.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Protocol">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatter">
            <summary>
            Gets the formatting used by the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiter">
            <summary>
            Gets the mechanism by which message boundaries may be discerned. Some expected values are found in <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy">
            <summary>
            Gets the way exceptions are communicated from the service to the client.
            This is set on the <see cref="P:StreamJsonRpc.JsonRpc.ExceptionStrategy" /> property when the <see cref="T:StreamJsonRpc.JsonRpc" /> instance is created.
            </summary>
            <value>The default value is <see cref="F:StreamJsonRpc.ExceptionProcessing.CommonErrorData" />.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions">
            <summary>
            Gets the options to use when creating a new <see cref="T:Nerdbank.Streams.MultiplexingStream" /> as a prerequisite to establishing an RPC connection.
            </summary>
            <remarks>
            Any non-null value from this property is always <see cref="P:Nerdbank.Streams.MultiplexingStream.Options.IsFrozen">frozen</see>.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.DebuggerDisplay">
            <summary>
            Gets a string for the debugger to display for this struct.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructLocalProxy``1(``0)">
            <summary>
            Wraps some target object with a proxy that gives the caller the similar semantics to calling
            an actual RPC object using <see cref="T:StreamJsonRpc.JsonRpc" />.
            </summary>
            <typeparam name="T">The interface that the returned proxy must implement.</typeparam>
            <param name="target">The object to which all calls to the proxy should be forwarded.</param>
            <returns>The proxy, or null if <paramref name="target" /> is null.</returns>
            <remarks>
            The proxy will forward all calls made to the <typeparamref name="T" /> interface to the <paramref name="target" /> object.
            Exceptions thrown from the target will be caught by the proxy and a <see cref="T:StreamJsonRpc.RemoteInvocationException" /> will be thrown instead
            with some of the original exception details preserved (but not as an <see cref="P:System.Exception.InnerException" />) in order to
            emulate what an RPC connection would be like.
            This proxy implements <typeparamref name="T" />.
            The proxy also implements <see cref="T:System.IDisposable" /> and will forward a call to <see cref="M:System.IDisposable.Dispose" />
            to the <paramref name="target" /> object if the target object implements <see cref="T:System.IDisposable" />.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream.Options)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MultiplexingStreamOptions" /> property set to a frozen copy of the specified value.
            If a <see cref="T:Nerdbank.Streams.MultiplexingStream" /> has been set, it is cleared.
            </summary>
            <param name="multiplexingStreamOptions">Options to use when setting up a new <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that should be set up on a pipe before initializing RPC; <c>null</c> to not set up or use any.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.WithExceptionStrategy(StreamJsonRpc.ExceptionProcessing)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy" /> property set to a new value.
            </summary>
            <param name="exceptionStrategy">The new value for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ExceptionStrategy" /> property.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Equals(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Clone">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateConnection(StreamJsonRpc.JsonRpc)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" /> or derived type.
            </summary>
            <param name="jsonRpc">The <see cref="T:StreamJsonRpc.JsonRpc" /> object that will have to be passed to <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.#ctor(StreamJsonRpc.JsonRpc)" />.</param>
            <returns>The new instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" />.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateHandler(System.IO.Pipelines.IDuplexPipe,StreamJsonRpc.IJsonRpcMessageFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.IJsonRpcMessageHandler" /> for use in a new server or client.
            </summary>
            <param name="pipe">The pipe the handler should use to send and receive messages.</param>
            <param name="formatter">The <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> the handler should use to encode messages.</param>
            <returns>The new message handler.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateJsonRpc(StreamJsonRpc.IJsonRpcMessageHandler)">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.JsonRpc" /> for use in a new server or client.
            </summary>
            <param name="handler">The message handler that the <see cref="T:StreamJsonRpc.JsonRpc" /> instance should use.</param>
            <returns>The new <see cref="T:StreamJsonRpc.JsonRpc" />.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateFormatter">
            <summary>
            Initializes a new instance of <see cref="T:StreamJsonRpc.IJsonRpcMessageFormatter" /> for use in a new server or client.
            </summary>
            <returns>The new message formatter.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.CreateSeedChannels">
            <summary>
            Create first seed channel if not being assigned by the owner of the service descriptor.
            Sets the protocol version to be used. 1 is the original. 2 is a
            protocol breaking change backpressure support, 3 is a protocol breaking change and default version that
            removes the initial handshake so no round-trip to establish the connection is necessary.
            </summary>
            <returns>The options that a Nerdbank.Streams.MultiplexingStream may be created.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection">
            <summary>
            A <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection" />-derived type specifically for <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.localRpcTargetOptions">
            <summary>
            Backing field for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcTargetOptions" /> property.
            </summary>
            <devremarks>
            Create a new instance of <see cref="T:StreamJsonRpc.JsonRpcTargetOptions" /> every time because it's mutable.
            </devremarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.localRpcProxyOptions">
            <summary>
            Backing field for the <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcProxyOptions" /> property.
            </summary>
            <devremarks>
            Create a new instance of <see cref="T:StreamJsonRpc.JsonRpcProxyOptions" /> every time because it's mutable.
            </devremarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.#ctor(StreamJsonRpc.JsonRpc)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection" /> class.
            </summary>
            <param name="jsonRpc">The JSON-RPC object.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.TraceSource">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcTargetOptions">
            <summary>
            Gets or sets the options to pass to <see cref="M:StreamJsonRpc.JsonRpc.AddLocalRpcTarget(System.Object,StreamJsonRpc.JsonRpcTargetOptions)" /> in the default implementation of <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.AddLocalRpcTarget(System.Object)" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.LocalRpcProxyOptions">
            <summary>
            Gets or sets the options to pass to <see cref="M:StreamJsonRpc.JsonRpc.Attach``1(StreamJsonRpc.JsonRpcProxyOptions)" /> in the default implementation of <see cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.ConstructRpcClient``1" />.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc">
            <summary>
            Gets the underlying <see cref="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.JsonRpc" /> object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.Completion">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.AddLocalRpcTarget(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.ConstructRpcClient``1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.JsonRpcConnection.StartListening">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1">
            <inheritdoc cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" />
            <typeparam name="T">The RPC interface used to call the service.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
            <param name="formatter">The formatter to use for the JSON-RPC message.</param>
            <param name="messageDelimiter">The message delimiter scheme to use.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1" /> class
            and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor`1.Clone">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceMoniker">
            <summary>
            An identifier for an activatable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> class.
            </summary>
            <param name="name">The name of the service.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> class.
            </summary>
            <param name="name">The name of the service.</param>
            <param name="version">The version of the service or expected by the client. May be null.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version">
            <summary>
            Gets the version of the service or the version expected by the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceMoniker.DebuggerDisplay">
            <summary>
            Gets a string for the debugger to display for this struct.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.op_Equality(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are equivalent.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.op_Inequality(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are different.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.Equals(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceMoniker.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceMoniker.ServiceMonikerTypeConverter">
            <summary>
            This converter allows Newtonsoft.Json to use <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> as a key in a dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor">
            <content>
            Contains the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext" /> nested class.
            </content>
            <summary>
            A description of a service to help automate connecting to it.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext">
            <summary>
            A <see cref="T:System.Threading.SynchronizationContext" /> that preserves message order.
            </summary>
            <remarks>
            <para>
            Delegates will be invoked on the threadpool in the order they were posted with
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.
            No two delegates will ever be executed concurrently.
            Note that if the delegate invokes an async method, the delegate formally ends
            when the async method yields for the first time or returns, whichever comes first.
            Once that delegate returns the next delegate can be executed.
            </para>
            <para>
            This <see cref="T:System.Threading.SynchronizationContext" /> is not a fully functional one, and is intended
            only for use with <see cref="T:StreamJsonRpc.JsonRpc" /> to preserve RPC order.
            It should not be set as the <see cref="P:System.Threading.SynchronizationContext.Current" /> <see cref="T:System.Threading.SynchronizationContext" />.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.queue">
            <summary>
            The queue of work to execute.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext" /> class.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.UnhandledException">
            <summary>
            Occurs when posted work throws an unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Throws <see cref="T:System.NotSupportedException" />.
            </summary>
            <param name="d">The delegate to invoke.</param>
            <param name="state">State to pass to the delegate.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.CreateCopy">
            <summary>
            Throws <see cref="T:System.NotSupportedException" />.
            </summary>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.Dispose">
            <summary>
            Causes this <see cref="T:System.Threading.SynchronizationContext" /> to reject all future posted work and
            releases the queue processor when it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcOrderPreservingSynchronizationContext.ProcessQueueAsync">
            <summary>
            Executes queued work on the threadpool, one at a time.
            </summary>
            <returns>A task that always completes successfully.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> class.
            </summary>
            <param name="serviceMoniker">The service moniker.</param>
            <param name="clientInterface">The interface type that the client's "callback" RPC target is expected to implement. May be null if the service does not invoke methods on the client.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> class
            and initializes all fields based on a template instance.
            </summary>
            <param name="copyFrom">The instance to copy all fields from.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker">
            <summary>
            Gets the moniker for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Protocol">
            <summary>
            Gets a non-localized name of the protocol supported by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource" /> to be used on constructed clients or servers.
            </summary>
            <value><c>null</c> by default.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.MultiplexingStream">
            <summary>
            Gets the <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used by constructed clients or servers.
            </summary>
            <value><c>null</c> by default.</value>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ClientInterface">
            <summary>
            Gets the interface type that the client's "callback" RPC target is expected to implement.
            </summary>
            <value>May be null if the service does not invoke methods on the client.</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc``1(System.Object,System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Creates an RPC client proxy over a given <see cref="T:System.IO.Pipelines.IDuplexPipe" />
            and provides a local RPC target for the remote party to invoke methods locally.
            </summary>
            <typeparam name="T">The type of the RPC proxy to generate for invoking methods on the remote party or receiving events from it.</typeparam>
            <param name="rpcTarget">
            A local RPC target on which the remote party can invoke methods.
            This is usually optional for requestors of a service but is typically expected for the proffering services to provide.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <param name="pipe">The pipe used to communicate with the remote party.</param>
            <returns>
            The generated proxy.
            This value should be disposed of when no longer needed, if it implements <see cref="T:System.IDisposable" /> at runtime.
            A convenient disposal syntax is:
            <code><![CDATA[(proxy as IDisposable)?.Dispose();]]></code>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc``1(System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Creates an RPC client proxy over a given <see cref="T:System.IO.Pipelines.IDuplexPipe" />
            without providing a local RPC target for the remote party to invoke methods locally.
            </summary>
            <typeparam name="T">The type of the RPC proxy to generate for invoking methods on the remote party or receiving events from it.</typeparam>
            <param name="pipe">The pipe used to communicate with the remote party.</param>
            <returns>
            The generated proxy.
            This value should be disposed of when no longer needed, if it implements <see cref="T:System.IDisposable" /> at runtime.
            A convenient disposal syntax is:
            <code><![CDATA[(proxy as IDisposable)?.Dispose();]]></code>
            </returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpc(System.Object,System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Establishes an RPC connection to a given object over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />,
            allowing the remote party to invoke methods locally on the given object.
            </summary>
            <param name="rpcTarget">
            The target of any RPC calls received over the supplied <paramref name="pipe" />.
            Raising events defined on this object may result in notifications being forwarded to the remote party.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <param name="pipe">The pipe the <paramref name="rpcTarget" /> should use to communicate.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructLocalProxy``1(``0)">
            <summary>
            Gives the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> a chance to wrap a local target object
            so that interacting with it behaves similarly to if it were a remote target that was using RPC.
            </summary>
            <typeparam name="T">The interface that defines the RPC contract for communicating with the <paramref name="target" />.</typeparam>
            <param name="target">The local target object. May be null, which will result in null being returned.</param>
            <returns>The proxy wrapper (or null if <paramref name="target" /> is null); or possibly the original <paramref name="target" /> object if this method is not overriden by a derived-type.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithTraceSource(System.Diagnostics.TraceSource)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.TraceSource" /> property set to the specified value.
            </summary>
            <param name="traceSource">The receiver of trace messages.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithServiceMoniker(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> property set to the specified value.
            </summary>
            <param name="moniker">The moniker to be used in place of the original.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithMultiplexingStream(Nerdbank.Streams.MultiplexingStream)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> that resembles this one,
            but with the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.MultiplexingStream" /> property set to the specified value and <see cref="T:Nerdbank.Streams.MultiplexingStream.Options" /> set to <c>null</c>.
            </summary>
            <param name="multiplexingStream">The <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used by constructed clients or servers.</param>
            <returns>A clone of this instance, with the property changed. Or this same instance if the property already matches.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Establishes an RPC connection over an <see cref="T:System.IO.Pipelines.IDuplexPipe" />.
            </summary>
            <param name="pipe">The pipe used to send and receive RPC messages.</param>
            <returns>An object representing the lifetime of the connection.</returns>
            <remarks>
            Callers are expected to call <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient``1" /> and/or <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.AddLocalRpcTarget(System.Object)" /> on the result value
            before invoking <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> to begin the RPC session.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Clone">
            <summary>
            Creates a copy of this instance with all the same properties.
            </summary>
            <returns>The copy.</returns>
            <remarks>
            Derived types should override this method to create a new instance of their own type,
            using the <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor)" /> copy constructor,
            then copy all their unique properties from this instance to the new one before returning the new one.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection">
            <summary>
            Represents an RPC connection.
            </summary>
            <remarks>
            This object should self-dispose when the underlying <see cref="T:System.IO.Pipelines.IDuplexPipe" /> completes.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.TraceSource">
            <summary>
            Gets or sets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.TraceSource" /> that receives log messages regarding the RPC connection.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.Completion">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task" /> that completes when the underlying RPC connection has shutdown
            and any local RPC target objects have been disposed of, if applicable.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.AddLocalRpcTarget(System.Object)">
            <summary>
            Adds a target object to receive RPC calls.
            </summary>
            <param name="rpcTarget">
            A target for any RPC calls received over the connection.
            If this object implements <see cref="T:System.IDisposable" />, <see cref="M:System.IDisposable.Dispose" /> will be invoked
            when the client closes their connection.
            </param>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient``1">
            <summary>
            Produces a proxy that provides a strongly-typed API for invoking methods offered by the remote party.
            </summary>
            <typeparam name="T">The interface that the returned proxy should implement.</typeparam>
            <returns>The generated proxy.</returns>
            <remarks>
            This method may be called any number of times, but restrictions may apply after <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> is called,
            particularly when <typeparamref name="T" /> includes events.
            </remarks>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.ConstructRpcClient(System.Type)">
            <summary>
            Produces a proxy that provides a strongly-typed API for invoking methods offered by the remote party.
            </summary>
            <param name="interfaceType">The interface that the returned proxy should implement.</param>
            <returns>The generated proxy.</returns>
            <remarks>
            This method may be called any number of times, but restrictions may apply after <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> is called,
            particularly when <paramref name="interfaceType" /> includes events.
            </remarks>
            <exception cref="T:System.InvalidOperationException">May be thrown when <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening" /> has already been called.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.StartListening">
            <summary>
            Begins listening for incoming messages.
            </summary>
            <remarks>
            This isn't automatic since sometimes event listeners must be wired up before messages come in that would raise those events.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.RpcConnection.Dispose">
            <summary>
            Disconnects from the RPC pipe, and disposes of managed and native resources held by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient">
            <summary>
            A caching client of the <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.ownsAuthorizationService">
            <summary>
            A value indicating whether <see cref="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizationService" /> should be disposed when this instance is disposed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.cachedAuthChecks">
            <summary>
            The set of auth checks that we have responses for.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.clientCredentials">
            <summary>
            The default value for <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> for all service requests
            that do not explicitly provide it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.#ctor(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> class.
            </summary>
            <param name="authorizationService">The client proxy of the authorization service that this instance will wrap. This will be disposed (if it implements <see cref="T:System.IDisposable" />) when this <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> is disposed.</param>
            <param name="ownsAuthorizationService"><c>true</c> to dispose of <paramref name="authorizationService" /> when this instance is disposed; otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.#ctor(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> class.
            </summary>
            <param name="authorizationService">The client proxy of the authorization service that this instance will wrap. This will be disposed (if it implements <see cref="T:System.IDisposable" />) when this <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> is disposed.</param>
            <param name="joinableTaskFactory">A means to avoid deadlocks if the authorization service requires the main thread. May be null.</param>
            <param name="ownsAuthorizationService"><c>true</c> to dispose of <paramref name="authorizationService" /> when this instance is disposed; otherwise <c>false</c>.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizationService">
            <summary>
            Gets the authorization service client proxy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.GetCredentialsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data to include in the <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> property of a service request.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A set of credentials.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when credentials are not available, are expired beyond recovery, or revoked.</exception>
            <remarks>
            If this service was created with credentials in <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            this method will return that same set or perhaps a refreshed set representing the same client.
            If this service was created without credentials, credentials are obtained from the identity running the process hosting this service.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Checks whether a previously authenticated user is authorized to perform some operation.
            </summary>
            <param name="operation">The operation to be performed.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><c>true</c> if the client is authorized to perform the <paramref name="operation" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.AuthorizeOrThrowAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Verifies that the previously authenticated user is authorized to perform some operation, or throws an exception.
            </summary>
            <param name="operation">The operation to check authorization for.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes successfully if the operation is authorized, or faults if not.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the client is not authorized to perform the <paramref name="operation" />.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceExtensions.AuthorizeOrThrowAsync(Microsoft.ServiceHub.Framework.Services.IAuthorizationService,Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Verifies that the previously authenticated user is authorized to perform some operation, or throws an exception.
            </summary>
            <param name="authorizationService">The authorization service.</param>
            <param name="operation">The operation to check authorization for.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes successfully if the operation is authorized, or faults if not.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the client is not authorized to perform the <paramref name="operation" />.</exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService">
            <summary>
            An authorization service that always returns false for authorization checks, and does not have access to any credentials.
            </summary>
            <remarks>
            This is the service to be used when a service does not have access to an <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.CredentialsChanged">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.AuthorizationChanged">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.DefaultAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService">
            <summary>
            The service contract for the <see cref="F:Microsoft.ServiceHub.Framework.FrameworkServices.Authorization" /> service.
            </summary>
            <remarks>
            For improved performance, clients may pass an instance of this interface to <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> and use that
            so that queries are locally cached.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CredentialsChanged">
            <summary>
            Occurs when the credentials previously supplied to this service are at or near expiry.
            </summary>
            <remarks>
            Handlers should request a fresh set of credentials with <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)" />
            to keep this service current and to include in future requests for other services.
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.AuthorizationChanged">
            <summary>
            Occurs when the client's set of authorized activities has changed.
            Clients that have cached previous authorization responses should invalidate the cache.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.GetCredentialsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data to include in the <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> property of a service request.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A set of credentials.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when credentials are not available, are expired beyond recovery, or revoked.</exception>
            <remarks>
            If this service was created with credentials in <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            this method will return that same set or perhaps a refreshed set representing the same client.
            If this service was created without credentials, credentials are obtained from the identity running the process hosting this service.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)">
            <summary>
            Checks whether a previously authenticated user is authorized to perform some operation.
            </summary>
            <param name="operation">The operation to be performed.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns><c>true</c> if the client is authorized to perform the <paramref name="operation" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation">
            <summary>
            Describes an operation that requires an authorization check.
            </summary>
            <seealso cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
            <param name="operationMoniker">the kind of operation to be performed.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> class.
            </summary>
            <param name="operationMoniker">the kind of operation to be performed.</param>
            <param name="requiredTrustLevel">the trust level required for the operation.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker">
            <summary>
            Gets or sets the kind of operation to be performed.
            </summary>
            <remarks>
            This may be a semi-human readable string, and is NOT intended for machine interpretation.
            Processors of this value should consider it an opaque string.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.RequiredTrustLevel">
            <summary>
            Gets or sets the trust level required for the operation.
            </summary>
            <value>May be null if not applicable (e.g. the <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker" /> of operation is simply allowed or not, without multiple degrees of trust).</value>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.Equals(Microsoft.ServiceHub.Framework.Services.ProtectedOperation)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.IsSupersetOf(Microsoft.ServiceHub.Framework.Services.ProtectedOperation)">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" />, if granted, implies another <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> should also be considered granted.
            </summary>
            <param name="other">The other operation, which may be a subset of this one.</param>
            <returns><c>true</c> if this instance is a superset of the other; <c>false</c> otherwise.</returns>
            <remarks>
            In the base implementation, a superset is considered true if the <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.OperationMoniker" /> is equal and <see cref="P:Microsoft.ServiceHub.Framework.Services.ProtectedOperation.RequiredTrustLevel" /> is equal or a greater value.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.SHostServiceBrokerFactory">
            <summary>
            Service identifier for <see cref="T:Microsoft.VisualStudio.Threading.AsyncLazy`1" /> instance that is owned by the service hub host and
            returned from <see cref="T:System.IServiceProvider" /> collection.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks">
            <summary>
            Gives a dynamic assembly the ability to skip CLR visibility checks,
            allowing the assembly to access private members of another assembly.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeBaseClassCtor">
            <summary>
            The <see cref="M:System.Attribute.#ctor" /> constructor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeUsageCtor">
            <summary>
            The <see cref="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" /> constructor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.AttributeUsageAllowMultipleProperty">
            <summary>
            The <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder">
            <summary>
            The assembly builder that is constructing the dynamic assembly.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.moduleBuilder">
            <summary>
            The module builder for the default module of the <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder" />.
            This is where the special attribute will be defined.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.attributedAssemblyNames">
            <summary>
            The set of assemblies that already have visibility checks skipped for.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.magicAttributeCtor">
            <summary>
            The constructor on the special attribute to reference for each skipped assembly.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.#ctor(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks" /> class.
            </summary>
            <param name="assemblyBuilder">The builder for the dynamic assembly.</param>
            <param name="moduleBuilder">The builder for the default module defined by <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.assemblyBuilder" />.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.GetSkipVisibilityChecksRequirements(System.Reflection.TypeInfo)">
            <summary>
            Gets the set of assemblies that a generated assembly must be granted the ability to skip visiblity checks for
            in order to access the specified type.
            </summary>
            <param name="typeInfo">The type which may be internal.</param>
            <returns>The set of names of assemblies to skip visibility checks for.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
            <summary>
            Add attributes to a dynamic assembly so that the CLR will skip visibility checks
            for the assemblies with the specified names.
            </summary>
            <param name="assemblyNames">The names of the assemblies to skip visibility checks for.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.SkipVisibilityChecksFor(System.Reflection.AssemblyName)">
            <summary>
            Add an attribute to a dynamic assembly so that the CLR will skip visibility checks
            for the assembly with the specified name.
            </summary>
            <param name="assemblyName">The name of the assembly to skip visibility checks for.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.GetMagicAttributeCtor">
            <summary>
            Gets the constructor to the IgnoresAccessChecksToAttribute, generating the attribute if necessary.
            </summary>
            <returns>The constructor to the IgnoresAccessChecksToAttribute.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.EmitMagicAttribute">
            <summary>
            Defines the special IgnoresAccessChecksToAttribute type in the <see cref="F:Microsoft.ServiceHub.Framework.SkipClrVisibilityChecks.moduleBuilder" />.
            </summary>
            <returns>The generated attribute type.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.StreamExtensions">
            <summary>
            A class containing extension methods for <see cref="T:System.IO.Stream" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Framework.StreamExtensions.TryGetHandle(System.IO.Stream,Microsoft.Win32.SafeHandles.SafePipeHandle@)">
            <summary>
            Attempts to get the handle of ServiceHub stream.
            </summary>
            <param name="stream">The stream to get the handle of.</param>
            <param name="handle">The handle of the stream if it exists, null otherweise.</param>
            <returns>True if the stream has a <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Framework.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ClientProxyTypeArgumentMustBeAnInterface">
            <summary>
              Looks up a localized string similar to "{0}" is not an interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.FormatterNotSupported">
            <summary>
              Looks up a localized string similar to The formatter "{0}" is not supported for the protocol "{1}"..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.MessageDelimiterNotSupported">
            <summary>
              Looks up a localized string similar to The message delimiter scheme "{0}" is not supported for the protocol "{1}"..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.NotInitialized">
            <summary>
              Looks up a localized string similar to This instance has not been initialized..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ProtocolNotSupported">
            <summary>
              Looks up a localized string similar to The protocol "{0}" is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.ServiceActivationFailed">
            <summary>
              Looks up a localized string similar to Activating the "{0}" service failed..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Framework.Strings.TooManyServices">
            <summary>
              Looks up a localized string similar to More than one service found for "{0}" but at most one was allowed..
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.ChannelConnectionFlags">
            <summary>
            Flags that can modify how an IPC channel connection is made.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.ChannelConnectionFlags.None">
            <summary>
            No modifier flags.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.ChannelConnectionFlags.WaitForServerToConnect">
            <summary>
            Continuously retry or wait for the server to listen for and respond to connection requests
            until it is canceled.
            Without this flag, the connection will be attempted only once and immediately fail if the
            server is not online and responsive.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.ClientConnectionCanceledException">
            <summary>
            The exception that is thrown when a client connection is canceled.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ClientConnectionCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.ClientConnectionCanceledException" /> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.NamedPipeServer">
            <summary>
            A server whose backing streams are based on named pipes. Invokes a callback when a client connects to the server.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.NamedPipeServer.TransmissionMode">
            <summary>
            The transmission mode used for the named pipes.
            </summary>
            <remarks>
            We use <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> rather than <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
            because our goal is to hide the transport from the clients and services, and <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
            behavior is a named pipe specific behavior. Unix domain sockets cannot emulate it, so if any service or client were to
            depend on the message boundaries that named pipes offered, they might malfunction on *nix platforms.
            So instead, we simply don't offer that unique behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.NamedPipeServer.#ctor(System.String,System.Diagnostics.TraceSource,System.Func{Microsoft.ServiceHub.Utility.WrappedStream,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.NamedPipeServer" /> class.
            </summary>
            <param name="channelName">The name of the named pipe.</param>
            <param name="logger">A trace source to be used for logging.</param>
            <param name="createAndConfigureService">The callback that is invoked when a client connects to the server.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.NamedPipeServer.DisposeAsyncCore">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.Server">
            <summary>
            A server that invokes a callback whenever a client connects to it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.#ctor(System.Diagnostics.TraceSource,System.Func{Microsoft.ServiceHub.Utility.WrappedStream,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.Server" /> class.
            </summary>
            <param name="logger">A trace source to be used for logging.</param>
            <param name="createAndConfigureService">The callback to be invoked when a client connects to the server.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.Server.IsDisposed">
            <summary>
            Gets a value indicating whether or not server is disposed. Used for Unit Testing.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.Server.Logger">
            <summary>
            Gets a trace source used for logging.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.Server.HasClients">
            <summary>
            Gets a value indicating whether or not clients are currently connected to the server.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <returns>A task tracking the work.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.DisposeAsyncCore">
            <summary>
            Implements the core disposal logic to be used by the class.
            </summary>
            <returns>A task tracking the work.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.ClientDisconnected(System.IO.Stream)">
            <summary>
            Method that is called when a client disconnects from the server.
            </summary>
            <param name="stream">The stream that was disconnected from.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Server.ClientConnected(Microsoft.ServiceHub.Utility.WrappedStream)">
            <summary>
            Method that is called when a client connects to the server.
            </summary>
            <param name="stream">The stream that was connected to.</param>
            <returns>A task tracking the work.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.ServerFactoryCore">
            <summary>
            Static class containing the core implementations for a server factory. This exists so that we don't run into any type errors with types that are
            shared between assemblies within DevCore. Internally in DevCore the "Core" implementation should be used while externally the public implementations are used instead.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ServerFactoryCore.Create(System.String,System.Diagnostics.TraceSource,System.Func{System.IO.Stream,System.Threading.Tasks.Task})">
            <summary>
            Creates a named pipe server.
            </summary>
            <param name="pipeName">The name of the server.</param>
            <param name="logger">The logger for the server.</param>
            <param name="createAndConfigureService">Callback function to be run whenever a client connects to the server.</param>
            <returns>
            A disposable server that should be disposed of when it is no longer needed.
            This object is also castable to <see cref="T:System.IAsyncDisposable" /> except if this method is referenced from Microsoft.ServiceHub.HostStub.dll.
            </returns>
            <remarks>This method should only ever be used on Windows platforms.</remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ServerFactoryCore.CreateOnNonWindowsAsync(System.String,System.String,System.Diagnostics.TraceSource,System.Func{System.IO.Stream,System.Threading.Tasks.Task})">
            <summary>
            Creates a named pipe server on a linux or mac machine.
            </summary>
            <param name="channelName">The multiplexed channel name to be used for the socket.</param>
            <param name="locationServiceChannelName">The base channel name to be used for the socket.</param>
            <param name="logger">The logger for the server.</param>
            <param name="createAndConfigureService">Callback function to be run whenever a client connects to the server.</param>
            <returns>The server that is to be disposed when it is no longer needed.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.UnixDomainSocketServer">
            <summary>
            A socket server to be used on Unix machines that invokes a callback whenever it is connected to.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketServer.CreateAsync(System.String,System.Diagnostics.TraceSource,System.Func{Microsoft.ServiceHub.Utility.WrappedStream,System.Threading.Tasks.Task})">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.ServiceHub.Utility.UnixDomainSocketServer" />.
            </summary>
            <param name="path">The path on disk to the socket file.</param>
            <param name="logger">The trace source to be used for logging.</param>
            <param name="createAndConfigureService">Callback function to be run whenever a client connects to the server.</param>
            <returns>The <see cref="T:Microsoft.ServiceHub.Utility.UnixDomainSocketServer" /> that was created.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketServer.DisposeAsyncCore">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketServer.ClientDisconnected(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.WrappedStream">
            <summary>
            Wraps a <see cref="P:Microsoft.ServiceHub.Utility.WrappedStream.Stream" /> making it simpler to interact with it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.WrappedStream" /> class.
            </summary>
            <param name="stream">The Stream to be wrapped.</param>
        </member>
        <member name="E:Microsoft.ServiceHub.Utility.WrappedStream.DataRead">
            <summary>
            Event that is triggered when data is read from the stream.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Utility.WrappedStream.ByteRead">
            <summary>
            Event that is triggered when a byte is read from the stream.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Utility.WrappedStream.DataWrite">
            <summary>
            Event that is triggered when data is written to the stream.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Utility.WrappedStream.ByteWrite">
            <summary>
            Event that is triggered when a byte is written to the stream.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceHub.Utility.WrappedStream.Disconnected">
            <summary>
            Event that is triggered when the stream has disconnected.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.Position">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.IsConnected">
            <summary>
            Gets a value indicating whether or not the stream has been connected to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.IsEndReached">
            <summary>
            Gets a value indicating whether or not the end of the stream has been reached.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.IsDisposed">
            <summary>
            Gets a value indicating whether the stream has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.WrappedStream.Stream">
            <summary>
            Gets the stream that is wrapped.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.GetConnected">
            <summary>
            Gets a value indicating whether or not the stream has been connected to.
            </summary>
            <returns>True if the stream is connected to, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.OnDataRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Method that is called when data is read from the stream.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.OnDataRead(System.Byte)">
            <summary>
            Method that is called when a byte is read from the stream.
            </summary>
            <param name="charCode">The byte that was read.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.OnDataWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Method that is called when data is written to the stream.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.OnDataWrite(System.Byte)">
            <summary>
            Method that is called when a byte is written to the stream.
            </summary>
            <param name="charCode">The byte that was written.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.WrappedStream.UpdateConnectedState">
            <summary>
            Updates the connected state of the <see cref="T:Microsoft.ServiceHub.Utility.WrappedStream" />.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.ServiceHubPipeStream">
            <summary>
            Wraps a stream to augment its capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ServiceHubPipeStream.#ctor(System.IO.Pipes.PipeStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.ServiceHubPipeStream" /> class.
            </summary>
            <param name="stream">The stream to be wrapped.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.ServiceHubPipeStream.SafePipeHandle">
            <summary>
            Gets the stream's <see cref="P:Microsoft.ServiceHub.Utility.ServiceHubPipeStream.SafePipeHandle" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ServiceHubPipeStream.GetConnected">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.SocketClient">
            <summary>
            Provides socket client services at a higher level
            of abstraction than the <see cref="T:System.Net.Sockets.Socket" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.SocketClient.ConnectionRetryInterval">
            <summary>
            The time to wait between repeat attempts at connecting to the server.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketClient.ConnectAsync(System.String,Microsoft.ServiceHub.Utility.ChannelConnectionFlags,System.Threading.CancellationToken)">
            <summary>
            Opens a connection to a socket.
            </summary>
            <param name="path">The endpoint of the socket to connect to.</param>
            <param name="flags">The <see cref="T:Microsoft.ServiceHub.Utility.ChannelConnectionFlags" /> used for the connection.</param>
            <param name="cancellationToken">A token whose cancellation will terminate a connection request.</param>
            <returns>A task whose result is a duplex pipe created to access the <see cref="T:System.Net.Sockets.Socket" />.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown when the connection attempt fails.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketClient.ConnectAsync(System.Net.EndPoint,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,Microsoft.ServiceHub.Utility.ChannelConnectionFlags,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Opens a connection to a socket.
            </summary>
            <param name="endPoint">The endpoint of the socket to connect to.</param>
            <param name="socketType">The type of socket to connect to.</param>
            <param name="protocolType">The type of protocol that will be used.</param>
            <param name="flags">Modifiers in the connection process.</param>
            <param name="connectionRetryInterval">The time to wait between repeat attempts at connecting to the socket.</param>
            <param name="cancellationToken">A token whose cancellation will terminate a connection request.</param>
            <returns>A task whose result is the created <see cref="T:System.Net.Sockets.Socket" />.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown when the connection attempt fails.</exception>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.SocketServer">
            <summary>
            Implements the connection logic for the socket server.
            After accepting a connection, clientConnected event is fired.
            Code taken from <see href="https://msdn.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.aspx" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketServer.CreateAsync(System.Net.EndPoint,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Func{System.Net.Sockets.Socket,System.Threading.Tasks.Task})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceHub.Utility.SocketServer" />.
            </summary>
            <param name="endPoint">The socket server's network address.</param>
            <param name="socketType">Indicates the type of socket.</param>
            <param name="protocolType">The protocol to be used by the socket.</param>
            <param name="clientConnected">Callback function to be run whenever a client connects to the socket.</param>
            <returns>The <see cref="T:Microsoft.ServiceHub.Utility.SocketServer" /> instance that was created.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketServer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketServer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <param name="disposing">Indicated whether or not managed resources should be disposed. Should be false when called from a finalizer.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.SocketServer.StartAcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Begin an operation to accept a connection request from the client.
            </summary>
            <param name="acceptEventArg">
            The context object to use when issuing the accept operation on the server's listening socket.
            </param>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint">
            <summary>
            An <see cref="T:System.Net.EndPoint" /> used to represent a Unix domain socket (i.e. a OSX/Linux equivalent of named pipes in Windows).
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.MaxPathLength">
            <summary>
            The maximum path allowed for an endpoint.
            </summary>
            <seealso href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_un.h.html">sockaddr_un.sun_path</seealso>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.Stream">
            <summary>
            The <see cref="T:System.Net.Sockets.SocketType" /> to use for this endpoint.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.Protocol">
            <summary>
            The <see cref="T:System.Net.Sockets.ProtocolType" /> to use for this endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint" /> class.
            </summary>
            <param name="path">The path to the file that represents the socket.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.#ctor(System.Net.SocketAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint" /> class.
            </summary>
            <param name="socketAddress">The address of the socket.</param>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.AddressFamily">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.IsSupported">
            <summary>
            Gets a value indicating whether Unix domain sockets are supported on the current operating system.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.Path">
            <summary>
            Gets the path to this socket.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.Serialize">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.Create(System.Net.SocketAddress)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketEndPoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.UnixDomainSocketStream">
            <summary>
            A wrapper for a socket stream to augment its capabilities.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketStream.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceHub.Utility.UnixDomainSocketStream" /> class.
            </summary>
            <param name="socket">The socket to be wrapped.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.UnixDomainSocketStream.GetConnected">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.TraceSourceExtensions">
            <summary>
            A class containing extension methods for <see cref="T:System.Diagnostics.TraceSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceException(System.Diagnostics.TraceSource,System.Exception)">
            <summary>
            Traces an exception to the trace source as an error level message.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="exception">An exception.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceException(System.Diagnostics.TraceSource,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an exception to the trace source as an error level message.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="exception">An exception.</param>
            <param name="format">Additional string to write out.</param>
            <param name="args">Arguments to be used in the format string.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceExceptionAsInformation(System.Diagnostics.TraceSource,System.Exception,System.String,System.Object[])">
            <summary>
            Traces an exception to the trace source as an information level message.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="exception">An exception.</param>
            <param name="format">Additional string to trace.</param>
            <param name="args">Arguments to be used in the format string.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Traces an error to the trace source.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceError(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Traces an error to the trace source.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="format">String to trace.</param>
            <param name="args">Arguments to be used in the format string.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Traces a warning to the trace source.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.TraceWarning(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Traces a warning to the trace source.
            </summary>
            <param name="logger">A trace source.</param>
            <param name="format">String to trace.</param>
            <param name="args">Arguments to be used in the format string.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.TraceSourceExtensions.FormatException(System.Exception,System.String,System.Object[])">
            <summary>
            Format an exception into a readable string.
            </summary>
            <param name="exception">The exception to format.</param>
            <param name="format">An additional string message to include in the string.</param>
            <param name="args">Arguments to be used in the format string.</param>
            <returns>A formatted string representing the exception.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.TraceEventId">
            <summary>
            Class containing trace event ID constants.
            We use a class with int members instead of an enum
            because then we don't have to typecast the enum to
            an int every time we want to trace an event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.TraceEventId.Unknown">
            <summary>
            An unknown trace event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.ExceptionFormatter">
            <summary>
            Extension methods that help convert exceptions to formatted strings.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ExceptionFormatter.ToStringWithInnerExceptions(System.Exception)">
            <summary>
            Converts the exception to a string, recursively expanding inner exceptions.
            </summary>
            <param name="exception">The exception to convert.</param>
            <returns>The string representation fo the exception.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.ExceptionFormatter.GetMessageWithInnerExceptions(System.Exception)">
            <summary>
            Gets the exception messages from an exception recursively looking into the inner exceptions.
            </summary>
            <param name="exception">An exception.</param>
            <returns>A formatted string with the exception messages.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.Linux.NativeMethods">
            <summary>
            NativeMethods to be used on Linux platforms.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Linux.NativeMethods.RootUserId">
            <summary>
            The root user id.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Linux.NativeMethods.getuid">
            <summary>
            Get the real user ID of the calling process.
            </summary>
            <returns>the real user ID of the calling process.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.OSX.NativeMethods">
            <summary>
            NativeMethods to be used on OSX platforms.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.OSX.NativeMethods.RootUserId">
            <summary>
            The root user id.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.OSX.NativeMethods.getuid">
            <summary>
            Get the real user ID of the calling process.
            </summary>
            <returns>the real user ID of the calling process.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.IsolatedUtilities">
            <summary>
            Contains various utility methods without any non-framework dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.RequiresNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <param name="obj">The value of the argument.</param>
            <param name="name">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.RequiresNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null,
            has no elements or has an element with a null value.
            </summary>
            <param name="obj">The value of the argument.</param>
            <param name="name">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if the tested condition is false.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.RequiresNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null, empty, or whitespace.
            </summary>
            <param name="obj">The value of the argument.</param>
            <param name="name">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="obj" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.RequiresRange(System.Boolean,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if a condition does not evaluate to true.
            </summary>
            <param name="range">A conditional statement indicating whether a range is valid.</param>
            <param name="name">The name of the parameter to include in any thrown exception.</param>
            <param name="errorMessage">The error message to us if the condition is false.</param>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.CombineRelativePath(System.String,System.String)">
            <summary>
            Combines the provided baseDirectory path with the relativePath, or return null if the relativePath is null.
            </summary>
            <param name="baseDirectory">The directory to be used as the root.</param>
            <param name="relativePath">A relative path, or null.</param>
            <returns>A combination of the baseDirectory and relativePath, or null if the relativePath is null.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.GetSHA256Hash(System.String)">
            <summary>
            Given an input calculates the SHA256 hash of it.
            </summary>
            <param name="input">The string to hash.</param>
            <returns>A hash of the input string.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.IsWindowsPlatform">
            <summary>
            Gets whether or not the current platform is Windows.
            </summary>
            <returns>True if the current platform is Windows, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.IsMacPlatform">
            <summary>
            Gets whether or not the current platform is OSX.
            </summary>
            <returns>True if the current platform is OSX, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.IsLinuxPlatform">
            <summary>
            Gets whether or not the current platform is Linux.
            </summary>
            <returns>True if the current platform is Linux, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.IsWindows7Or2008R2">
            <summary>
            Gets whether or not the current platform is Windows 7 or 2008 R2.
            </summary>
            <returns>True if the current platform is Windows 7 or 2008 R2, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.GetDevHubBaseDirForUnix">
            <summary>
            Gets the base directory to be used by ServiceHub on *nix platforms.
            </summary>
            <returns>"{userhomedir}/.ServiceHub" for *nix platforms.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.GetUnixSocketDir(System.String)">
            <summary>
            Gets a Unix socket directory.
            </summary>
            <param name="locationServiceChannelName">The channel to be used for the socket.</param>
            <returns>The socket directory.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.IsolatedUtilities.GetUnixSocketDir(System.String,System.String)">
            <summary>
            Gets a Unix socket directory.
            </summary>
            <param name="channelName">The multiplexing channel to be used for the socket.</param>
            <param name="locationServiceChannelName">The base channel to be used for the socket.</param>
            <returns>The socket directory.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.StreamExtensionsCore">
            <summary>
            A class containing the core implementations for stream extensions. This exists so that we don't run into any type errors with types that are
            shared between assemblies within DevCore. Internally in DevCore the "Core" implementation should be used while externally the public implementations are used instead.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.StreamExtensionsCore.TryGetHandleCore(System.IO.Stream,Microsoft.Win32.SafeHandles.SafePipeHandle@)">
            <summary>
            Attempts to get the handle of ServiceHub stream.
            </summary>
            <param name="stream">The stream to get the handle of.</param>
            <param name="handle">The handle of the stream if it exists, null otherwise.</param>
            <returns>True if the stream has a <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.NamedPipeClientStreamExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.NamedPipeClientStreamExtensions.NMPWAIT_NOWAIT">
            <summary>
            Does not wait for the named pipe. If the named pipe is not available, the function returns an error.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.NamedPipeClientStreamExtensions.ERROR_SEM_TIMEOUT_HRESULT">
            <summary>
            An HRESULT indicating a timeout after which we might retry.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.NamedPipeClientStreamExtensions.ConnectWithRetryAsync(System.IO.Pipes.NamedPipeClientStream,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary>
            Connects to a named pipe without spinning the CPU as <see cref="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)" /> or <see cref="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)" /> would do.
            </summary>
            <param name="npcs">The named pipe client stream to connect.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
            <param name="withSpinningWait">Whether or not the connect should be attempted with a spinning wait.
            If the pipe being connected to is known to exist, it is safe to use a spinning wait to avoid potentially throwing exceptions for retries.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that tracks the asynchronous connection attempt.</returns>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.Constants">
            <summary>
            Contains various utility constants.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubServiceLocationActivationArgument">
            <summary>
            String used to access the ServiceHubServiceLocation <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubHostGroupActivationArgument">
            <summary>
            String used to access the ServiceHubHostGroup <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubServiceModuleInfoActivationArgument">
            <summary>
            String used to access the ServiceModuleInfo <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubRemoteServiceBrokerPipeNameActivationArgument">
            <summary>
            String used to access the ServiceHubRemoteServiceBrokerPipeName <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubVersionActivationArgument">
            <summary>
            String used to access the requested <see cref="T:System.Version" /> information from <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubFriendServiceModuleInfoFormatter">
            <summary>
            String used to access the ServiceModuleInfo files of Friend services from <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubHostProcessId">
            <summary>
            String used to access the ServiceHubHostProcessId <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> activation argument. The constant is used by the VS repo indirectly
            in src\Platform\Utilities\Impl\ServiceBroker\RemoteServiceBrokerWrapper.cs.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubHostVariableActivationArgumentPrefix">
            <summary>
            String used to get variables to replace in host arguments. These are provided in ServiceActivationOptions as a hint to host that
            would host the service. Their use is optional by the host.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceHub.Utility.Shared.SharedUtilities">
            <summary>
            Utility methods for Microsoft.ServiceHub.Framework.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Shared.SharedUtilities.DeserializeServiceActivationOptions(System.String)">
            <summary>
            Deserializes a string representing a serialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> object.
            </summary>
            <param name="serializedServiceActivationOptions">Serialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</param>
            <returns>The deserialized <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</returns>
            <remarks>
            This method is invoked through reflection from Microsoft.ServiceHub.HostStub.ServiceManager.StartService.
            Having a method specifically for this avoids us having to load Newtonsoft.Json explicitly through reflection.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Shared.SharedUtilities.RemoveServiceBrokerPipeNameFromServiceActivationOptions(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Removes the <see cref="F:Microsoft.ServiceHub.Utility.Constants.ServiceHubRemoteServiceBrokerPipeNameActivationArgument" /> from the ActivationArguments of
            a <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to remove the service broker pipe name from.</param>
            <returns>The updated <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Shared.SharedUtilities.GetServiceBrokerServerPipeName(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Gets the pipe name that the <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> is available over from the <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> to get the pipe name from.</param>
            <returns>The pipe name or an empty string if there isn't one.</returns>
        </member>
        <member name="M:Microsoft.ServiceHub.Utility.Shared.SharedUtilities.AddEntryToActivationArguments(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Adds the key and value to the ActivationArguments of a <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> provided the key does not already exist within the ActivationArguments.
            </summary>
            <param name="key">The key of the argument being added to the dictionary.</param>
            <param name="value">The value of the argument being added to the dictionary.</param>
            <param name="options">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /> object that the key and value are being added to.</param>
            <returns>The updated <see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" />.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>/78TgZ9FxsIP8kMX2p0pY2+pMjzlQfXwpaBnd5wD0XY=</DigestValue></Reference></SignedInfo><SignatureValue>Pqmu08vXtUEPgeUFzXWFE3SqJq9dQ4nDk5cE+5+7934pHTDkY6j2KmyzN2j66e0Nv4zg/x0yeYLQLTb4UGq/vtElf2uziIrWxLdGl0zw6OyDpibeCYYKRdXq5P7YKEP0JukqKJwjge5m9gCQ8cO70Xg/B1mjuCZCvXal6rIkKPWkZ0Xa/Uf1hdBxotP+4EkKKcEmwTgbKmuIZtYn4mhOVby47W+/RmhvjdFDv/xqMEcNcXP0/PMol1sdJP+LSutkJMisFe1DTfeW6fKGWDV2NvniJQXzqEO09Jtbjelg0e9cG5i35DmOXiGe+ErGMZftN5NZHtKxhFJ+iLlfNvqXFw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHDDCCBPSgAwIBAgITMwAAAcUDzc0hofTvOQABAAABxTANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMjExMDQxOTAxMzJaFw0yNDAyMDIxOTAxMzJaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpERDhDLUUzMzctMkZBRTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKtIXbO9Hl9tye6WqaWil0Yc/k0+ySdzr1X9/jfHzacUbOY2OIRL9wVf8ORFl22XTuJt8Y9NZUyP8Q5KvsrY7oj3vMRl7GcQ57b+y9RMzHeYyEqifnmLvJIFdOepqrPHQaOecWTzz3MX+btfc59OGjEBeT11fwuGS0oxWvSBTXK4m3Tpt5Rlta0ERWto1LLqeoL+t+KuVMB9PVhhrtM/PUW7W8jOeb5gYFlfHnem2Qma3KGCIzC/BUU7xpc56puh7cGXVzMCh092v5C1Ej4hgLKyIBM8+zaQaXjrILPU68Mlk2QTWwcMiAApkN+I/rkeHrdoWZPjR+PSoRCcmA9vnTiGgxgdhFDRUmHMtTJILWbdXkagQdJvmD2M+x46HD8pCmDUGe07/s4JTn3womsdYzm9LuiGAuV9Sa/AME3LGg8rt6gIcfHBUDfQw4IlWcPlERWfKMqA5OrCFdZ8ec2S8voTbWpHj1/Uu2PJ9alnwI6FzxOitP3W08POxDiS/wZSRnCqBU8ra9Mz4PzDSUm+n9mv8A5F6BghliYkKxk8Yzj/kfev5yCBtOXhNS6ZMthTnWDDweA4Vu7QXWWrrXqU07koZoJ/hihEfAKANYEkpNRAuWV+HKaVZ4CaW5TAbvK/7QoXx1XV74mOoQ0oR8EApmamXm4EmB5x5eLqxPuCumQvAgMBAAGjggE2MIIBMjAdBgNVHQ4EFgQUVOq7OL9ZsTWBv67aS8K1cHpNBWswHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEAjKjefH6zBzknHIivgnZ6+nSvH07IEA3mfW70IwrsTSCWSfdvsaXikQn916uO6nUcpJClJ2QunR4S8LdX4cMosvy33VUPcn9YWGf0aU0vs9IZ2qCvj/yAwIlDZt9jVy4QwbtD+Em/7gleIzrjVHJiYaaQUIEFYRcf+eyWJNSwnYyHnv/xq3H25ELYmKG/Tmvdw0o27A9Y6monBJ5HJVDf5hJvWbJwpwNfvzkA6f/EOHD3x/eCzOCel9DbTQXlcsL1h9MLjGjicx4AywniVJBRPRxPLAQ1XnZo+szyQCPu6My42KsO4uERW4krX1mUho8LfpSyUGUVlAnE92h2L06NWFg2bJKIVoO+8PXxdkG4jvQ356qGe0KMx4u0Yj6W44JCTAIa4aXk3/2rdnvfh2JCjm1JoDwKx9Vo4r8JtXez2FrGqy+7uambpN+hm9ZhE0taANl19/gt64Lc0aIT/PamVX+/ZVb45oN+DbSAiv6TJPfUgbrYIbYqRUjEHW11J0tqHi7fXCrr9TCbvoCfN6l0zZENkKocbTUb2xPUKpqiUMOVVv+Emc3taT18cjkzucg6vokSFLm6nkM5lHApIsjbgix1ofDiwiOZiDgtYi7VQ39pcPXlq6KcLuUgybU/2cKiFNam9lPjY5DXI9YWzgwURC2k01nfdUSYlCPZ3CZBoP4=</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
