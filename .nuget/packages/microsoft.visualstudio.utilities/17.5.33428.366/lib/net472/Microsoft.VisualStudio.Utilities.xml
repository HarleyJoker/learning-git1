<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Utilities</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.StartActivityExtension">
            <summary>
            Extensions to <see cref="T:System.Diagnostics.TraceSource" /> for activity tracing.
            </summary>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <summary>
            Starts a new activity scope.
            </summary>
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String,System.Object[])" />
            <returns>A value to dispose to end the activity.</returns>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String)">
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.StartActivity(System.Diagnostics.TraceSource,System.String,System.Object[])" />
        </member>
        <member name="T:System.Diagnostics.StartActivityExtension.TraceActivity">
            <remarks>
            In order for activity tracing to happen, the <see cref="T:System.Diagnostics.TraceSource" /> needs to
            have <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" /> enabled.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StartActivityExtension.TraceActivity" /> struct
            and applies the new activity to the <see cref="P:System.Diagnostics.Trace.CorrelationManager" />.
            </summary>
            <param name="traceSource">
            The <see cref="T:System.Diagnostics.TraceSource" /> that will receive the <see cref="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)" />, start and stop activity logs.
            Activity tracing requires that the <see cref="P:System.Diagnostics.TraceSource.Switch" /> property of this object must have its <see cref="P:System.Diagnostics.TraceSwitch.Level" /> property set to include <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" />.
            </param>
            <param name="displayName">The activity name.</param>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String,System.Object[])">
            <inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)" />
            <param name="traceSource"><inheritdoc cref="M:System.Diagnostics.StartActivityExtension.TraceActivity.#ctor(System.Diagnostics.TraceSource,System.String)" path="/param[@name='traceSource']" /></param>
            <param name="displayNameFormat">The format for the activity name.</param>
            <param name="displayNameFormattingArgs">Formatting args for the <paramref name="displayNameFormat" /> string.</param>
        </member>
        <member name="P:System.Diagnostics.StartActivityExtension.TraceActivity.DisplayName">
            <summary>
            Gets the display name for this activity.
            </summary>
        </member>
        <member name="P:System.Diagnostics.StartActivityExtension.TraceActivity.Id">
            <summary>
            Gets the activity ID which is set to <see cref="P:System.Diagnostics.CorrelationManager.ActivityId" /> when this activity is on the top of the activity stack.
            </summary>
        </member>
        <member name="M:System.Diagnostics.StartActivityExtension.TraceActivity.Dispose">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Accelerator">
            <summary>
            Utility methods for dealing with keyboard accelerators.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String)">
            <summary>
            <para>
            Strips non-escaped accelerator markers ('&amp;') from the given string
            using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:
            </para>
            <para>
            Strip odd '&amp;' chars from the string.  As per DrawText,
            consecutive pairs of '&amp;'s will leave a real '&amp;' character, and all
            odd '&amp;'s are removed even though only the last may be underlined.
            </para>
            <para>
            If an '&amp;' occurs inside of parens then the parens and the character following
            the '&amp;' are also stripped out. This is useful to remove accelarator strings of
            format (&amp;N) which are appended to label in some FE language versions.
            </para>
            <para>
            NOTE: We do not check for language to do this i.e. we assume that there isn't
            any realistic label in other languages with (&amp;N) stuck in.
            </para>
            </summary>
            <param name="input">String to strip.</param>
            <returns><paramref name="input" /> stripped of accelerators.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String,System.Char)">
            <summary>
            <para>
            Strips non-escaped accelerator markers from the given string
            using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:
            </para>
            <para>
            Strip odd chars that match <paramref name="accessSpecifier" /> from the string. 
            As per DrawText, consecutive pairs of characters matching <paramref name="accessSpecifier" />
            will leave a single character matching <paramref name="accessSpecifier" />, and all odd 
            characters matching <paramref name="accessSpecifier" /> are removed even though only the last 
            may be underlined.
            </para>
            <para>
            If a character matching <paramref name="accessSpecifier" /> occurs inside of parens then the parens 
            and the character following the <paramref name="accessSpecifier" /> matching character are also 
            stripped out. This is useful to remove accelarator strings of format (%accessSpecifier%N) which 
            are appended to label in some FE language versions.
            </para>
            <para>
            NOTE: We do not check for language to do this i.e. we assume that there isn't
            any realistic label in other languages with (%accessSpecifier%N) stuck in.
            </para>
            </summary>
            <param name="input">String to strip.</param>
            <param name="accessSpecifier">Specifies the character to treat as an access key specifier.</param>
            <returns><paramref name="input" /> stripped of accelerators.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.StripAccelerators(System.String,System.Object)">
            <summary>
            Returns the input string with the specified access key specifier stripped
            </summary>
            <param name="input">String to strip of access key specifiers</param>
            <param name="accessKeySpecifier">Character to strip</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Accelerator.AccessKeySpecifierFromObject(System.Object)">
            <summary>
            Converts the input object into an access key specifier.  Objects
            of type char or single-character strings can be converted.  If an
            object of a different type is passed in, &amp; is returned.
            </summary>
            <param name="accessKeySpecifier">Object to convert</param>
            <returns>Access key specifier from <paramref name="accessKeySpecifier" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.SByte,System.Int32)">
            <summary>
            Rotates the bits of a signed byte value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Byte,System.Int32)">
            <summary>
            Rotates the bits of an unsigned byte value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.SByte,System.Int32)">
            <summary>
            Rotates the bits of a signed byte value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Byte,System.Int32)">
            <summary>
            Rotates the bits of an unsigned byte value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int16,System.Int32)">
            <summary>
            Rotates the bits of a signed short value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt16,System.Int32)">
            <summary>
            Rotates the bits of an unsigned short value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int16,System.Int32)">
            <summary>
            Rotates the bits of a signed short value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt16,System.Int32)">
            <summary>
            Rotates the bits of an unsigned short value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int32,System.Int32)">
            <summary>
            Rotates the bits of a signed int value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the bits of an unsigned int value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int32,System.Int32)">
            <summary>
            Rotates the bits of a signed int value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt32,System.Int32)">
            <summary>
            Rotates the bits of an unsigned int value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.Int64,System.Int32)">
            <summary>
            Rotates the bits of a signed long value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Rotates the bits of an unsigned long value to the left
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.Int64,System.Int32)">
            <summary>
            Rotates the bits of a signed long value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BitRotator.RotateRight(System.UInt64,System.Int32)">
            <summary>
            Rotates the bits of an unsigned long value to the right
            </summary>
            <param name="value">The value to rotate</param>
            <param name="count">The number of positions to rotate</param>
            <returns>The rotated value</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.CircularBuffer`1">
            <inheritdoc />
            <summary>
            Circular buffer.  Given a fixed size, fills to capacity and
            then overwrites earliest item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.CommandIdAttribute">
            <summary>
            A metadata attribute identifying a Visual Studio command by its GUID and ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.CommandIdAttribute.CommandSetGuid">
            <summary>
            A command set the command belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.CommandIdAttribute.CommandId">
            <summary>
            A command ID in the command set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.CommandIdAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.CommandIdAttribute" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.CustomStringComparers.LogicalIgnoreCase">
            <summary>
            A string comparer that performs a case-insensitive logical string comparison.
            A logical comparison treates consecutive digits in the string as numerical
            content rather than text.
            </summary>
            <remarks>
            See https://docs.microsoft.com/en-us/windows/desktop/api/shlwapi/nf-shlwapi-strcmplogicalw.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DpiAwareness">
            <summary>
            A static helper class that contains APIs for performing various DPI scaling and context
            switching operations.
            </summary>
            <summary>
            A static helper class that contains APIs for performing various DPI scaling and context
            switching operations.
            </summary>
            <summary>
            A static helper class that contains APIs for performing various DPI scaling and context
            switching operations.
            </summary>
            <summary>
            A static helper class that contains APIs for performing various DPI scaling and context
            switching operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.IsPerMonitorAwarenessEnabled">
            <summary>
            Get whether or not Per-Monitor DPI awareness is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.ProcessDpiAwarenessContext">
            <summary>
            Gets the process's DPI awareness context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.SystemDpiX">
            <summary>
            The x-coordinate (or horizontal) DPI of the system's primary display.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.SystemDpiY">
            <summary>
            The y-coordinate (or vertical) DPI of the system's primary display.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.SystemDpiXScale">
            <summary>
            The x-coordinate (or horizontal) DPI scale of the system's primary display.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwareness.SystemDpiYScale">
            <summary>
            The y-coordinate (or vertical) DPI scale of the system's primary display.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.IsValidDpi(System.Double)">
            <summary>
            Determines if <paramref name="dpi" /> is a valid DPI value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetSystemDpi(System.Boolean)">
            <summary>
            Gets the System DPI from the DeviceCaps.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DpiAwareness.Validate">
            <summary>
            Private version of the Validate class from MS.VS.Utilities, reproduced for use in
            <see cref="T:Microsoft.VisualStudio.Utilities.DpiAwareness" /> so we don't have to pull the full Validate class into
            Microsoft.VisualStudio.DpiAwareness.dll and risk introducing redundant types
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.EnterDpiScope(Microsoft.VisualStudio.Utilities.DpiAwarenessContext)">
            <summary>
            Enters a scope during which the current thread's DPI awareness context is set to
            <paramref name="awareness" />.
            </summary>
            <param name="awareness">The new DPI awareness for the current thread.</param>
            <returns>
            An object that, when disposed, will reset the current thread's DPI awareness to the
            value it had when the object was created.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.EnterDpiScope(System.IntPtr)">
            <summary>
            Enters a scope during which the current thread's DPI awareness context is set to
            match the DPI awareness context of the given <paramref name="hwnd" />.
            </summary>
            <param name="hwnd">The window whose DPI awareness to match.</param>
            <returns>
            An object that, when disposed, will reset the current thread's DPI awareness to the
            value it had when the object was created.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DpiAwareness.DpiScope">
            <summary>
            A helper class used to change the current thread's DPI awareness context upon creation
            and to restore the previous DPI awareness context upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetMonitorDpi(System.IntPtr,System.Double@,System.Double@)">
            <summary>
            Gets the DPI of the given monitor.
            </summary>
            <param name="hmonitor">
            The <see cref="T:System.IntPtr" /> of the monitor from which to get the DPI.
            </param>
            <param name="dpiX">The monitor's x-coordinate (or horizontal) DPI.</param>
            <param name="dpiY">The monitor's y-coordinate (or vertical) DPI.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetMonitorDpiScale(System.IntPtr,System.Double@,System.Double@)">
            <summary>
            Gets the DPI scale of the given monitor.
            </summary>
            <param name="hmonitor">
            The <see cref="T:System.IntPtr" /> of the monitor from which to get the DPI scale.
            </param>
            <param name="dpiXScale">The monitor's x-coordinate (or horizontal) DPI scale.</param>
            <param name="dpiYScale">The monitor's y-coordinate (or vertical) DPI scale.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetWindowDpi(System.IntPtr)">
            <summary>
            Gets the DPI of the given window.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window from which to get the DPI.
            </param>
            <returns>The window's DPI.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetWindowDpiScale(System.IntPtr)">
            <summary>
            Gets the DPI scale of the given window.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window from which to get the DPI scale.
            </param>
            <returns>The window's DPI scale.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiAwarenessContext(System.IntPtr)">
            <summary>
            Gets the DPI awareness context of the given window.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window from which to get the DPI awareness context.
            </param>
            <returns>The window's DPI awareness context.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Drawing.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Point" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalPoint(System.IntPtr,System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Windows.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Point" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Rectangle" />.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.IntPtr,System.Windows.Rect)">
            <summary>
            Converts a <see cref="T:System.Windows.Rect" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Rect" />.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            Converts a window's bounding rectangle from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> in logical units.</param>
            <returns>True if the conversion succeeded, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.IntPtr,System.Windows.Rect@)">
            <summary>
            Converts a window's bounding rectangle from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> in logical units.</param>
            <returns>True if the conversion succeeded, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalSize(System.IntPtr,System.Drawing.Size)">
            <summary>
            Converts a <see cref="T:System.Drawing.Size" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Drawing.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Size" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalSize(System.IntPtr,System.Windows.Size)">
            <summary>
            Converts a <see cref="T:System.Windows.Size" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Windows.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Size" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.Int16)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.UInt16)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.Int32)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.UInt32)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.Int64)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.UInt64)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.Single)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.IntPtr,System.Double)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given value.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalVector(System.IntPtr,System.Windows.Vector)">
            <summary>
            Converts a <see cref="T:System.Windows.Vector" /> from device units to logical units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Vector" />.
            </param>
            <param name="vector">The <see cref="T:System.Windows.Vector" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Vector" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDevicePoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Drawing.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Point" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDevicePoint(System.IntPtr,System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Windows.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Point" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Rectangle" />.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.IntPtr,System.Windows.Rect)">
            <summary>
            Converts a <see cref="T:System.Windows.Rect" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Rect" />.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            Converts a window's bounding rectangle from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> in device units.</param>
            <returns>True if the conversion succeeded, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.IntPtr,System.Windows.Rect@)">
            <summary>
            Converts a window's bounding rectangle from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> in device units.</param>
            <returns>True if the conversion succeeded, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceSize(System.IntPtr,System.Drawing.Size)">
            <summary>
            Converts a <see cref="T:System.Drawing.Size" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Drawing.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Drawing.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Size" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceSize(System.IntPtr,System.Windows.Size)">
            <summary>
            Converts a <see cref="T:System.Windows.Size" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Windows.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Size" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.Int16)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.UInt16)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.Int32)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.UInt32)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.Int64)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.UInt64)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.Single)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.IntPtr,System.Double)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window whose bounding rectangle to convert.
            </param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceVector(System.IntPtr,System.Windows.Vector)">
            <summary>
            Converts a <see cref="T:System.Windows.Vector" /> from logical units to device units.
            </summary>
            <param name="hwnd">
            The <see cref="T:System.IntPtr" /> of the window with which to convert the given
            <see cref="T:System.Windows.Vector" />.
            </param>
            <param name="vector">The <see cref="T:System.Windows.Vector" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Vector" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiForMonitor(System.IntPtr)">
            <summary>
            Gets the DPI from the given's <see cref="T:System.IntPtr" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.ValidateIntPtr(System.IntPtr,System.String)">
            <summary>
            Validates that an IntPtr is not equal to IntPtr.Zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits``1(System.IntPtr,``0)">
            <summary>
            Converts a value from device units to logical units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits``1(System.IntPtr,``0)">
            <summary>
            Converts a value from logical units to device units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyDeviceDpiProperty">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpi(System.Windows.Forms.Control)">
            <summary>
            Gets the DPI of the given <see cref="T:System.Windows.Forms.Control" />.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> from which to get the DPI.</param>
            <returns>The <see cref="T:System.Windows.Forms.Control" />'s DPI.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiScale(System.Windows.Forms.Control)">
            <summary>
            Gets the DPI scale of the given <see cref="T:System.Windows.Forms.Control" />.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> from which to get the DPI scale.</param>
            <returns>The <see cref="T:System.Windows.Forms.Control" />'s DPI scale.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalPoint(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point" /> from device units to logical units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Drawing.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Point" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> from device units to logical units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Rectangle" />.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.Windows.Forms.Control)">
            <summary>
            Converts a <see cref="T:System.Windows.Forms.Control" /> <see cref="T:System.Drawing.Rectangle" /> from device units to logical units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> whose bounding <see cref="T:System.Drawing.Rectangle" /> to convert.
            </param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Converts a <see cref="T:System.Drawing.Size" /> from device units to logical units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Drawing.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Size" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.Int16)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.UInt16)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.UInt32)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.Int64)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.UInt64)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.Single)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits(System.Windows.Forms.Control,System.Double)">
            <summary>
            Converts an value from device units to logical units.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDevicePoint(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point" /> from logical units to device units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Drawing.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Point" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle" /> from logical units to device units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Rectangle" />.
            </param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.Windows.Forms.Control)">
            <summary>
            Converts a <see cref="T:System.Windows.Forms.Control" /> <see cref="T:System.Drawing.Rectangle" /> from logical units to device units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> whose bounding <see cref="T:System.Drawing.Rectangle" /> to convert.
            </param>
            <returns>A new <see cref="T:System.Drawing.Rectangle" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point" /> from logical units to device units.
            </summary>
            <param name="control">
            The <see cref="T:System.Windows.Forms.Control" /> with which to convert the given <see cref="T:System.Drawing.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Drawing.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Size" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.Int16)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.UInt16)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.UInt32)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.Int64)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.UInt64)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.Single)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits(System.Windows.Forms.Control,System.Double)">
            <summary>
            Converts an value from logical units to device units.
            </summary>
            <param name="control">The control with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits``1(System.Windows.Forms.Control,``0)">
            <summary>
            Converts a value from device units to logical units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits``1(System.Windows.Forms.Control,``0)">
            <summary>
            Converts a value from logical units to device units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDeviceDpiPropertyValue(System.Windows.Forms.Control,System.Reflection.PropertyInfo)">
             <summary>
             Gets the value of the given DeviceDpi property. The DeviceDpi is a double, so there's
             no need for a generic return type in this case.
             </summary>
             <remarks>
             This method uses reflection since the assembly cannot currently build against the .NET
             bits that contain the required APIs. Once the assembly can build against the required
             APIs, this helper can be removed.
            
             It's the logical equivalent of:
               Control.DeviceDpi
             </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyGetDpiMethod">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyDpiScaleXProperty">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyDpiScaleYProperty">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyPixelsPerInchXProperty">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwareness.LazyPixelsPerInchYProperty">
            <summary>
            Reflection is needed here since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiX(System.Windows.Media.Visual)">
            <summary>
            Gets the x-coordinate (or horizontal) DPI of the given <see cref="T:System.Windows.Media.Visual" />.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> from which to get the DPI.</param>
            <returns>The <see cref="T:System.Windows.Media.Visual" />'s DPI.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiXScale(System.Windows.Media.Visual)">
            <summary>
            Gets the x-coordinate (or horizontal) DPI scale of the given <see cref="T:System.Windows.Media.Visual" />.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> from which to get the DPI scale.</param>
            <returns>The <see cref="T:System.Windows.Media.Visual" />'s DPI scale.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiY(System.Windows.Media.Visual)">
            <summary>
            Gets the y-coordinate (or vertical) DPI of the given <see cref="T:System.Windows.Media.Visual" />.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> from which to get the DPI.</param>
            <returns>The <see cref="T:System.Windows.Media.Visual" />'s DPI.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiYScale(System.Windows.Media.Visual)">
            <summary>
            Gets the y-coordinate (or vertical) DPI scale of the given <see cref="T:System.Windows.Media.Visual" />.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> from which to get the DPI scale.</param>
            <returns>The <see cref="T:System.Windows.Media.Visual" />'s DPI scale.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalPoint(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> from device units to logical units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Windows.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Point" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Converts a <see cref="T:System.Windows.Rect" /> from device units to logical units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Rect" />.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalRect(System.Windows.Window)">
            <summary>
            Converts a <see cref="T:System.Windows.Window" /> <see cref="T:System.Windows.Rect" /> from device units to logical units.
            </summary>
            <param name="window">
            The <see cref="T:System.Windows.Window" /> whose bounding <see cref="T:System.Windows.Rect" /> to convert.
            </param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalSize(System.Windows.Media.Visual,System.Windows.Size)">
            <summary>
            Converts a <see cref="T:System.Windows.Size" /> from device units to logical units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Windows.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Size" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.Int16)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.UInt16)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.UInt32)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.Int64)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.UInt64)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.Single)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX(System.Windows.Media.Visual,System.Double)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.Int16)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.UInt16)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.UInt32)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.Int64)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.UInt64)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.Single)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY(System.Windows.Media.Visual,System.Double)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
            <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a logical unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalVector(System.Windows.Media.Visual,System.Windows.Vector)">
            <summary>
            Converts a <see cref="T:System.Windows.Vector" /> from device units to logical units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Vector" />.
            </param>
            <param name="vector">The <see cref="T:System.Windows.Vector" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Vector" /> in logical units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDevicePoint(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> from logical units to device units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Point" />.
            </param>
            <param name="point">The <see cref="T:System.Windows.Point" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Point" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Converts a <see cref="T:System.Windows.Rect" /> from logical units to device units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Rect" />.
            </param>
            <param name="rect">The <see cref="T:System.Windows.Rect" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceRect(System.Windows.Window)">
            <summary>
            Converts a <see cref="T:System.Windows.Window" /> <see cref="T:System.Windows.Rect" /> from logical units to device units.
            </summary>
            <param name="window">
            The <see cref="T:System.Windows.Window" /> whose bounding <see cref="T:System.Windows.Rect" /> to convert.
            </param>
            <returns>A new <see cref="T:System.Windows.Rect" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceSize(System.Windows.Media.Visual,System.Windows.Size)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> from logical units to device units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Size" />.
            </param>
            <param name="size">The <see cref="T:System.Windows.Size" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Size" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.Int16)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.UInt16)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.UInt32)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.Int64)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.UInt64)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.Single)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX(System.Windows.Media.Visual,System.Double)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.Int16)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.UInt16)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.UInt32)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.Int64)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.UInt64)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.Single)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY(System.Windows.Media.Visual,System.Double)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
            <param name="visual">The visual with which to convert the given value.</param>
            <param name="value">The value to convert.</param>
            <returns>The value as a device unit.</returns>
            <remarks>
            Non-floating-point overloads will peform nearest value rounding as opposed to floor
            rounding because it allows for more accurate rounding-tripping of values when
            converting back and forth between logical and device units.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceVector(System.Windows.Media.Visual,System.Windows.Vector)">
            <summary>
            Converts a <see cref="T:System.Windows.Vector" /> from logical units to device units.
            </summary>
            <param name="visual">
            The <see cref="T:System.Windows.Media.Visual" /> with which to convert the given <see cref="T:System.Windows.Vector" />.
            </param>
            <param name="vector">The <see cref="T:System.Windows.Vector" /> to convert.</param>
            <returns>A new <see cref="T:System.Windows.Vector" /> in device units.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.HookDpiChanged(System.Windows.Interop.HwndHost,System.Windows.RoutedEventHandler)">
            <summary>
            Hooks up the given callback to the given <see cref="T:System.Windows.Interop.HwndHost" />.
            </summary>
            <param name="hwndHost">The control whose DpiChanged event to hook.</param>
            <param name="callback">
            The <see cref="T:System.Windows.RoutedEventHandler" /> delegate to call when a DpiChanged event is
            triggered.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.HookDpiChanged(System.Windows.Controls.Image,System.Windows.RoutedEventHandler)">
            <summary>
            Hooks up the given callback to the given <see cref="T:System.Windows.Controls.Image" />.
            </summary>
            <param name="image">The control whose DpiChanged event to hook.</param>
            <param name="callback">
            The <see cref="T:System.Windows.RoutedEventHandler" /> delegate to call when a DpiChanged event is
            triggered.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.HookDpiChanged(System.Windows.Window,System.Windows.RoutedEventHandler)">
            <summary>
            Hooks up the given callback to the given <see cref="T:System.Windows.Window" />.
            </summary>
            <param name="window">The control whose DpiChanged event to hook.</param>
            <param name="callback">
            The <see cref="T:System.Windows.RoutedEventHandler" /> delegate to call when a DpiChanged event is
            triggered.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsX``1(System.Windows.Media.Visual,``0)">
            <summary>
            Converts an x-coordinate (or horizontal) value from device units to logical units.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnitsY``1(System.Windows.Media.Visual,``0)">
            <summary>
            Converts a y-coordinate (or vertical) value from device units to logical units.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.DeviceToLogicalUnits``1(System.Windows.Media.Visual,``0,System.Boolean)">
            <summary>
            Converts a value from device units to logical units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsX``1(System.Windows.Media.Visual,``0)">
            <summary>
            Converts an x-coordinate (or horizontal) value from logical units to device units.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnitsY``1(System.Windows.Media.Visual,``0)">
            <summary>
            Converts a y-coordinate (or vertical) value from logical units to device units.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.LogicalToDeviceUnits``1(System.Windows.Media.Visual,``0,System.Boolean)">
            <summary>
            Converts a value from logical units to device units.
            </summary>
            <remarks>
            Convert.ChangeType will end up performing nearest element rounding for
            non-floating-point types.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpi(System.Windows.Media.Visual,System.Boolean)">
             <summary>
             Gets the DPI for the x-coordinate (or horizontal) plane.
             </summary>
             <remarks>
             This method uses reflection since the assembly cannot currently build against the .NET
             bits that contain the required APIs.
            
             When in Per-Monitor awareness it's the logical equivalent of:
               VisualTreeHelper.GetDpi(visual).PixelsPerInchX
               or
               VisualTreeHelper.GetDpi(visual).PixelsPerInchY
            
             When in System awareness it's the equivalent of:
               DpiHelper.DeviceDpiX
               or
               DpiHelper.DeviceDpiY
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiScale(System.Windows.Media.Visual,System.Boolean)">
             <summary>
             Gets the DPI scale for the given visual.
             </summary>
             <remarks>
             This method uses reflection since the assembly cannot currently build against the .NET
             bits that contain the required APIs. Once the assembly can build against the required
             APIs, this helper can be removed.
            
             When in Per-Monitor awareness it's the logical equivalent of:
               VisualTreeHelper.GetDpi(visual).DpiScaleX
               or
               VisualTreeHelper.GetDpi(visual).DpiScaleY
            
             When in System awareness it's the equivalent of:
               DpiHelper.LogicalToDeviceUnitsScalingFactorX
               or
               DpiHelper.LogicalToDeviceUnitsScalingFactorY
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiScaleObject(System.Windows.Media.Visual)">
             <summary>
             Gets the DpiScale for the given Visual.
             </summary>
             <remarks>
             This method uses reflection since the assembly cannot currently build against the .NET
             bits that contain the required APIs. Once the assembly can build against the required
             APIs, this helper can be removed.
            
             It's the logical equivalent of:
               VisualTreeHelper.GetDpi(visual)
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiScalePropertyValue(System.Reflection.PropertyInfo,System.Object)">
             <summary>
             Gets the value of the given DpiScale property. The DpiScale struct only has double
             properties, so there's no need for a generic return type in this case.
             </summary>
             <remarks>
             This method uses reflection since the assembly cannot currently build against the .NET
             bits that contain the required APIs. Once the assembly can build against the required
             APIs, this helper can be removed.
            
             It's the logical equivalent of:
               VisualTreeHelper.GetDpi(visual).SomeProperty
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.GetDpiScaleProperty(System.String)">
            <summary>
            Gets the PropertyInfo for the given DpiScale property.
            </summary>
            <remarks>
            This method uses reflection since the assembly cannot currently build against the .NET
            bits that contain the required APIs. Once the assembly can build against the required
            APIs, this helper can be removed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DpiAwareness.HookDpiChanged``1(``0,System.Windows.RoutedEventHandler)">
            <summary>
            Hooks up the given callback to the given element's DpiChanged event.
            </summary>
            <remarks>
            This methods uses reflection since no assembly can currently build against the .NET bits
            that contain the required APIs. Once the assemblies can build against the required APIs,
            this helper can be removed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DpiAwarenessContext">
            <summary>
            Identifies the DPI awareness context for a window.
            </summary>
            <remarks>
            The values for this enum come from:
            https://docs.microsoft.com/en-us/windows/desktop/hidpi/dpi-awareness-context
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwarenessContext.Unaware">
            <summary>
            This window does not scale for DPI changes and is always assumed to have a scale factor of
            100% (96 DPI). It will be automatically scaled by the system on any other DPI setting.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwarenessContext.SystemAware">
            <summary>
            This window does not scale for DPI changes. It will query for the DPI once and use that
            value for the lifetime of the process. If the DPI changes, the process will not adjust to
            the new DPI value. It will be automatically scaled up or down by the system when the DPI
            changes from the system value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwarenessContext.PerMonitorAware">
            <summary>
            This window checks for the DPI when it is created and adjusts the scale factor whenever the
            DPI changes. These processes are not automatically scaled by the system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.DpiAwarenessContext.PerMonitorAwareV2">
            <summary>
            An advancement over the original Per-Monitor DPI awareness mode, which enables applications
            to access new DPI-related scaling behaviors on a per top-level window basis. This mode should
            almost always be preferred over PerMonitorAware.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DpiAwarenessResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Error_DpiAwarenessThreadChanged">
            <summary>
              Looks up a localized string similar to The DPI awareness context must be restored on the same thread on which it was set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Error_DpiInvalid">
            <summary>
              Looks up a localized string similar to The DPI must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Error_DpiScaleInvalid">
            <summary>
              Looks up a localized string similar to The DPI scale must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Error_DpiScaleObjectNull">
            <summary>
              Looks up a localized string similar to The DpiScale object cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DpiAwarenessResources.Error_DpiWindowInvalid">
            <summary>
              Looks up a localized string similar to Cannot get the DPI of an invalid window..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.MonitorDpiAwarenessException.MonitorHandle">
            <summary>
            The HMONITOR for the monitor that was passed to the Win32 DPI-awareness API
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Win32DpiAwarenessException.DpiMethodResult">
            <summary>
            The HRESULT returned by the Win32 DPI-awareness API.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.WindowDpiAwarenessException.WindowHandle">
            <summary>
            The HWND for the window that was passed to the Win32 DPI-awareness API
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper">
             <summary>
             Helper class for scaling coordinates and images according to current DPI scaling set in Windows for the screen.
            
             This class can be used in assemblies that can't take a dependency on Microsoft.VisualStudio.Shell.14.0 (or later)
             This class doesn't use any VS-specific interfaces or services.
            
             The code running in Visual Studio or other appids should not be using this class. Instead, it should use the static
             DpiHelper class from Microsoft.VisualStudio.PlatformUI namespace from the VS Framework assembliy.
            
             Usually the code needing Dpi scaling functionality provided by this class will want to access it by calling the
             members of the static DpiHelper.Default instance.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.Default">
            <summary>
            Returns a DpiHelper class suitable for scaling images designed for 100% DPI zoom levels (96dpi).
            The static member can be used in bindings like DpiHelper.Default.BitmapScalingMode or direct
            properties/methods calls like DpiHelper.Default.LogicalToDevicePixels(), similar to the way the
            static class DpiHelper in Microsoft.VisualStudio.PlatformUI namespace can be used in VS-specific
            assemblies to bind to DpiHelper.BitmapScalingMode or call DpiHelper.LogicalToDevicePixels()
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetHelper(System.Int32)">
            <summary>
            Returns a DpiHelper that can scale images created for the specified DPI zoom factor.
            E.g. If you have images that were designed for multiple resolutions (e.g. one image for 96dpi,
            other for 192dpi, etc), and need to use the 192dpi image to scale it to the actual display DPI,
            you'll need to call GetHelper(200) to get a DpiHelper that will scale correctly that image.
            </summary>
            <param name="zoomPercent">Zoom factor for original images</param>
            <returns>The scaling helper</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.#ctor(System.Double)">
            <summary>
            Protected constructor.
            To use the functionality of this clas, use DpiHelper.Default or call DpiHelper.GetHelper() public methods.
            </summary>
            <param name="logicalDpi">The logical DPI for which the helper should be created</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDefaultImageScalingMode(System.Int32)">
            <summary>
            Retuns the default/shell preference for the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDefaultBitmapScalingMode(System.Int32)">
            <summary>
            Retuns the default/shell preference for the BitmapScalingMode algorithm to be used for resizing images in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.ImageScalingMode">
            <summary>
            Retuns the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\ImageScalingXXX = (ImageScalingMode)value, with XXX the zoom factor in percents, e.g. ImageScaling150, etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetInterpolationMode(Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Returns the interpolation mode to be used for the specified image scaling mode
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetActualScalingMode(Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Returns the actual scaling mode to be used for the specified suggested mode
            </summary>
            <param name="scalingMode">Suggested scaling mode</param>
            <returns>Actual scaling mode</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.BitmapScalingMode">
            <summary>
            Retuns the BitmapScalingMode algorithm to be used for resizing images in WPF.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\BitmapScalingXXX = (BitmapScalingMode)value, with XXX the zoom factor in percents, e.g. BitmapScaling150, etc.
            Note that for WPF scaling, there is an additional registry value that applies for zoom factors &gt; 200%, UseBitmapPreScalingXXX
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.UsePreScaledImages">
            <summary>
            Returns whether images should be pre-scaled at zoom levels higher than 200%, using NearestNeighbor up to the largest multiple of 100%
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceDpiX">
            <summary>
            The screen's (device) current horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceDpiY">
            <summary>
            The screen's (device) current vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalDpiX">
            <summary>
            The helper's logical horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalDpiY">
            <summary>
            The helper's logical vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.IsScalingRequired">
            <summary>
            Returns whether scaling is required when converting between logical-device units
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.RoundToDeviceUnitsX(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value if it is converted back to device units using
            functions for horizontal coordinates/widths such as DeviceToLogicalUnitsX.
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.RoundToDeviceUnitsY(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value if it is converted back to device units using
            functions for vertical coordinates/widths such as DeviceToLogicalUnitsY.
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
            <summary>
            Returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
            <summary>
            Returns a new Rect with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">Rect in logical coordinates</param>
            <returns>Rect in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
            <summary>
            Returns a new Size with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalSize">Size in logical units</param>
            <returns>Size in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Thickness)">
            <summary>
            Returns a new Thickness with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalThickness">Thickness in logical units</param>
            <returns>Thickness in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
            <summary>
            Returns a new Point with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="devicePoint">Point in device coordinates</param>
            <returns>Point in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
            <summary>
            Returns a new Rect with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="deviceRect">Rect in device coordinates</param>
            <returns>Rect in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
            <summary>
            Returns a new Size with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="deviceSize">Size in device units</param>
            <returns>Size in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.DeviceToLogicalUnits(System.Windows.Thickness)">
            <summary>
            Returns a new Thickness with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="deviceThickness">Thickness in device units</param>
            <returns>Thickness in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceLeft(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Left coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceLeft">New left coordinate in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceLeft(System.Windows.Window)">
            <summary>
            Gets the window's Left coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Left coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceTop(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Top coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceTop">New top coordinate in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceTop(System.Windows.Window)">
            <summary>
            Gets the window's Top coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Top coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceWidth(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Width using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceWidth">New width in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceWidth(System.Windows.Window)">
            <summary>
            Gets the window's Width in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Width in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.SetDeviceHeight(System.Windows.Window@,System.Double)">
            <summary>
            Sets the window's Height using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceHeight">New height in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceHeight(System.Windows.Window)">
            <summary>
            Gets the window's Height in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Height in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceRect(System.Windows.Window)">
            <summary>
            Gets the window's Rectangle in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Window rectangle in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
            <summary>
            Get the FrameworkElement's Size in device units
            </summary>
            <param name="element">FrameworkElement to inspect</param>
            <returns>Actual Size in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Point)">
            <summary>
            Returns a new System.Drawing.Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Size)">
            <summary>
            Returns a new System.Drawing.Size with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalSize">Size in logical units</param>
            <returns>Size in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Rectangle)">
            <summary>
            Returns a new System.Drawing.Rectangle with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">Rectangle in logical units</param>
            <returns>Rectangle in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.PointF)">
            <summary>
            Returns a new System.Drawing.PointF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">PointF in logical units</param>
            <returns>PointF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.SizeF)">
            <summary>
            Returns a new System.Drawing.SizeF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalSize">SizeF in logical units</param>
            <returns>SizeF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.RectangleF)">
            <summary>
            Returns a new System.Drawing.RectangleF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">RectangleF in logical units</param>
            <returns>RectangleF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.GetPrescaledImageSize(System.Drawing.Size)">
            <summary>
            Returns the size of the image that should be used as intermediate size when scaling  in 2 steps (with NearestNeighbor up to the largest multiple of 100% zoom of the initial image, from where the image should be scaled with HighQualityBicubic up to the final size suitable for device)
            (to be used with ImageScalingMode.MixedNearestNeighborHighQualityBicubic scaling)
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleX">
            <summary>
            Return the horizontal scale value that should be used with a LayoutTransform/ScaleTransform to scale back
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.PreScaledImageLayoutTransformScaleY">
            <summary>
            Return the vertical scale value that should be used with a LayoutTransform/ScaleTransform to scale back
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap or metafile from the logical System.Drawing.Image scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.ScaleLogicalImageForDeviceSize(System.Windows.Media.ImageSource,System.Windows.Size,System.Windows.Media.BitmapScalingMode)">
            <summary>
            Scale a WPF image to the indicated size, using the specified scalingMode
            </summary>
            <param name="image">The image to scale</param>
            <param name="deviceImageSize">The resultant image size</param>
            <param name="scalingMode">The BitmapScalingMode to be used during image resize</param>
            <returns>The scaled up image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new bitmap or metafile from the logical System.Drawing.Image scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
             <summary>
             Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
             When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
             This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
             because the resultant bitmap strip size may be different from just upscaling as bitmap
             N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
             This may happen depending on the image width because dpiscale is a double not an int.
             </summary>
             <param name="imageStrip">The image strip to scale from logical units to device units</param>
             <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
             <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
             <summary>
             Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
             When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
             This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
             because the resultant bitmap strip size may be different from just upscaling as bitmap
             N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
             This may happen depending on the image width because dpiscale is a double not an int.
             </summary>
             <param name="imageStrip">The image strip to scale from logical units to device units</param>
             <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
             <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
             <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
             <summary>
             Creates and returns a new bitmap strip from the logical System.Drawing.Bitmap strip scaled for the device units, using NearestNeighbor interpolation.
             When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
             This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
             because the resultant bitmap strip size may be different from just upscaling as bitmap
             N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
             This may happen depending on the image width because dpiscale is a double not an int.
             </summary>
             <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
             <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
             <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
             <summary>
             Creates and returns a new bitmap strip from the logical System.Drawing.Bitmap scaled for the device units
             When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
             This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
             because the resultant bitmap strip size may be different from just upscaling as bitmap
             N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
             This may happen depending on the image width because dpiscale is a double not an int.
             </summary>
             <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
             <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
             <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
             <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Drawing.Icon@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the icon by scaling it to device units.
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="icon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Icon,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new icon scaled for the device units.
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="logicalIcon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Dpi.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the imagelist</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FileStreamStorage`1">
            <summary>
            A generic implementation of stream storage in the file system.
            Stores files in a directory. The files it recognizes and accepts for creation can be
            all files in the directory or only files with a specific extension.
            </summary>
            <typeparam name="TKey">The type of the stream key</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StoragePath">
            <summary>
            Get or set the Directory that will contain the stored files
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StorageFileExtension">
            <summary>
            Get or set the extension for contained files.
            If set to AllExtensions, the storage will recognize all files in the storage directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetFullPath(`0)">
            <summary>
            Get a full file path from a key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.IsStorageExtension(`0)">
            <summary>
            Indicates whether the file represented by the given key belongs to the storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Open(`0,Microsoft.VisualStudio.Utilities.StreamAccess)">
            <summary>
            Open an existing Stream in storage.
            </summary>
            <param name="key">The key for the stream</param>
            <param name="streamAccess">The desired access for the stream</param>
            <returns>The stream for <paramref name="key" />, or null if it doesn't exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Create(`0)">
            <summary>
            Open a new Stream for writing, adding it to storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Delete(`0)">
            <summary>
            Delete from storage the Stream identified by the given key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Contains(`0)">
            <summary>
            Indicates whether storage contains a Stream with the given key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Item(`0)">
            <summary>
            Open an existing Stream in storage for reading.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind)">
            <summary>
            Gets the timestamp for an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="kind">The kind of timestamp to return</param>
            <returns>The timestamp</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.SetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind,System.DateTime)">
            <summary>
            Sets the timestamp for an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="kind">The kind of timestamp to set</param>
            <param name="timestamp">The timestamp to set on the stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetStreamSize(`0,System.Int64@,System.Int64@)">
            <summary>
            Gets the number of bytes actually used by an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.GetEnumerator">
            <summary>
            Get an enumerator for keys in storage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for keys in storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.EnableRaisingEvents">
            <summary>
            Controls whether events are raised when changes occur in the storage
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamCreated">
            <summary>
            Raised when a stream is created
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamDeleted">
            <summary>
            Raised when a stream is deleted
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.StreamChanged">
            <summary>
            Raised when a stream is changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.Watcher">
            <summary>
            The FileSystemWatcher for the object (internal visibility for unit testing).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.OnStreamCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handler for the FileSystemWatcher.Created event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.OnStreamDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handler for the FileSystemWatcher.Deleted event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.OnStreamChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handler for the FileSystemWatcher.CHanged event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.OnStreamRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Handler for the FileSystemWatcher.Renamed event
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.RaiseEvent(System.EventHandler{`0},System.String)">
            <summary>
            Raises a stream event if tnere are event sinks for it.
            </summary>
            <param name="streamEvent">The event to raise</param>
            <param name="streamName">The name of the stream the event is for</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.FileStreamStorageKeyEnumerator">
            <summary>
            Enumerator for storage Keys
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.FileStreamStorageKeyEnumerator.#ctor(Microsoft.VisualStudio.Utilities.IStreamStorageKeyFactory{`0},System.String,System.String)">
            <summary>
            Find all appropriate files at construction
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileStreamStorage`1.FileStreamStorageKeyEnumerator.Current">
            <summary>
            Get the current enumerated element
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ColorEntry">
            <summary>
            Defines a color value to be used in font/color category entries
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ColorEntry.Type">
            <summary>
            Gets or sets the color type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ColorEntry.Value">
            <summary>
            Gets or sets the color value if applicable
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ColorEntry.IsColorValid">
            <summary>
            Gets if color value is valid
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontColorCategory">
            <summary>
            Contains font and color information for an option category
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorCategory.CategoryGuid">
            <summary>
            Gets the category identifier
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorCategory.Font">
            <summary>
            Gets the font assigned to category if one is set
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorCategory.Colors">
            <summary>
            Gets list of colors defined in this category
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorCategory.#ctor(System.Guid)">
            <summary>
            Creates a new category with provided identifier
            </summary>
            <param name="categoryGuid">Category identifier</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorCategory.#ctor(System.IO.BinaryReader,System.Int32)">
            <summary>
            Creates a new category from a binary reader. The reader must be in correct position
            </summary>
            <param name="reader">reader instance to use</param>
            <param name="version">schema version to use</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontColorEntry">
            <summary>
            Defines a single font &amp; color entry in a theme category, defining the color and font style of the entry
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontColorEntry.AvailableFontStyles">
            <summary>
            Flags to indicate availability of some options
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontColorEntry.LineStyles">
            <summary>
            Line style options if entry supports line style
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.Name">
            <summary>
            Canonical name of the font/color entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.DescriptionResource">
            <summary>
            Pointer to localized description resource, can be null if not available
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.LocalizedNameResource">
            <summary>
            Pointer to localized name resource, can be null if not available
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.BackgroundColor">
            <summary>
            Background color of the font/color entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.ForegroundColor">
            <summary>
            Foreground color of the font/color entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.FontColorItemFlags">
            <summary>
            App specific font/color options
            </summary>
            <remarks>Under Visual Studio context, this represents _FCITEMFLAGS</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.LineStyle">
            <summary>
            Line style to use if this entry is used as a line color
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.MarkerStyle">
            <summary>
            Marker style to use if this entry is used as a marker color
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.AutoBackgroundColor">
            <summary>
            Automatic background color of the item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.AutoForegroundColor">
            <summary>
            Automatic foreground color of the item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.FontFlags">
            <summary>
            App specific options for font options
            </summary>
            <remarks>Under Visual Studio context, this represents FONTFLAGS and/or _FCFONTFLAGS</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorEntry.MergePriority">
            <summary>
            Merge priority when entry is shared between components
            </summary>
            <remarks>Uses FontColorEntry.DefaultMergePriority if not specified</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorEntry.#ctor(System.String)">
            <summary>
            Create a new font and color entry
            </summary>
            <param name="name">Canonical name of the entry</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontColorTheme">
            <summary>
            Theme entry describing both font and color information. 
            </summary>
            <remarks>
            Theme data can be read or written from/to a versioned binary stream for serialization
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontColorTheme.Categories">
            <summary>
            Gets font and color categories defined in this theme
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorTheme.#ctor">
            <summary>
            Creates a new empty theme instance
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorTheme.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Creates a new font and color theme from a versioned reader
            </summary>
            <param name="reader">Versioned reader wrapping the data stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorTheme.GetCategory(System.Guid)">
            <summary>
            Gets the category for a given identifier
            </summary>
            <param name="categoryGuid">Category identifier</param>
            <returns>a FontColorCategory instance if category is defined or null otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorTheme.AddCategory(Microsoft.VisualStudio.Utilities.FontColorCategory)">
            <summary>
            Adds a new category definition to this theme
            </summary>
            <param name="category">Cateogry to add, the category identifier must be unique in the theme</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FontColorTheme.WriteToStream(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter,System.Boolean)">
            <summary>
            Serializes font and color data to a versioned writer. By default latest version will be used
            </summary>
            <param name="writer">a VersionedBinaryWriter instance</param>
            <param name="includeFontInformation">set to false if previous version should be used omitting font and extended color information</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FontInformation">
            <summary>
            Contains information regarding font assigned to a category
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontInformation.Typeface">
            <summary>
            Gets or sets the font typeface
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontInformation.PointSize">
            <summary>
            Gets or sets the size of the font
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontInformation.CharSet">
            <summary>
            Gets or sets the character set of the font
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FontInformation.IsValid">
            <summary>
            Gets if the font information is valid
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.GZip">
            <summary>
            Methods for compressing / decompressing a byte array using the GZip algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.GZip.Compress(System.Byte[])">
            <summary>
            Compress a byte array using the GZip algorithm.
            </summary>
            <param name="data">Array to compress.</param>
            <returns>Compressed byte array.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.GZip.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress a byte array that was compressed using the GZip algorithm.
            </summary>
            <param name="data">Array to decompress.</param>
            <param name="bufferSize">Size of the intermediate buffer used to decompress data.</param>
            <returns>Decompressed byte array.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Int16Size">
             <summary>
             Represents a size using Int16 values for Width/Height, meaning it occupies 4 bytes instead
             of the 16 bytes required for System.Windows.Size (which uses doubles for Width/Height).
            
             This is useful in situations where an integral range of [0-32767] for Width/Height is sufficient
             and the space occupied by the structure is of concern.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Int16,System.Int16)">
            <summary>
            Constructs a Int16Size structure with an initial width and height.
            </summary>
            <param name="width">The initial width of the Int16Size</param>
            <param name="height">The initial height of the Int16Size</param>
            <remarks><paramref name="width" /> and <paramref name="height" /> cannot be negative</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Int16Size structure with an initial width and height.
            </summary>
            <param name="width">The initial width of the Int16Size</param>
            <param name="height">The initial height of the Int16Size</param>
            <remarks><paramref name="width" /> and <paramref name="height" /> cannot be negative</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Int16Size structure with an initial width and height.
            </summary>
            <param name="width">The initial width of the Int16Size</param>
            <param name="height">The initial height of the Int16Size</param>
            <remarks><paramref name="width" /> and <paramref name="height" /> cannot be negative</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.#ctor(System.Windows.Size)">
            <summary>
            Constructs a Int16Size structure from a <see cref="T:System.Windows.Size" /> structure
            </summary>
            <param name="size">The Size from which the Int16Size is to be initialized</param>
            <remarks>
            If <paramref name="size" /> is empty, the resulting Int16Size will also be empty.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Width">
            <summary>
            The width of the Int16Size
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Height">
            <summary>
            The height of the Int16Size
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Area">
            <summary>
            The area of the Int16Size
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.Empty">
            <summary>
            Returns a Int16Size whose IsEmpty property is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Int16Size.IsEmpty">
            <summary>
            Indicates whether the Int16Size is empty
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToWindowsSize">
            <summary>
            Converts the Int16Size to a System.Windows.Size
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.ToDimensionString">
            <summary>
            Returns a string for <see cref="T:Microsoft.VisualStudio.Utilities.Int16Size" />, as "{width}x{height}"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.GetNumericListSeparator(System.IFormatProvider)">
            <summary>
            Returns the character to use to separate a list of numerals.  This character
            will be a comma unless the decimal separator for the format provider is also
            a comma, in which case the list separator will be a semi-colon.
            </summary>
            <param name="provider">The format provider</param>
            <returns>The character to use as a list separator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Int16Size.CreateEmptySize">
            <summary>
            Creates a Int16Size whose IsEmpty property is true
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1">
            <summary>
            Interface to an ordered storage of Streams. Each stream is identified by a key,
            and is located at a given position (represented as an index) in storage.
            </summary>
            <typeparam name="TKey">Type of the key that identifes a Stream in storage</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Count">
            <summary>
            Get the Count of Streams in storage.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Item(System.Int32)">
            <summary>
            Open an existing Stream in storage for reading, at the given index.
            </summary>
            <param name="index">Index of the existing stream.</param>
            <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.CreateAt(System.Int32,`0)">
            <summary>
            Open a new Stream for writing at the given index, adding it to storage.
            </summary>
            <param name="index">Index of the new stream.</param>
            <param name="key">Key of the new stream to be added to storage.</param>
            <returns>A new Stream for writing. It is the responsibility of the caller to dispose the Stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.DeleteAt(System.Int32)">
            <summary>
            Delete from storage the Stream at the given index.
            </summary>
            <param name="index">Index of the stream to delete from storage.</param>
            <returns>True if deleting was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IOrderedStreamStorage`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Reset storage with the given enumeration of keys.
            
            New keys will be enumerated and compared against existing keys in storage. The new keys enumeration will
            determine the position of existing keys in storage: that is, if they exist in both storage and newKeys they
            will be moved to the position in the newKeys enumeration.
            
            Existing keys in storage that do not exist in the newKeys enumeration will be removed from storage.
            
            Keys that exist in the newKeys enumeration but do not exist in storage will be added to storage, and an empty
            Stream will be created for them.
            </summary>
            <param name="newKeys"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorage`1">
            <summary>
            Interface to a storage of Streams. Each Stream in storage is identified
            by a key.
            </summary>
            <typeparam name="TKey">Type of the key that identifies a Stream in storage.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Open(`0,Microsoft.VisualStudio.Utilities.StreamAccess)">
            <summary>
            Open an existing Stream in storage for reading.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="access">Requested access for the stream</param>
            <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Create(`0)">
            <summary>
            Open a new Stream for writing, adding it to storage.
            </summary>
            <param name="key">Key of the new stream to be added to storage.</param>
            <returns>A new Stream for writing. It is the responsibility of the caller to dispose the Stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Delete(`0)">
            <summary>
            Delete from storage the Stream identified by the given key.
            </summary>
            <param name="key">Key of the stream to delete from storage.</param>
            <returns>True if deleting was successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Contains(`0)">
            <summary>
            Indicates whether storage contains a Stream with the given key.
            </summary>
            <param name="key">Key whose existence in storage will be verified.</param>
            <returns>True if the Stream with the given key was found, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IStreamStorage`1.Item(`0)">
            <summary>
            Open an existing Stream in storage for reading.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <returns>An open stream for reading. It is the responsibility of the caller to dispose the Stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.GetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind)">
            <summary>
            Gets the timestamp for an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="kind">The kind of timestamp to return</param>
            <returns>The timestamp</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.SetTimestamp(`0,Microsoft.VisualStudio.Utilities.TimestampKind,System.DateTime)">
            <summary>
            Sets the timestamp for an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="kind">The kind of timestamp to set</param>
            <param name="timestamp">The timestamp to set on the stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStreamStorage`1.GetStreamSize(`0,System.Int64@,System.Int64@)">
            <summary>
            Gets the number of bytes used by an existing Stream in the storage.
            </summary>
            <param name="key">Key to the existing stream.</param>
            <param name="actualSize">Number of used bytes.</param>
            <param name="reservedSize">Number of reserved bytes.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1">
            <summary>
            An interface that defines events to notify of changes to streams in an IStreamStorage.
            If a class that implements can support change notifications, it should also implement 
            IStreamStorageEvents.
            </summary>
            <typeparam name="TKey">Type of the key that identifies a Stream in storage.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.EnableRaisingEvents">
            <summary>
            Controls whether events are raised when changes occur in the storage
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamCreated">
            <summary>
            Raised when a stream is created
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamDeleted">
            <summary>
            Raised when a stream is deleted
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.IStreamStorageEvents`1.StreamChanged">
            <summary>
            Raised when a stream is changed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IStreamStorageKeyFactory`1">
            <summary>
            Interface for an IStreamStorage key object factory that takes as parameter a stream name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.LogicalIgnoreCaseStringComparer">
            <summary>
            A string comparer that performs a case-insensitive logical string comparison.
            A logical comparison treates consecutive digits in the string as numerical
            content rather than text.
            </summary>
            <remarks>
            See https://docs.microsoft.com/en-us/windows/desktop/api/shlwapi/nf-shlwapi-strcmplogicalw.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.OnDisposeActionDisposable">
            <summary>
            A utility class that provides an implementation of IDisposable that executes a client-supplied
            action upon disposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OnDisposeActionDisposable.#ctor(System.Action)">
            <summary>
            Initializes a new instance of an <see cref="T:System.IDisposable" /> object that invokes 
            <paramref name="onDispose" /> on disposal.
            </summary>
            <param name="onDispose">Action to run on dipose</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="onDispose" /> is null.</exception>
            <remarks>Catching any exceptions thrown by <paramref name="onDispose" /> is left to the caller.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.OneOrMany`1">
            <summary>
            A collection of <typeparamref name="T" /> that is optimized for minimal space in the case of a single element.
            </summary>
            <typeparam name="T">Elemental type which must be a reference type. Note: <c>null</c> may not be used as a value in the collection.</typeparam>
            <remarks>
            While this type has a <see cref="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.GetEnumerator" /> method, it does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" />. This
            is to eliminate any unintentional boxing that will happen if a value type is passed to or returned from a method
            via its interface. The collection may still be enumerated in foreach statements (since the compiler uses pattern
            matching for that), but not elsewhere such as LINQ expressions.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.OneOrMany`1._data">
            <summary>
            May be null, a single instance of T or a List{T}
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator">
            <summary>
            Struct based enumerator. Just enough is implemented to satisfy the foreach pattern.
            </summary>
            <remarks>Note that the enumerator is not invalidated by updates to the underlying collection.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator.#ctor(System.Object)">
            <summary>
            Construct a new Enumerator over the given data.
            </summary>
            <param name="data">The collection.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator.Current">
            <summary>
            Access the current element.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.Enumerator.MoveNext">
            <summary>
            Advance the enumerator to the next position.
            </summary>
            <returns>False if the end of the collection has been reached.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.GetEnumerator">
            <summary>
            Get an efficient enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.Add(`0)">
            <summary>
            Add a new value to the collection.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Count">
            <summary>
            Returns the count of the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.OneOrMany`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the item requested.</param>
            <returns>The item at position <paramref name="index" /> in the collection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is negative or off the end of the collection.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OneOrMany`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the item to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is negative or off the end of the collection.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.OSVersionHelper.IsSinceWinX(Microsoft.VisualStudio.Utilities.OSVersionHelper.WindowsVersions)">
            <summary>
            Name                           Release version (major.minor)
            Win10  / Server 2016           10.0
            Win8.1 / Server 2012 R2        6.3
            Win8   / Server 2012           6.2
            Win7   / Server 2008 R2        6.1
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper">
            <summary>
            Simple wrapper for ReaderWriterLockSlim that provides helpers for entering the
            various modes of the lock that return disposable objects that will exit the
            entered mode when disposed.
            
            The wrapped lock can be accessed via the InnerLock property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.InnerLock">
            <summary>
            The ReaderWriterLockSlim that is wrapped by this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.EnterReadLock">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.EnterUpgradeableReadLock">
            <summary>
            Tries to enter the lock in upgradeable mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.EnterWriteLock">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterReadLock(System.Int32)">
            <summary>
            Tries to enter the lock in read mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 (System.Threading.Timeout.Infinite)
            to wait indefinitely.
            </param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterReadLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in read mode, with an optional integer time-out.
            </summary>
            <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterUpgradeableReadLock(System.Int32)">
            <summary>
            Tries to enter the lock in upgradeable mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 (System.Threading.Timeout.Infinite)
            to wait indefinitely.
            </param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterUpgradeableReadLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in upgradeable mode, with an optional integer time-out.
            </summary>
            <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterWriteLock(System.Int32)">
            <summary>
            Tries to enter the lock in write mode, with an optional integer time-out.
            </summary>
            <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 (System.Threading.Timeout.Infinite)
            to wait indefinitely.
            </param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReaderWriterLockSlimWrapper.TryEnterWriteLock(System.TimeSpan)">
            <summary>
            Tries to enter the lock in write mode, with an optional integer time-out.
            </summary>
            <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
            <returns>
            If the lock was successfully entered, the return value is an object that will
            exit the lock when disposed.  If the lock was not entered, null is returned.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_CircularPropertyDependency">
            <summary>
              Looks up a localized string similar to There is a circular property dependency: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_ConverterFunctionNotDefined">
            <summary>
              Looks up a localized string similar to {0}: {1} is not defined for this converter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_DependsOnPropertyNotFound">
            <summary>
              Looks up a localized string similar to {0}.{1} depends on a property that couldn't be found: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_DeserializationCallbackFailure">
            <summary>
              Looks up a localized string similar to The delegate didn't read the amount of data that was written.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_FailedToAcquireMutex">
            <summary>
              Looks up a localized string similar to Could not get access to the cross process mutex '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_FailedToUpdateInternalState">
            <summary>
              Looks up a localized string similar to Internal version mismatch detected when updating component versions in current context..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_FlagNotRegistered">
            <summary>
              Looks up a localized string similar to Only feature flags that have been registered may be set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InsufficientSourceParameters">
            <summary>
              Looks up a localized string similar to {0}.{1}: Converter requires {2} source parameters, {3} source parameters provided..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InsufficientTypeParameters">
            <summary>
              Looks up a localized string similar to {0}.{1}: Converter requires {2} type parameters, {3} type parameters provided..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidExtensionNoLeadingPeriod">
            <summary>
              Looks up a localized string similar to The first character of the extension must be a period ('.')..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidExtensionTooManyPeriods">
            <summary>
              Looks up a localized string similar to The extension can only contain a single period ('.')..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidExternalClientProcessPid">
            <summary>
              Looks up a localized string similar to {0} '{1}' was not provided in the service request or it did not contain a valid PID..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidMaxStorageSize">
            <summary>
              Looks up a localized string similar to Zero is an invalid value for the maximum storage size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidMaxStreamCount">
            <summary>
              Looks up a localized string similar to Zero is an invalid value for the maximum stream count.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidMessageVersionHeader">
            <summary>
              Looks up a localized string similar to Message version header is invalid based on current state..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidNameFilter">
            <summary>
              Looks up a localized string similar to The name filter must be a valid LogId with only '?' and '*' as wild card characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidNullableTypeCode">
            <summary>
              Looks up a localized string similar to Invalid nullable type code {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidPatternForFeatureName">
            <summary>
              Looks up a localized string similar to Must be of the form {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidRootPath">
            <summary>
              Looks up a localized string similar to This may not be the root path..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidStreamAccess">
            <summary>
              Looks up a localized string similar to Invalid stream access: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_InvalidTimestampKind">
            <summary>
              Looks up a localized string similar to Invalid timestamp kind: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_MaximumObjectIdentifierExceeded">
            <summary>
              Looks up a localized string similar to Maximum object identifier exceeded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_MetadataMapShouldHaveSize">
            <summary>
              Looks up a localized string similar to Metadata map for {0} should have size {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_NeedStreamCountOrStorageSize">
            <summary>
              Looks up a localized string similar to At least one of maxStreamCount or maxStorageSize must be greater than zero.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_NeedSuccessCode">
            <summary>
              Looks up a localized string similar to The parameter {0} indicates a failure..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_NoStreamStorageEvents">
            <summary>
              Looks up a localized string similar to Cannot monitor a storage that doesn't implement IStreamStorageEvents&lt;TKey&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_NullSerializerFieldCodeNullable">
            <summary>
              Looks up a localized string similar to The value of a SerializerFieldCode.Nullable field cannot be null, null values should be encoded with SerializerFieldCode.NullableType or Nil instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_PrivateToSharedNameTranslatorReturnedNullOrEmpty">
            <summary>
              Looks up a localized string similar to The private-to-shared name translator returned null or an empty string for shared setting {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_TargetAtOffsetNotExtendingType">
            <summary>
              Looks up a localized string similar to {1}.{2}: unexpected target type at offset {5}:{0}Expected target type: {3}{0}Actual target type: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_TargetNotExtendingType">
            <summary>
              Looks up a localized string similar to {1}.{2}: unexpected target type:{0}Expected target type: {3}{0}Actual target type: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_ThicknessConverter_InvalidTargetType">
            <summary>
              Looks up a localized string similar to {0} only supports a target type of {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_ThicknessConverter_InvalidValues">
            <summary>
              Looks up a localized string similar to {0} requires 1, 2, or 4 input values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_UnexpectedStreamVersion">
            <summary>
              Looks up a localized string similar to Unexpected stream version:  expected version={0}, actual version={1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_ValueAtOffsetNotOfType">
            <summary>
              Looks up a localized string similar to {1}.{2}: unexpected value type at offset {5}:{0}Expected type: {3}{0}Actual type: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.Error_ValueNotOfType">
            <summary>
              Looks up a localized string similar to {1}.{2}: unexpected value type:{0}Expected type: {3}{0}Actual type: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.JsonSerializationFailed">
            <summary>
              Looks up a localized string similar to Failed to serialize object as JSON..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.MisplacedSettingPathWildcard">
            <summary>
              Looks up a localized string similar to Wildcards are allowed only at the end of property names..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.NormalizeError_InvalidPathChar">
            <summary>
              Looks up a localized string similar to The path contains an invalid character..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ServiceUnavailable_Format">
            <summary>
              Looks up a localized string similar to The {0} service is unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_BitmapNotBgra32">
            <summary>
              Looks up a localized string similar to The supplied bitmap bits do not represent a complete BGRA32 bitmap..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_GuidEmpty">
            <summary>
              Looks up a localized string similar to The Guid is empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_InvalidOperation">
            <summary>
              Looks up a localized string similar to The operation cannot be executed at this time. The object {0} is not null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_InvalidValue_Format">
            <summary>
              Looks up a localized string similar to The argument value {0} is not the expected value {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_OutOfRange_Format">
            <summary>
              Looks up a localized string similar to The value {0} is outside the acceptable range of [{1},{2}]..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_PathNotNormalized_Format">
            <summary>
              Looks up a localized string similar to The path \"{0}\" is not normalized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_StringEmpty">
            <summary>
              Looks up a localized string similar to The string is empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_StringWhiteSpace">
            <summary>
              Looks up a localized string similar to The string cannot be null or contain only whitespace characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Resources.ValidateError_UnexpectedValue_Format">
            <summary>
              Looks up a localized string similar to The value {0} is unexpected for argument {1}..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableArray`1">
            <summary>
            Stores a reusable array.  The size of the array returned can either
            be exactly a requested size or a buffer of at least a requested size
            depending on the value of the requiresExactSize parameter.
            </summary>
            <typeparam name="T">The type of array to construct.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableArray`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a new reusable array.
            </summary>
            <param name="requiresExactSize">True if the array returned
            from Acquire must have an exactly-matching length, false if
            the array returned from Acquire can have any equal or longer
            length than the length requested.</param>
            <param name="maximumCacheArrayLength">The maximum length of array
            that should be cached when returning arrays to the resource store.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableMemoryStream">
            <summary>
            Stores a reusable MemoryStream.  The MemoryStream will only be stored
            for reuse if its Capacity does not exceed the maximumStreamCapacity used
            when constructing the ReusableMemoryStream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableMemoryStream.#ctor(System.Int32)">
            <summary>
            Constructs a new ReusableMemoryStream.
            </summary>
            <param name="maximumStreamCapacity">The maximum capacity for the MemoryStream
            to be stored for reuse.  Streams exceeding the capacity will be not be stored
            for reuse.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1">
            <summary>
            Holds a reference to a shared resource allocated by a ReusableResourceStoreBase, and releases
            the resource back to the ReusableResourceStoreBase upon dispose.
            </summary>
            <typeparam name="TResource">The type of resource stored in the holder.</typeparam>
            <remarks>This MUST be a value type for ReusableResourceStore to be efficient.
            Returning a reference type would require an allocation on each call to
            Acquire, which would defeat the memory allocation savings of using
            ReusableResourceStore and ReusableResourceHolder in the first place.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1.Dispose">
            <summary>
            Disposes of the resource, releasing it back to the ReusableResourceStore it came from.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ReusableResourceHolder`1.Resource">
            <summary>
            Gets the resource stored by this resource holder.  After this object is disposed,
            returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1">
            <summary>
            Stores a resource that requires no constructor parameters for instantiation.  See ReusableResourceStoreBase
            for more information.
            </summary>
            <typeparam name="TResource">The type of resource to store.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.Acquire">
            <summary>
            Acquires a cached instance of the resource, or allocates a new instance if none
            are currently available.
            </summary>
            <returns>A disposable object that should be disposed when usage of the resource is complete.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.Allocate">
            <summary>
            Allocates a new instance of the resource when one is not available in the cache.
            </summary>
            <returns>A new instance of the resource.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`1.CanReuse(`0)">
            <summary>
            Validates that an already-cached resource value is safe to reuse when Acquire is called.
            </summary>
            <param name="value">The cached value that is about to be reused during Acquire.</param>
            <returns>True if the object is in a reusable state, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2">
            <summary>
            Stores a resource that requires a single constructor parameter for instantiation.  See ReusableResourceStoreBase
            for more information.
            </summary>
            <typeparam name="TResource">The type of resource to store.</typeparam>
            <typeparam name="TConstructorParameter">The type of the first constructor parameter for the resource.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.Acquire(`1)">
            <summary>
            Acquires a cached instance of the resource, or allocates a new instance if none
            are currently available.
            </summary>
            <param name="constructorParameter">The parameter to pass when constructing the object.</param>
            <returns>A disposable object that should be disposed when usage of the resource is complete.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.Allocate(`1)">
            <summary>
            Allocates a new instance of the resource when one is not available in the cache.
            </summary>
            <param name="constructorParameter">The parameter to pass when constructing the object.</param>
            <returns>A new instance of the resource.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStore`2.CanReuse(`0,`1)">
            <summary>
            Validates that an already-cached resource value is safe to reuse when Acquire is called.
            </summary>
            <param name="value">The cached value that is about to be reused during Acquire.</param>
            <param name="parameter">The parameter that would be used to construct a new value.</param>
            <returns>True if the object is in a reusable state, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1">
            <summary>
            Provides a base class for storing a frequently-used object that can be reused
            instead of reallocated, such as StringBuilders or small arrays.
            </summary>
            <typeparam name="TResource">The type of object stored by this store.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.AcquireCore">
            <summary>
            Gets access to the resource stored by this object, and removes the resource
            so that subsequent callers cannot be handed the same resource at the same time.
            </summary>
            <returns>A currently-stored instance of the resource, or null if there are no
            instances currently available in the store.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.ReleaseCore(`0)">
            <summary>
            Releases a value previously acquired with AcquireCore, cleaning up the value
            if possible and returning it to the store.  If cleanup of the object is not possible,
            it is thrown away.
            </summary>
            <param name="value">The value previously acquired by AcquireCore.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ReusableResourceStoreBase`1.Cleanup(`0)">
            <summary>
            Immediately before releasing an object, performs cleanup on that object.  This might
            be necessary to clean up state stored in the object to prevent leaking memory.
            </summary>
            <param name="value">The value to clean up.</param>
            <returns>True if the object was able to be cleaned up and is ready for reuse, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ReusableStringBuilder">
            <summary>
            Represents a reusable StringBuilder.  The StringBuilder is cleared after each cleanup
            to remove content from the previous usage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadGuid(System.IO.BinaryReader)">
            <summary>
            Reads a Guid struct from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Guid)">
            <summary>
            Writes a Guid struct to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="guid">The Guid to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadUTF8String(System.IO.BinaryReader)">
            <summary>
            Reads a string with UTF8 encoding that was written via WriteUTF8String method from a reader
            </summary>
            <param name="reader">The reader to read from</param>
            <returns>the string read from stream</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.WriteUTF8String(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a string with UTF8 encoding and prefixed with length.
            </summary>
            <param name="writer">Writer to write to</param>
            <param name="value">String to be written</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadWindowsSize(System.IO.BinaryReader)">
            <summary>
            Reads a System.Windows.Size struct from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Windows.Size)">
            <summary>
            Writes a System.Windows.Size struct to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="size">The size to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadDrawingSize(System.IO.BinaryReader)">
            <summary>
            Reads a System.Drawing.Size struct from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Drawing.Size)">
            <summary>
            Writes a System.Drawing.Size struct to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="size">The size to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadInt16Size(System.IO.BinaryReader)">
            <summary>
            Reads a Int16Size struct from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Writes a Int16Size struct to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="size">The size to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableBoolean(System.IO.BinaryReader)">
            <summary>
            Reads a bool? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Boolean})">
            <summary>
            Writes a bool? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableChar(System.IO.BinaryReader)">
            <summary>
            Reads a char? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Char})">
            <summary>
            Writes a char? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableDouble(System.IO.BinaryReader)">
            <summary>
            Reads a double? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Double})">
            <summary>
            Writes a double? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt16(System.IO.BinaryReader)">
            <summary>
            Reads a short? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int16})">
            <summary>
            Writes a short? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt32(System.IO.BinaryReader)">
            <summary>
            Reads a int? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int32})">
            <summary>
            Writes a int? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableInt64(System.IO.BinaryReader)">
            <summary>
            Reads a long? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Int64})">
            <summary>
            Writes a long? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableSingle(System.IO.BinaryReader)">
            <summary>
            Reads a float? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.Single})">
            <summary>
            Writes a float? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt16(System.IO.BinaryReader)">
            <summary>
            Reads a ushort? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt16})">
            <summary>
            Writes a ushort? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt32(System.IO.BinaryReader)">
            <summary>
            Reads a uint? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt32})">
            <summary>
            Writes a uint? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.ReadNullableUInt64(System.IO.BinaryReader)">
            <summary>
            Reads a ulong? from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SerializationExtensions.Write(System.IO.BinaryWriter,System.Nullable{System.UInt64})">
            <summary>
            Writes a ulong? to <paramref name="writer" />
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer">
            <summary>
            A container of brokered services that supports multiple service sources and multiple consumer roles that get filtered <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> views into the available services.
            </summary>
            <remarks>
            <para>When a service is registered without a version, it doubles as a fallback service when a request for that service name is made but no exact version match can be found.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest">
            <summary>
            Exposes details about availability of locally proffered services for clients with a specific audience.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest.GetAvailableServicesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.BrokeredServiceManifest.GetAvailableVersionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ApplyChaosMonkeyConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads and applies the content of a chaos monkey configuration.
            </summary>
            <param name="chaosMonkeyConfigurationPath">The path to a chaos monkey configuration file.</param>
            <returns>A task that represents the async operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosMonkey">
            <summary>
            The data object to deserialize from a chaos monkey configuration file.
            </summary>
            <remarks>
            See the ChaosMonkey.schema.json file for the full schema.
            Sample JSON:
            <![CDATA[
            {
              "brokeredServices": {
                "monikerName/1.2": {
                  "availability": "localOnly"
                }
              }
            }
            ]]>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.AllowAll">
            <summary>
            No services will be artificially denied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.DenyAll">
            <summary>
            All service requests will be denied.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ChaosBrokeredServiceAvailability.DenyRemote">
            <summary>
            All requests will be denied if they would be fulfilled by a remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnostics">
            <summary>
            Gets a descriptor for the service that can diagnose the cause of a missing brokered service.
            Use <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService" /> to interact with this service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.PreferredSourceOrderForRemoteServices">
            <summary>
            Defines the order of sources to check for remote services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.PreferredSourceOrderForLocalServices">
            <summary>
            Defines the order of sources to check for locally proffered services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.registeredServices">
            <summary>
            A dictionary of registered services, keyed by their monikers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.isClientOfExclusiveServer">
            <summary>
            A value indicating whether this process is dedicated as a client of a Codespace.
            </summary>
            <remarks>
            If we're running in a Codespace client, block all local services that may be obtained from the Codespace server.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.profferedServiceIndex">
            <summary>
            A dictionary for looking up a proffered service by a source and moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.remoteSources">
            <summary>
            The remote sources from which we can expect services and the proffering sources for them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.#ctor(System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration},System.Boolean,Microsoft.VisualStudio.Telemetry.TelemetrySession,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" /> class.
            </summary>
            <param name="services">
            A map of service monikers to their registration details.
            Only registered services will be obtainable from the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> returned from methods on this class.
            </param>
            <param name="isClientOfExclusiveServer"><c>true</c> when this process is or will be connected to a dedicated, trusted server (e.g. a Codespace) that will provide the environment to this client; <c>false</c> otherwise.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.LocalUserCredentials">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RegisteredServices">
            <summary>
            Gets the services currently registered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferIntrinsicService(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <summary>
            Proffers a new Intrinsic service. Should only be accessible to derived classes.
            </summary>
            <param name="serviceDescriptor">The <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> of the service.</param>
            <param name="newRegistration">The <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration" /> representing the service being registered.</param>
            <param name="factory">The <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> that generates the new service.</param>
            <returns>An <see cref="T:System.IDisposable" /> that will remove the service when disposed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.IServiceBroker,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services from another <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> into this container.
            </summary>
            <param name="serviceBroker">A service broker offering local services.</param>
            <param name="serviceMonikers">The monikers to services that should be obtained from this <paramref name="serviceBroker" />.</param>
            <returns>A value that can be disposed to remove this <paramref name="serviceBroker" /> from the container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> for access by this container.
            </summary>
            <param name="serviceBroker">The service broker for remote services.</param>
            <param name="source">Where the remote services that are being proffered come from.</param>
            <param name="serviceMonikers">
            The set of service monikers that may be requested of this service broker. May be null for truly remote brokers that we don't know the full set of services for.
            Only services registered with this container will ever be requested from this <paramref name="serviceBroker" />.
            </param>
            <returns>A value that can be disposed to remove this <paramref name="serviceBroker" /> from the container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for access by this container.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IRemoteServiceBroker,Nerdbank.Streams.MultiplexingStream,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Proffers services offered by a remote <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for access by this container.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferRemoteBroker(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})" />
            <param name="multiplexingStream">An optional <see cref="T:Nerdbank.Streams.MultiplexingStream" /> that may be used to provision pipes for each brokered service.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetFullAccessServiceBroker">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessRemoteServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)" />
            <returns>A <see cref="T:Microsoft.ServiceHub.Framework.IRemoteServiceBroker" /> for use in sharing directly on a remote connection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ExportDiagnosticsAsync(System.String,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Writes a bunch of diagnostic data to a JSON file.
            </summary>
            <param name="filePath">The path to the JSON file to be written. If it already exists it will be overwritten.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes when the writing is done.</returns>
            <remarks>
            Rough schema of JSON file:
            <![CDATA[
             {
               "perspectiveAudience": "Process",
               "activeRemoteSources" : [ "TrustedServer" ],
               "brokeredServices": [
                 {
                   name: "Calculator",
                   version: "1.0",
                   audience: "Local, Process, Guest",
                   allowGuestClients: false,
                   profferingPackage: "{28074D43-B498-47FE-97CF-4A182DA71C59}"
                   profferedLocally: true,
                   activeSource: "TrustedServer",
                   includedByRemoteSourceManifest: true
                 },
                 {
                   // ...
                 },
                 // ...
               ]
             }
            ]]>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetServicesThatMayBeExpected(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource)">
            <summary>
            Returns the services that are registered locally that *may* be proffered by a particular remote source.
            </summary>
            <param name="remoteSource">The source of services.</param>
            <returns>A sequence of registered services that we may expect from the source.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetSecureServiceBroker(Microsoft.ServiceHub.Framework.ServiceActivationOptions)">
            <summary>
            Gets a service broker that may be provided to a <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" />
            in order to automatically propagate <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" /> from one service to its dependencies.
            </summary>
            <param name="options">The options passed to the originally requested service.</param>
            <returns>The filtering, authorizing service broker.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForBrokeredServiceAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)" />
            <devremarks>
            This method was created because <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)" />
            needed to be exposed publicly but as a protected virtual method, making it public would be a binary breaking change.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RegisterServices(System.Collections.Generic.IReadOnlyDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration})">
            <summary>
            Registers a set of services with the global broker. This is separate from proffering a service. A service should be registered before it is proffered.
            An <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event is never
            fired as a result of calling this method, but instead will be fired once the service is proffered.
            </summary>
            <param name="services">The set of services to be registered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.UnregisterServices(System.Collections.Generic.IEnumerable{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Unregisters a set of services with the global broker. This is separate from unproffering a service. A service should be unregistered before it is unproffered.
            An <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event is never
            fired as a result of calling this method, but instead will be fired once the service is unproffered. To unproffer a service, simply dispose of it's proffering source.
            </summary>
            <param name="services">The set of services to be unregistered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetTraceSourceForConnectionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Diagnostics.TraceSource" /> to apply to some brokered service.
            </summary>
            <param name="serviceBroker">A service broker that may be used to create the <see cref="T:System.Diagnostics.TraceSource" />.</param>
            <param name="serviceMoniker">The moniker of the service being requested.</param>
            <param name="options">The activation options accompanying the request.</param>
            <param name="clientRole"><see langword="true" /> if the <see cref="T:System.Diagnostics.TraceSource" /> will be used by the client of the service; <see langword="false" /> if used by the service itself.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Diagnostics.TraceSource" /> instance that has the appropriate verbosity and listeners preconfigured, or <see langword="null" /> if the host provides no instance.</returns>
            <remarks>
            This method should be called by <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> implementations when requesting or activating services.
            The result of this method should be passed to <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.WithTraceSource(System.Diagnostics.TraceSource)" /> before constructing the RPC connection.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IsLocalConsumer(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Gets a value indicating whether a given service audience represents a local consumer (vs. a remote one).
            </summary>
            <param name="filter">The filter in effect on the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</param>
            <returns><c>true</c> if the filter represents a local consumer; <c>false</c> if a remote one.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetDiagnosticsAsync(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Gets a JSON object that describes the current state of the container, including all registered services, proffer services, brokers, connections, etc.
            </summary>
            <param name="serviceAudience">Specifies what perspective of the container should be used for data that indicates whether a service is available.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A JSON object.</returns>
            <remarks>
            The contents of this JSON blob are meant for human diagnostic purposes and are subject to change.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.GetAllowedMonikers(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Filters the registered service monikers to those that should be visible to our process from a given <paramref name="source" />,
            then optionally intersects that set with another set.
            </summary>
            <param name="source">The source of services that we should filter our registered list of services to.</param>
            <param name="serviceMonikers">The set of monikers to optionally intersect the filtered registered services with.</param>
            <returns>The filtered, intersected set of monikers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.Proffer(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered)">
            <summary>
            Indexes a proffered service factory or broker for fast lookup.
            </summary>
            <param name="proffered">The proffering wrapper.</param>
            <returns>A value that may be disposed to cancel the proffer and remove its services from the index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RemoveRegistrations(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered)">
            <summary>
            Removes proffered services from the index.
            </summary>
            <param name="proffered"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.OnAvailabilityChanged(System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered,System.Collections.Immutable.IImmutableSet{Microsoft.ServiceHub.Framework.ServiceMoniker})">
            <summary>
            Instructs each applicable <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> to raise its <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="oldIndex">The index of available services before the change. Null if no proffered index was changed, but an underlying service broker says a change was made.</param>
            <param name="proffered">The service proffering entity that has changed the set of services available to us.</param>
            <param name="impactedServices">A subset of services that are impacted by the change. If null, all services associated with the proffering party are impacted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryGetProfferingSource(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered@,Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode@)">
            <summary>
            Gets the proffering broker for a given service, taking both remote and local services into account.
            </summary>
            <param name="serviceMoniker">The sought service.</param>
            <param name="consumingAudience">The audience filter that applies to the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that has received the request.</param>
            <param name="proffered">Receives the proffering wrapper if the service was found and exposed to the <paramref name="consumingAudience" />.</param>
            <param name="errorCode">Receives the error code that describes why we failed to get a proffering source for the service, if applicable.</param>
            <returns><c>true</c> if the service broker wrapper was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryGetProfferingSource(System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered@,Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode@)">
            <summary>
            Gets the proffering broker for a given service, taking both remote and local services into account.
            </summary>
            <param name="profferedServiceIndex">The index to search for the proffering party.</param>
            <param name="serviceMoniker">The sought service.</param>
            <param name="consumingAudience">The audience filter that applies to the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that has received the request.</param>
            <param name="proffered">Receives the proffering wrapper if the service was found and exposed to the <paramref name="consumingAudience" />.</param>
            <param name="errorCode">Receives the error code that describes why we failed to get a proffering source for the service, if applicable.</param>
            <returns><c>true</c> if the service broker wrapper was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IsLocalProfferedServiceBlockedOnExclusiveClient(Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Checks whether the given service should be denied from a local source on the basis that it should always come from a Codespace Server.
            </summary>
            <param name="serviceRegistration">The service that might be denied.</param>
            <returns><c>true</c> if the locally proffered service should *not* be activated; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.TryLookupServiceRegistration(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration@,Microsoft.ServiceHub.Framework.ServiceMoniker@)">
            <summary>
            Checks the in-memory index of registered services for the registration of a named service.
            </summary>
            <param name="serviceMoniker">The moniker for the service. If this includes a version, and no registration for that version exists, a registration without a version may be matched.</param>
            <param name="serviceRegistration">The discovered service registration, if any.</param>
            <param name="matchingServiceMoniker">The <paramref name="serviceMoniker" /> if a match was found, or a copy with the version removed if only a version-less service was registered, or <see langword="null" />.</param>
            <returns><c>true</c> if registration was found for the given <paramref name="serviceMoniker" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnosticsService">
            <summary>
            A view-intrinsic brokered service that can analyze why that particular <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> is incapable of producing some requested service.
            This service is accessible via <see cref="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnostics" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.MissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedRemoteServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceBroker.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.AvailabilityChanged">
            <summary>
            We never raise this event, so just drop the handlers on the floor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory.Microsoft#ServiceHub#Framework#IRemoteServiceBroker#CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ViewIntrinsicBrokeredServiceFactory">
            <summary>
            This delegate is modeled after <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.ProfferedServiceFactory" /> but adds the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> parameter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult">
            <devremarks>
            Although these enum values are each set to unique bits, it isn't a flags enum.
            They are unique bits to allow convenient packing as we internally track which result types we've already posted telemetry events for.
            </devremarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.monikersWithPostedEvents">
            <summary>
            A dictionary mapping service monikers to a union bitmask of <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestResult" /> for which the monikers have had posted telemetry events.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View">
            <summary>
            A filtered view on the services proffered to a <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" />, exposed as an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.container">
            <summary>
            The owner of this view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.observedServices">
            <summary>
            The set of services that have been queried for (whether or not they were found)
            since the last time the <see cref="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.AvailabilityChanged" /> event has been raised regarding them.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.#ctor(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View" /> class.
            </summary>
            <param name="container">The parent container.</param>
            <param name="audience">
            The audience for this <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            Each flag specified applies an additional filter (i.e. fewer exposed services).
            Use <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None" /> to make *all* services available (to be used for local consumption only).
            </param>
            <param name="clientCredentials">The client credentials to apply to incoming requests.</param>
            <param name="clientCredentialsPolicy">Specifies which client credentials prevails when the service request contains non-empty credentials.</param>
            <param name="clientCulture">The value to apply to service requests when <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture" /> is <c>null</c>.</param>
            <param name="clientUICulture">The value to apply to service requests when <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientUICulture" /> is <c>null</c>.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.AvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.Audience">
            <summary>
            Gets the filter to apply to services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.SyncObject">
            <summary>
            Gets an object that this class can lock on to synchronize field access.
            </summary>
            <remarks>
            We return a private field because that's good enough, and it avoids an extra allocation of a dedicated sync object.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.View.OnAvailabilityChanged(System.Object,System.ValueTuple{System.Collections.Immutable.ImmutableDictionary{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource,System.Collections.Immutable.ImmutableDictionary{Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered}},System.Collections.Immutable.ImmutableHashSet{Microsoft.ServiceHub.Framework.ServiceMoniker}})">
            <summary>
            Raises the <see cref="E:Microsoft.ServiceHub.Framework.IServiceBroker.AvailabilityChanged" /> event.
            </summary>
            <param name="sender">Unused.</param>
            <param name="args">The arguments for the event. The set of impacted services must be a hash-based collection so we can use Intersect on it.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IRequestTelemetry">
            <summary>
            Allows an implementation of <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IProffered" /> to customize the Request telemetry generation
            by creating the event and setting specific properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.IRequestTelemetry.ShouldPostEvent(Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestType,Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer.RequestTelemetryEvent@)">
            <summary>
            Determines whether a telemetry event should be posted,
            and if so, creates the request telemetry event.
            </summary>
            <param name="requestType">The request type.</param>
            <param name="telemetryEvent">A not null telemetry event if the request should be posted.</param>
            <returns><see langword="true" /> if the event should be posted.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService">
            <summary>
            Provides diagnostics to understand why brokered services are not activatable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Analyzes possible explanations for why a brokered service could not be acquired.
            </summary>
            <param name="missingServiceMoniker">The moniker of the missing brokered service.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An analysis describing the first problem encountered while looking for the brokered service.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode">
            <summary>
            Defines the several reasons a brokered service might not be obtained.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.NoExplanation">
            <summary>
            Nothing could be found wrong to explain the missing service.
            It may be available now.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.NotLocallyRegistered">
            <summary>
            The requested service had no match in the local service registry.
            </summary>
            <remarks>
            All services, whether local or remote, must be in the local registry in order to be acquired locally.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ChaosConfigurationDeniedRequest">
            <summary>
            Special resiliency testing configuration is in place and denied access to this service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.LocalServiceHiddenOnExclusiveClient">
            <summary>
            The service is expected to come from an exclusive server (e.g. a Codespace Server)
            but the connection is not ready yet or the server does not offer it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceAudienceMismatch">
            <summary>
            The service is not exposed to the audience making the request.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryNotProffered">
            <summary>
            The service is registered but no factory has been loaded for it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryReturnedNull">
            <summary>
            The service factory returned null instead of an instance of the service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.ServiceFactoryFault">
            <summary>
            The service factory threw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode.LocalServiceHiddenOnRemoteClient">
            <summary>
            The service is expected to come from a remote server
            but the connection is not ready yet or the server does not offer it.
            A locally proffered service is not available when it also can come remotely and a remote connection exists or is expected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis">
            <summary>
            Contains the result of a missing service analysis as returned from <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.IMissingServiceDiagnosticsService.AnalyzeMissingServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.#ctor(Microsoft.VisualStudio.Utilities.ServiceBroker.MissingBrokeredServiceErrorCode,System.Nullable{Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis" /> class.
            </summary>
            <param name="errorCode">The error code explaining why the service could not be obtained.</param>
            <param name="expectedSource">The source that the service was expected to come from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.ErrorCode">
            <summary>
            Gets the error code explaining why the service could not be obtained.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.MissingServiceAnalysis.ExpectedSource">
            <summary>
            Gets the source that the service was expected to come from.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.HandshakeAsync(Microsoft.ServiceHub.Framework.ServiceBrokerClientMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.RequestServiceChannelAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.RemoteServiceBrokerWrapper.CancelServiceRequestAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerStrings.ServiceMoniker_AlreadyProffered">
            <summary>
              Looks up a localized string similar to The service "{0}" has already been proffered. Dispose the result of the last proffered factory before proffering another one..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerUtilities.DeferredFormatting(System.Func{System.String})">
            <summary>
            Creates an object whose <see cref="M:System.Object.ToString" /> method defers to a given delegate.
            </summary>
            <param name="formatter">
            The delegate that will construct the string.
            This may be called concurrently or repeatedly.
            After returning a non-null value it will not be called again as its value will be cached.
            </param>
            <returns>An object whose <see cref="M:System.Object.ToString" /> will invoke the <paramref name="formatter" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceBrokerUtilities.WriteToPipe(System.IO.Pipelines.PipeWriter,System.Buffers.ReadOnlySequence{System.Byte})">
            <summary>
            Copies a sequence of bytes to a <see cref="T:System.IO.Pipelines.PipeWriter" />.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="sequence">The sequence to read.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.Audience">
            <summary>
            Gets the intended audiences for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.AllowGuestClients">
            <summary>
            Gets a value indicating whether this service is exposed to non-Owner clients.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.ProfferingPackageId">
            <summary>
            Gets the ID of the package to load so that this service will actually be proffered.
            </summary>
            <remarks>
            If this is null, the <see cref="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.LoadProfferingPackageAsync(System.Threading.CancellationToken)" /> method can be assumed to be a no-op.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedLocally">
            <summary>
            Gets a value indicating whether this service is exposed to local clients relative to itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedRemotely">
            <summary>
            Gets a value indicating whether this service is exposed to remote clients relative to itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.IsExposedTo(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience)">
            <summary>
            Gets a value indicating whether this service is approved for consuming by a given audience.
            </summary>
            <param name="consumingAudience">The candidate audience that would like to get this service.</param>
            <returns>A value indicating whether the service permits access by the given audience.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceRegistration.LoadProfferingPackageAsync(System.Threading.CancellationToken)">
            <summary>
            Triggers the call to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
            the service represented by this registration if the service has not yet been proffered.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.SameProcess">
            <summary>
            The services are proffered from within this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.OtherProcessOnSameMachine">
            <summary>
            The services are proffered by local (and trusted) sources, outside this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedServer">
            <summary>
            The services are proffered by a remote server (e.g. Live Share host) that is under the control of the same user account as the local one (the guest who is joining the session).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.UntrustedServer">
            <summary>
            The services are proffered by a remote server (e.g. Live Share host) that is NOT under the control of the same user account as the local one (the guest who is joining the session).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedExclusiveServer">
            <summary>
            The services are proffered by a remote server that is under the control of the same user account as the local one
            using an exclusive connection (that isn't the traditional Live Share sharing session).
            For example a Codespace server.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.ServiceBroker.ServiceSource.TrustedExclusiveClient">
            <summary>
            The services are proffered by a remote <em>client</em> under the control of the same user account as the local one.
            This is a special 1:1 relationship.
            For example the client of a Codespace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.SimpleCache`1">
            <summary>
            A simple cache of <typeparamref name="T" /> instances.  If adding an item to the cache would
            cause it exceed its maximum size, the least recently accessed item is removed from the cache.
            </summary>
            <typeparam name="T">The type of value stored in the cache</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes the <see cref="T:Microsoft.VisualStudio.Utilities.SimpleCache`1" /> instance
            </summary>
            <param name="comparer">
            The IEqualityComparer{T} implementation to use when comparing values in the cache,
            or null to use the default EqualityComparer{T} implementation for the cache type.
            </param>
            <param name="maxSize">
            The maximum size of the cache.  If adding an item to the cache would cause the
            cache size to exceed this value, the least recently accessed item in the cache
            is removed.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.TryGetValue(`0,`0@)">
            <summary>
            Attempts to fetch a value from the cache.
            </summary>
            <param name="value">The value to fetch</param>
            <param name="cachedValue">
            The cached value, that the equality comparer determined was equal to <paramref name="value" />
            </param>
            <returns>
            True if an item equal to <paramref name="value" /> was returned from the cache, otherwise false.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.SimpleCache`1.Count">
            <summary>
            The number of items in the cache
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.SimpleCache`1.IsReadOnly">
            <summary>
            Indicates whether the cache is read-only
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.Add(`0)">
            <summary>
            Adds an item to the cache.  If adding the item would cause the cache to exceed its
            maximum size, the least recently accessed item is removed from the cache.
            </summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.Contains(`0)">
            <summary>
            Determines whether the cache contains <paramref name="value" />
            </summary>
            <param name="value">The value to search for</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the cache to an array
            </summary>
            <param name="array">The array to write to</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.Remove(`0)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="value">The value to remove</param>
            <returns>True if <paramref name="value" />, or false if <paramref name="value" /> was not in the cache</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleCache`1.Entry.Touch">
            <summary>
            Sets the last access time for this entry to the current time
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.SimpleDynamicMemberAccessor">
            <summary>
            Allows limited dynamically typed access to instance properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.SimpleDynamicMemberAccessor.TryGetProperty``1(System.Object,System.String,``0@)">
            <summary>
            Attempts to get a value of a property of given object <paramref name="instance" />.
            </summary>
            <typeparam name="T">Return type of the <paramref name="propertyName" /> property.</typeparam>
            <param name="instance">Object instance whose property is being gotten.</param>
            <param name="propertyName">The case sensitive name of the property.</param>
            <param name="propertyValue">Return value of the property.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.Read">
            <summary>
            Specifies read access to the stream
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.Write">
            <summary>
            Specifies write access to the stream
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.StreamAccess.ReadWrite">
            <summary>
            Specifies read/write access to the stream
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.StreamAccessException">
            <summary>
            Represents an error that occured when trying to access a Stream in storage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.StreamException">
            <summary>
            Represents errors that occur when accessing Stream storage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.StreamNotFoundException">
            <summary>
            Represents the error that occurs when a Stream is not found in storage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1">
            <summary>
            Monitors the size of an IStreamStorage via its IStreamStorageEvents interface.
            If the  number of streams or the collective size of streams in the storage 
            exceed  given target thresholds, streams are deleted from the storage until
            the number/size of streams falls below the target thresholds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.#ctor(Microsoft.VisualStudio.Utilities.IStreamStorage{`0},System.Int32,System.Int64,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a StreamStorageMonitor
            </summary>
            <param name="storage">
            The stream storage object to monitor.  The storage object must implement
            IStreamStorageEvents&lt;<typeparamref name="TKey" />&gt;.
            </param>
            <param name="maxStreamCount">
            The maximum number of streams permitted in the storage.  If the number of
            streams exceeds <paramref name="maxStreamCount" />, streams are deleted in
            least-recently-accessed order.  If <paramref name="maxStreamCount" /> is -1,
            there is no limit on the number of streams.
            </param>
            <param name="maxStorageSize">
            The maximum cumulative size of the streams permitted in the storage.  If 
            cumulative size of the streams exceeds <paramref name="maxStorageSize" />, streams
            are deleted in least-recently-accessed order.  If <paramref name="maxStorageSize" /> 
            is -1, there is no limit on the cumulative size of the streams.
            </param>
            <param name="enable">
            Indicates whether the monitor will be initially enabled.
            </param>
            <param name="keyComparer">
            The equality comparer used to compare the keys in the storage.  If this value 
            is null, the default equality comparer for <typeparamref name="TKey" /> is used.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.ValidateLimits(System.Int32,System.Int64)">
            <summary>
            Validates the maxStreamCount and maxStorageSize parameters for the constructor.
            Public visibility so VS can pre-validate the parameters before sending them off
            to the VsHub service module, where invalid arguments will be much less visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.DisposeManagedResources">
            <summary>
            Disposes managed resources for this object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.EnableMonitoring">
            <summary>
            Indicates whether the monitor is enabled
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.StreamCount">
            <summary>
            The number of streams in the storage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.StorageSize">
            <summary>
            The cumulative size of all the streams in the storage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.WatchingStreamCount">
            <summary>
            Indicates whether the object is monitoring the number of streams in the storage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.WatchingStorageSize">
            <summary>
            Indicates whether the object is monitoring the cumulative size of the streams in the storage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.StorageNeedsScrubbing">
            <summary>
            Indicates whether the storage's contents exceed either the stream count or size
            limitations imposed at startup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.LastScrubTask">
            <summary>
            The most recently scheduled task that will scrub the storage.
            Internal visibility for unit testing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.InitializeStreamTable">
            <summary>
            Initializes the table of streams
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.AddStreamInfo(`0)">
            <summary>
            Adds a StreamInfo for the stream identified by <paramref name="key" /> to the stream table
            </summary>
            <param name="key">The key for the stream to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.RemoveStreamInfo(`0)">
            <summary>
            Removes a StreamInfo for the stream identified by <paramref name="key" /> from the stream table
            </summary>
            <param name="key">The key for the stream to remove</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.UpdateStreamInfo(`0)">
            <summary>
            Updates a StreamInfo for the stream identified by <paramref name="key" /> 
            </summary>
            <param name="key">The key for the stream to update</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.ScheduleScrubStorage">
            <summary>
            Schedules a task to scrub the storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.ScrubStorage">
            <summary>
            Scrubs the streams in the storage if the storage exceeds the monitor's constraints
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.GetStreamInfo(`0)">
            <summary>
            Returns the StreamInfo for a stream
            </summary>
            <param name="key">The key for the stream whose info is requested</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.GetStreamSize(`0)">
            <summary>
            Returns the size of the stream in the storage
            </summary>
            <param name="key">The key for the stream whose size is requested</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.HookEvents">
            <summary>
            Hooks interesting events on the storage events interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.UnhookEvents">
            <summary>
            Unhooks interesting events on the storage events interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.OnStreamCreated(System.Object,`0)">
            <summary>
            Handles the StreamCreated event from the storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.OnStreamDeleted(System.Object,`0)">
            <summary>
            Handles the StreamCreated event from the storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.OnStreamChanged(System.Object,`0)">
            <summary>
            Handles the StreamCreated event from the storage
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.StreamInfo.Size">
            <summary>
            The size of the stream 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.StreamStorageMonitor`1.StreamInfo.LastAccessTime">
            <summary>
            The time the stream was lasted accessed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.Creation">
            <summary>
            Describes a timestamp the represents the creation time of an object
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.LastAccess">
            <summary>
            Describes a timestamp the represents the last access time of an object
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.TimestampKind.LastWrite">
            <summary>
            Describes a timestamp the represents the last write time of an object
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.TracedEvent">
            <summary>
            Event wrapper that keeps the history of whether the event has fired before.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.TracedEvent.HasFired">
            <summary>
            Gets a value indicating whether the event has fired before.
            Use <see cref="M:Microsoft.VisualStudio.Utilities.TracedEvent.AttachIfNotFired(System.Action,System.Boolean)" /> instead of using this property if you want to attach an event handler only if the event has not fired before.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TracedEvent.Fire">
            <summary>
            Fire the event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TracedEvent.Attach(System.Action)">
            <summary>
            Attach the event handler.
            </summary>
            <param name="handler">The event handler to attach, not null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TracedEvent.Remove(System.Action)">
            <summary>
            Remove the event handler.
            </summary>
            <param name="handler">The event handler to remove, not null.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TracedEvent.AttachIfNotFired(System.Action,System.Boolean)">
            <summary>
            Attach the event handler only if the event has not fired before.
            You may specify <paramref name="invokeIfFired" /> = true if you want to invoke the <paramref name="handler" /> right away
            if the event has fired before.
            </summary>
            <param name="handler">The event handler to attach, not null.</param>
            <param name="invokeIfFired">A value indicating whether to invoke the <paramref name="handler" /> if the event has fired before.</param>
            <returns>True if the handler is attached; Otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.TraceSourceExtensionMethods">
            <summary>
            Extension methods for making it easier to use TraceSource instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ITracer.Source">
            <summary>
            The TraceSource for the tracer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ITracer.Level">
            <summary>
            The verbosity level of the tracer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ITracer.IndentLevel">
            <summary>
            The indentation level of the tracer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Traces an event.
            </summary>
            <param name="eventType">Type type of the event being traced</param>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceError(System.String,System.Object[])">
            <summary>
            Traces an Error event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceWarning(System.String,System.Object[])">
            <summary>
            Traces a warning event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceInformation(System.String,System.Object[])">
            <summary>
            Traces an information event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceVerbose(System.String,System.Object[])">
            <summary>
            Traces a verbose event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.TraceException(System.Exception,System.Diagnostics.TraceEventType)">
            <summary>
            Traces an exception.
            </summary>
            <param name="ex">The exception to trace</param>
            <param name="eventType">The type of event to trace</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.ShouldTrace(System.Diagnostics.TraceEventType)">
            <summary>
            Determines if trace listeners should be called, based on the trace event type.
            </summary>
            <param name="eventType">The type of event to test</param>
            <returns>True if the trace listeners should be called; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ITracer.Indent(System.Int32)">
            <summary>
            Increases the indent level by <paramref name="count" />
            </summary>
            <param name="count">The number of levels by which <see cref="P:Microsoft.VisualStudio.Utilities.ITracer.IndentLevel" /> is increased</param>
            <returns>
            An object whose lifetime controls the indentation increase.  When it is
            disposed, <see cref="P:Microsoft.VisualStudio.Utilities.ITracer.IndentLevel" /> is decreased by <paramref name="count" />.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Tracer.Source">
            <summary>
            The TraceSource for the tracer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Tracer.Level">
            <summary>
            The verbosity level of the tracer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Tracer.IndentLevel">
            <summary>
            The indentation level of the tracer
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Trace(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Traces an event.
            </summary>
            <param name="eventType">Type type of the event being traced</param>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceError(System.String,System.Object[])">
            <summary>
            Traces an Error event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceWarning(System.String,System.Object[])">
            <summary>
            Traces a warning event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceInformation(System.String,System.Object[])">
            <summary>
            Traces an information event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceVerbose(System.String,System.Object[])">
            <summary>
            Traces a verbose event.
            </summary>
            <param name="message">The message to display</param>
            <param name="args">The arguments to format into the message</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.TraceException(System.Exception,System.Diagnostics.TraceEventType)">
            <summary>
            Traces an exception.
            </summary>
            <param name="ex">The exception to trace</param>
            <param name="eventType">The type of event to trace</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.ShouldTrace(System.Diagnostics.TraceEventType)">
            <summary>
            Determines if trace listeners should be called, based on the trace event type.
            </summary>
            <param name="eventType">The type of event to test</param>
            <returns>True if the trace listeners should be called; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.Indent(System.Int32)">
            <summary>
            Increases the indent level by <paramref name="count" />
            </summary>
            <param name="count">The number of levels by which <see cref="P:Microsoft.VisualStudio.Utilities.Tracer.IndentLevel" /> is increased</param>
            <returns>
            An object whose lifetime controls the indentation increase.  When it is
            disposed, <see cref="P:Microsoft.VisualStudio.Utilities.Tracer.IndentLevel" /> is decreased by <paramref name="count" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.FormatMessage(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Formats the trace message string for alignment and indentaion before output 
            </summary>
            <param name="eventType">The event type being traced</param>
            <param name="format">The format string</param>
            <param name="args">The arguments to substitute into the format string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.BuildExceptionTraceMessage(System.Exception)">
            <summary>
            Builds a string for the exception chain rooted at <paramref name="ex" />
            </summary>
            <param name="ex">The root exception</param>
            <returns>The string representation of the exception chain</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.GetStringBuilder">
            <summary>
            Returns a StringBuilder for the Tracer to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Tracer.GetAlignmentString(System.Diagnostics.TraceEventType)">
            <summary>
            Returns the string needed to ensure that output from the tracer is nicely aligned, like so:
            
                ImageLibrary Error: 0 :       Error trace
                ImageLibrary Warning: 0 :     Warning trace
                ImageLibrary Information: 0 : Information trace
                ImageLibrary Verbose: 0 :     Verbose trace
            
            </summary>
            <param name="eventType">The event type being traced</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VARIANT">
            <summary>
            Variant is the basic COM type for late-binding. It can contain any other COM data type.
            This type definition precisely matches the unmanaged data layout so that the struct can be passed
            to and from COM calls.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader">
            <summary>
            Specialization of BinaryReader that reads a versioned byte stream.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadCallback">
            <summary>
            Delegate that will read the body of the stream.
            </summary>
            <param name="reader">The VersionedBinaryReader</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.MultiVersionReadCallback">
            <summary>
            Delegate that will read the body of the stream.  It explicitly
            handles the case where <paramref name="actualVersion" /> does not
            equal <paramref name="expectedVersion" />.
            </summary>
            <param name="reader">The VersionedBinaryReader</param>
            <param name="expectedVersion">The expected stream version</param>
            <param name="actualVersion">The actual stream version</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadCallback,System.Boolean)">
            <summary>
            Reads from the base stream, with version checking.
            </summary>
            <param name="expectedVersion">The expected version of the stream.
            If the actual version doesn't match the expected version, the
            stream position is advanced beyond the content but <paramref name="callback" />
            is not invoked.
            </param>
            <param name="callback">The delegate that will read the body of the stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryReader.MultiVersionReadCallback)">
            <summary>
            Reads from the base stream, with version checking.  <paramref name="callback" />
            is invoked regardless of the version of the stream.  Use this overload if you
            want to support reading stream versions other than the expected version.
            </summary>
            <param name="expectedVersion">The expected version of the stream.</param>
            <param name="callback">The delegate that will read the body of the stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryReader.ReadHeader">
            <summary>
            Reads the header of the versioned stream.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter">
            <summary>
            Specialization of BinaryWriter that writes a versioned byte stream.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.HeaderLength">
            <summary>
            The length in bytes of the version header written to the VersionedBinaryWriter's stream
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteCallback">
            <summary>
            Delegate that will write the body of the stream.
            </summary>
            <param name="writer">The VersionedBinaryWriter</param>
            <param name="version">The version of the stream.  It is for
            reference only; the delegate does not have to write it to
            the stream.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteVersioned(System.Int32,Microsoft.VisualStudio.Utilities.VersionedBinaryWriter.WriteCallback)">
            <summary>
            Writes versioning header to a stream, the calls a delegate to write
            the meat of the data.
            </summary>
            <param name="version">Version number to write</param>
            <param name="callback">The delegate that will write the body of the stream</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.WpfExtensions.GetWidth(System.Windows.Thickness)">
            <summary>
            Returns the total width of a <see cref="T:System.Windows.Thickness" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.WpfExtensions.GetHeight(System.Windows.Thickness)">
            <summary>
            Returns the total height of a <see cref="T:System.Windows.Thickness" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject">
            <summary>
            An observable object that can raise its <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
            events asynchronously, on the main thread.
            </summary>
            <remarks>
            If <see cref="T:Microsoft.VisualStudio.PlatformUI.ObservableObject" />.SetProperty is called to set a property's value, the
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event is raised on the ambient thread.
            If <see cref="T:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject" />.SetPropertyNotifyAsync is called to set a property's
            value, the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event is raised on the
            main thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject" /> class.
            </summary>
            <param name="jtf">
            The task factory used to change threads before raising the
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.NotifyPropertyChangedAsync(System.Threading.CancellationToken,System.String)">
            <summary>
            Notifies of a change to a property on this object.  The <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
            event is raised on the main thread.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that changed.</param>
            <returns>
            A task that will complete once the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event
            has been raised.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.SetPropertyNotifyAsync``1(``0@,``0,System.Threading.Tasks.Task@,System.Threading.CancellationToken,System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value
            and asynchronously notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="notificationTask">
            If the property hasn't changed, this will be <see cref="P:System.Threading.Tasks.Task.CompletedTask" />.
            If the property has changed, this will be a task that will complete once the
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event has been raised.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that is changing.</param>
            <returns><c>true</c> if the property value changed, <c>false</c> if it did not change.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.SetPropertyNotifyAsync``1(``0@,``0,System.Action,System.Threading.Tasks.Task@,System.Threading.CancellationToken,System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value
            and asynchronously notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="beforeNotifyAction">An action to call if the value changes, before notifying property changes.</param>
            <param name="notificationTask">
            If the property hasn't changed, this will be null.  If the property has changed, this will
            be a task that will complete once the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event
            has been raised.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that is changing.</param>
            <returns><c>true</c> if the property value changed, <c>false</c> if it did not change.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.SetPropertyNotifyAsync``1(``0@,``0,System.Action{``0,``0},System.Threading.Tasks.Task@,System.Threading.CancellationToken,System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value
            and asynchronously notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="beforeNotifyAction">An action to call if the value changes, before notifying property changes.</param>
            <param name="notificationTask">
            If the property hasn't changed, this will be null.  If the property has changed, this will
            be a task that will complete once the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event
            has been raised.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that is changing.</param>
            <returns><c>true</c> if the property value changed, <c>false</c> if it did not change.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.SetPropertyNotifyAsync(System.IntPtr@,System.IntPtr,System.Threading.Tasks.Task@,System.Threading.CancellationToken,System.String)">
            <summary>
            Checks for a change to an <see cref="T:System.IntPtr" /> value, and if the value is different, stores the value
            and asynchronously notifies of property changes.
            </summary>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="notificationTask">
            If the property hasn't changed, this will be null.  If the property has changed, this will
            be a task that will complete once the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event
            has been raised.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that is changing.</param>
            <returns><c>true</c> if the property value changed, <c>false</c> if it did not change.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AsyncObservableObject.SetPropertyNotifyAsync(System.UIntPtr@,System.UIntPtr,System.Threading.Tasks.Task@,System.Threading.CancellationToken,System.String)">
            <summary>
            Checks for a change to a <see cref="T:System.UIntPtr" /> value, and if the value is different, stores the value
            and asynchronously notifies of property changes.
            </summary>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="notificationTask">
            If the property hasn't changed, this will be null.  If the property has changed, this will
            be a task that will complete once the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event
            has been raised.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="propertyName">The name of the property that is changing.</param>
            <returns><c>true</c> if the property value changed, <c>false</c> if it did not change.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ColorUtilities.GetContrastRatio(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Returns the contrast ratio between <paramref name="foreground" /> and <paramref name="background" />.
            according to https://www.w3.org/TR/WCAG20/#contrast-ratiodef.
            </summary>
            <param name="foreground">A foreground color which may be partially transparent</param>
            <param name="background">A background color which is assumed to be opaque</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ColorUtilities.CompareContrastWithBlackAndWhite(System.Windows.Media.Color)">
            <summary>
            Calculates the contrast ratio of the specified color against both black and white
            and returns which one has better contrast ratio.
            </summary>
            <param name="color">A color which is assumed to be opaque.</param>
            <returns>Which of black or white has highest contrast ratio, or if they are equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ColorUtilities.Blend(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Computes the result of alpha-blending this color over the background
            using the algorithm described at https://en.wikipedia.org/wiki/Alpha_compositing.
            </summary>
            <param name="foreground">A foreground color which may be partially transparent</param>
            <param name="background">A background color which is assumed to be opaque</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ColorUtilities.GetLuminance(System.Windows.Media.Color)">
            <summary>
            Gets the luminance of a color in sRGB colorspace according to https://www.w3.org/TR/WCAG20/#relativeluminancedef
            </summary>
            <param name="color">The color whose luminance is to be computed.</param>
            <returns>The luminance value of <paramref name="color" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ColorUtilities.GetBrushFromCache(System.Windows.Media.Color)">
            <summary>
            Get a brush that corresponds to a color. The brushes are stored in a cache.
            </summary>
            <param name="color">The color used to get the brush</param>
            <returns>The brush that corresponds to the color</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContrastComparisonResult.ContrastHigherWithBlack">
            <summary>
            The color has highest contrast with black.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContrastComparisonResult.ContrastHigherWithWhite">
            <summary>
            The color has highest contrast with white.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContrastComparisonResult.Equal">
            <summary>
            Both contrasts are equal.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AddingConverter">
            <summary>
            A converter that returns the product of its inputs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AddingConverter.ConvertOverride(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the product of all the elements in <paramref name="values" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConversionHelpers.ToDouble(System.Object,System.Globalization.CultureInfo,System.Double)">
            <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="culture">
            If <paramref name="value" /> is a string, <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> is first
            passed as the second parameter to to <see cref="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)" />
            to attempt to convert the string to a <see cref="T:System.Double" />.
            <para>
            If that conversion fails, then this culture is
            passed as the second parameter to to <see cref="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)" />
            to attempt to convert the string to a <see cref="T:System.Double" />.
            </para>
            </param>
            <param name="defaultValue">
            The value to return if <paramref name="value" /> cannot be converted to a <see cref="T:System.Double" />
            </param>
            <returns>
            The converted value.  If the conversion fails, <paramref name="defaultValue" /> is returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConversionHelpers.ToColor(System.Object)">
            <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="value">The value to convert.
            The value to convert.  It can be one of the following types:
            <list type="bullet">
            <term><see cref="T:System.Windows.Media.Color" /></term>
            <term><see cref="T:System.Windows.Media.SolidColorBrush" /></term>
            <term>A <see cref="T:System.String" /> that can be converted by <see cref="M:System.Windows.Media.ColorConverter.ConvertFromString(System.String)" /></term>
            </list>
            </param>
            <returns>
            The converted color, or <c>null</c> if <paramref name="value" /> cannot be converted to a
            <see cref="T:System.Windows.Media.Color" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConversionHelpers.MatchesType``1(System.Object)">
            <summary>
            Checks if a value matches a possible nullable type.
            If the value is null, it is a match for reference type and any nullable type.
            </summary>
            <typeparam name="T">The expected type</typeparam>
            <param name="value">The object under test</param>
            <returns>Whehter or not the value matches the expected type T</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeValueNotOfTypeException(System.Object,System.Type,System.Type,System.String,System.String)">
            <summary>
            Creates an exception for "value not of expected type"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeValueAtOffsetNotOfTypeException(System.Object,System.Type,System.Type,System.String,System.Int32,System.String)">
            <summary>
            Creates an exception for "value at offset not of expected type"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeTargetNotExtendingTypeException(System.Object,System.Type,System.Type,System.String)">
            <summary>
            Creates an exception for "target type not extending type"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeTargetAtOffsetNotExtendingTypeException(System.Object,System.Type,System.Type,System.Int32,System.String)">
            <summary>
            Creates an exception for "target type at offset not extending type"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeConverterFunctionNotDefinedException(System.Object,System.String)">
            <summary>
            Creates an exception for "converter function not defined"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeInsufficientSourceParametersException(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Creates an exception for "insufficient source parameters"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ConverterExceptionHelpers.MakeInsufficientTypeParametersException(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Creates an exception for "insufficient type parameters"
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MathConverter">
            <summary>
            The base class for a converter that performs mathematical operations on its inputs.
            </summary>
            <remarks>
            If any of the inputs are strings, they will be converted to doubles using the InvariantCulture.
            If the string cannot be converted using the InvariantCulture, it will be converted to a double
            using the culture parameter passed to Convert.  If the string cannot be converted using the given
            culture, then it will be converted to Double.NaN.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MathConverter.DefaultValue">
            <summary>
            The value to use for <see cref="M:Microsoft.VisualStudio.PlatformUI.MathConverter.ConvertOverride(System.Collections.Generic.IEnumerable{System.Double})" /> if one is not provided
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MathConverter.ConvertOverride(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Performs a mathematical operation on all the elements of <paramref name="values" />
            </summary>
            <returns>The result of the mathematical operation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MathConverter.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the result of a math operation on <paramref name="value" /> and <paramref name="parameter" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MathConverter.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the result of a math operation on all the elements in <paramref name="values" />, as well as
            <paramref name="parameter" /> (if provided).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MaximumContrastConverter">
            <summary>
            Converts from a given <see cref="T:System.Windows.Media.Color" />/<see cref="T:System.Windows.Media.Brush" /> to the
            <see cref="T:System.Windows.Media.Color" />/<see cref="T:System.Windows.Media.Brush" /> that has the maximum contrast
            with the input value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MaximumContrastConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" />.
            </summary>
            <param name="value">
            The value to convert.  It can be one of the following types:
            <list type="bullet">
            <term><see cref="T:System.Windows.Media.Color" /></term>
            <term><see cref="T:System.Windows.Media.SolidColorBrush" /></term>
            <term>A <see cref="T:System.String" /> that can be converted by <see cref="M:System.Windows.Media.ColorConverter.ConvertFromString(System.String)" /></term>
            </list>
            </param>
            <param name="targetType">The output type requested (<see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" /></param>
            <param name="parameter">
            [Optional] An opacity value in the range [0.0..1.0].  The returned value has this opacity applied to it.
            </param>
            <param name="culture">The culture</param>
            <returns>
            A white or black <see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" />, depending on which contrasts
            more with <paramref name="value" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MaximumContrastConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <paramref name="values" /> to a <see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" />.
            </summary>
            <param name="values">
            The three values to convert.  The values are specified in the following order:
            <list type="number">
            <term>The source color</term>
            <term>The light color to use for contrast compoarison (commonly <see cref="P:System.Windows.Media.Colors.White" />)</term>
            <term>The dark color to use for contrast compoarison (commonly <see cref="P:System.Windows.Media.Colors.Black" />)</term>
            </list>
            Each of the values can be one of the following types:
            <list type="bullet">
            <term><see cref="T:System.Windows.Media.Color" /></term>
            <term><see cref="T:System.Windows.Media.SolidColorBrush" /></term>
            <term>A <see cref="T:System.String" /> that can be converted by <see cref="M:System.Windows.Media.ColorConverter.ConvertFromString(System.String)" /></term>
            </list>
            </param>
            <param name="targetType">The output type requested (<see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" /></param>
            <param name="parameter">
            [Optional] An opacity value in the range [0.0..1.0].  The returned value has this opacity applied to it.
            </param>
            <param name="culture">The culture</param>
            <returns>
            A white or black <see cref="T:System.Windows.Media.Color" /> or <see cref="T:System.Windows.Media.Brush" />, depending on which contrasts
            more with <paramref name="values" />[0].
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MultiplyingConverter">
            <summary>
            A converter that returns the product of its inputs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiplyingConverter.ConvertOverride(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the product of all the elements in <paramref name="values" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1">
            <summary>
            These types are forwarded from MS.VS.Shell.14.dll
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Primary <see cref="M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)" /> entry point
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Primary <see cref="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)" /> entry point
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ExpectedSourceValueCount">
            <summary>
            The number of source values converted by the multi-value converter.  This is the total
            number of generic arguments in the derived class, less one for <typeparamref name="TTarget" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ValidateConvertParameters(System.Object[],System.Type)">
            <summary>
            Validates the parameters passed to IMultiValueConverter.Convert
            </summary>
            <param name="values">The values to convert</param>
            <param name="targetType">The type to convert to</param>
            <returns>True if the conversion can continue, false if it cannot</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.ValidateConvertBackParameters(System.Object,System.Type[])">
            <summary>
            Validates the parameters passed to IMultiValueConverter.ConvertBack
            </summary>
            <param name="value">The value to convert back</param>
            <param name="targetTypes">The types to convert back to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MultiValueConverterBase`1.CheckValue``1(System.Object[],System.Int32,System.String)">
            <summary>
            Validates that <paramref name="values" />[<paramref name="index" />] is of type <typeparamref name="T" />
            </summary>
            <returns>
            <paramref name="values" />[<paramref name="index" />], cast to type <typeparamref name="T" />
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ValueConverter`2">
            <summary>
            This type is forwarded from MS.VS.Shell.xx.dll
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1">
            <summary>
            Implementation of ICommand where the Execute and CanExecute callbacks are handled by delegates.
            </summary>
            <typeparam name="T">The parameter type for the Execute and CanExecute delegates</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1" /> class.  Using this constructor
            to initialize the DelegateCommand results in a command that can always execute.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1.#ctor(System.Action{`0},System.Predicate{`0},Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
            <param name="jtf">
            The task factory for the command.  If this is non-null, the command will switch to the
            main thread before raising the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /> event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether this command is executable.
            </summary>
            <param name="parameter">A parameter to pass to the canExecute delegate (specified in the constructor).</param>
            <returns>True if the command is executable or if the canExecute given during initialization was null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">A parameter to pass to the execute delegate (specified in the constructor).</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand">
            <summary>
            Implementation of ICommand where the Execute and CanExecute callbacks are handled by delegates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.  Using this constructor
            to initialize the DelegateCommand results in a command that can always execute.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object},Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
            <param name="jtf">
            The task factory for the command.  If this is non-null, the command will switch to the
            main thread before raising the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /> event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.  Using this constructor
            to initialize the DelegateCommand results in a command that can always execute.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommand" /> class.
            </summary>
            <param name="execute">The action to run when the command is executed.</param>
            <param name="canExecute">The function to evaluate whether this command is executable.  If this
            parameter is null, the command is always executable.</param>
            <param name="jtf">
            The task factory for the command.  If this is non-null, the command will switch to the
            main thread before raising the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /> event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether this command is executable.
            </summary>
            <param name="parameter">A parameter to pass to the canExecute delegate (specified in the constructor).</param>
            <returns>True if the command is executable or if the canExecute given during initialization was null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommand.Execute(System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">A parameter to pass to the execute delegate (specified in the constructor).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommandBase.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.DelegateCommandBase" /> class.
            </summary>
            <param name="jtf">
            The task factory for the command.  If this is non-null, the command will switch to the
            main thread before raising the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" /> event.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.DelegateCommandBase.CanExecuteChanged">
            <summary>
            An event that is fired when the executable state of this command changes.
            Call RaiseCanExecuteChanged to force listeners to update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DelegateCommandBase.CanExecuteDependsOn(System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
             Adds a property upon which this command's CanExecute state depends.
             When the property changes, this command will raise CanExecuteChanged
            </summary>
            <param name="source">The object instance whose properties will be observed</param>
            <param name="propertyName">The property to be observed</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DispatchedDelegateCommand`1">
            <summary>
            Implementation of ICommand using delegates, where 'execute' delegate will be dispatched to the end
            of the current dispatcher queue with the given priority, allowing UI to refresh 'can execute' state
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DispatchedDelegateCommand">
            <summary>
            Implementation of ICommand using delegates, where 'execute' delegate will be dispatched to the end of
            the current dispatcher queue with the given priority, allowing UI to refresh 'can execute' state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DisposableObject">
            <summary>
            This type is forwarded from MS.VS.Shell.xx.dll
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose">
            <summary>
            Disposes the current object then suppresses further finalization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DisposableObject.IsDisposed">
            <summary>
            Returns whether the object has been disposed once, protects against double disposal
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.DisposableObject.Disposing">
            <summary>
            Raised when the event is being disposed, while it is still accessible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.ThrowIfDisposed">
            <summary>
            Throws an ObjectDisposedException if this object has been disposed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Standard virtual overload for <see cref="T:System.IDisposable" /> pattern
            </summary>
            <param name="disposing">
            <c>True</c> means this is a call to <see cref="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.Dispose" />.
            <c>False</c> means it has been called from the finalizer.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeManagedResources">
            <summary>
            Allows derived classes to provide custom dispose handling for managed resources
            </summary>
            <remarks>
            Derived classes are expected to override this method to dispose their managed resources, then call the base class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DisposableObject.DisposeNativeResources">
            <summary>
            Allows derived classes to provide custom dispose handling for native resources
            </summary>
            <remarks>
            Derived classes are expected to override this method to dispose their native resources, then call the base class.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DisposableWrapper">
            <summary>
            A disposable that disposes wrapped IDisposable
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ExtensionMethods">
             <summary>
             Extension methods for non-VS types.  Extensions for VS types should be placed in
             env\shell\PackageFramework\Current\Shell\UI\Common\ExtensionMethods.cs
            
             This type is forwarded from MS.VS.Shell.xx.dll
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <typeparam name="TEventArgs">The EventArgs-derived event argument.</typeparam>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.CancelEventHandler,System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="propertyName">The name of the property which changed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.String)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="propertyName">The name of the property which is changing.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEventAsync``1(System.Delegate,System.Object,``0)">
            <summary>
            Helper method to call each target of an async event sequentially, awaiting each until it completes.
            </summary>
            <typeparam name="T">The argument type</typeparam>
            <param name="eventHandler">A delegate taking (object, T) and returning Task</param>
            <param name="source">The event's source parameter</param>
            <param name="args">The event's argument parameter</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent(System.EventHandler{System.Windows.DependencyPropertyChangedEventArgs},System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Helper method to perform the null check necessary to raise an event safely.
            </summary>
            <param name="eventHandler">The event.</param>
            <param name="source">The event's source parameter.</param>
            <param name="args">The event's argument parameter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Add a throw from string to verify that it is not null or empty
            </summary>
            <param name="value"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Add a simple copy method to Stream
            </summary>
            <param name="sourceStream"></param>
            <param name="targetStream"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetVisualOrLogicalParent(System.Windows.DependencyObject)">
            <summary>
            This uses the visual tree first, then diverts to the logical tree if the visual tree ends.
            This is necessary for the TabControl, where using either the logical tree or visual tree
            by themselves is insufficient.
            </summary>
            <param name="sourceElement">The object to begin searching from.</param>
            <returns>The visual tree parent of the object, or the logical tree parent if
            the visual tree parent is null, or null if the logical tree parent is null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``1(System.Windows.Media.Visual)">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree, or the object itself if it matches in type.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <param name="obj">The object at which to begin searching.</param>
            <returns>The object itself, if it matches in type, else the first ancestor of type T in the parent chain of obj,
            or null if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="obj" /> is Visual rather than DependencyObject in order to disambiguate this method
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``2(``1,System.Func{``1,``1})">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree, or the object itself if it matches in type.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <param name="obj">The object at which to begin searching.</param>
            <returns>The object itself, if it matches in type, else the first ancestor of type T in the parent chain of obj,
            or null if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="obj" /> is Visual rather than DependencyObject in order to disambiguate this method
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestorOrSelf``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Helper method that finds the first ancestor in the logical or visual tree, or the object itself, that is accepted by the ancestor selector function.
            </summary>
            <param name="obj">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <param name="ancestorSelector">The method used to select an ancestor of interest.</param>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <returns>The first ancestor in the parent chain of obj accepted by the the ancestor selector function, or null if no ancestor is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``1(System.Windows.Media.Visual)">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <param name="obj">The object at which to begin searching.</param>
            <returns>The first ancestor of type T in the parent chain of obj, or null
            if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="obj" /> is Visual rather than DependencyObject in order to disambiguate this method
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``2(``1,System.Func{``1,``1})">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <param name="obj">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <returns>The first ancestor of type T in the parent chain of obj, or null
            if no ancestor is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindAncestor``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Helper method that finds the first ancestor in the logical or visual tree that is accepted by the ancestor selector function.
            </summary>
            <param name="obj">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <param name="ancestorSelector">The method used to select an ancestor of interest.</param>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <returns>The first ancestor in the parent chain of obj accepted by the the ancestor selector function.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsAncestorOf``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Determines if a element is an ancestor of another element.
            </summary>
            <param name="element">The ancestor element.</param>
            <param name="other">The descendent element.</param>
            <param name="parentEvaluator">The function used to determine an element's parent.</param>
            <returns>True if element is an ancestor of other, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsLogicalAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Determines if an element is an ancestor of another element using both the
            logical and visual trees.
            </summary>
            <param name="element">The ancestor element.</param>
            <param name="other">The descendent element.</param>
            <returns>True if element is an ancestor of other, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant(System.Windows.DependencyObject,System.Predicate{System.Windows.DependencyObject})">
             <summary>
             Helper method that finds the first descendant satisfying <paramref name="predicate" />.
            
             USE SPARINGLY.
            
             This method walks all the tree until a result is found. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <param name="obj">The object at which to begin searching.</param>
             <param name="predicate">The predicate which selects the descendant object</param>
             <returns>The first descendant that satisfies the predicate, or null if no descendant is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant``1(System.Windows.DependencyObject)">
             <summary>
             Helper method that finds the first descendant of a given Type in the visual tree.
            
             USE SPARINGLY.
            
             This method walks all the tree until a result is found. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T">The type of descendant to find.</typeparam>
             <param name="obj">The object at which to begin searching.</param>
             <returns>The first descendant of type T in the children of obj, or null if
             no descendant is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendant``1(System.Windows.DependencyObject,System.Predicate{``0})">
             <summary>
             Helper method that finds the first descendant of type <typeparamref name="T" /> the visual tree
             that matches <paramref name="predicate" />.
            
             USE SPARINGLY.
            
             This method walks all the tree until a result is found. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T">The type of descendant to find.</typeparam>
             <param name="obj">The object at which to begin searching.</param>
             <param name="predicate">The predicate which selects the descendant object</param>
             <returns>The first descendant of type T that satisfies the predicate, or null if
             no descendant is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendantReverse``1(System.Windows.DependencyObject)">
             <summary>
             Helper method that finds the last descendant of a given Type in the visual tree.
            
             USE SPARINGLY.
            
             This method walks all the tree in reverse order until a result is found. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T">The type of descendant to find.</typeparam>
             <param name="obj">The object at which to begin searching.</param>
             <returns>The last descendant of type T in the children of obj, or null if
             no descendant is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendants``1(System.Windows.DependencyObject)">
             <summary>
             Find all visual descendants of this dependency object of a particular type.
            
             USE SPARINGLY.
            
             This method walks the entire tree. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTree``1(System.Windows.DependencyObject,System.Action{``0})">
             <summary>
             Execute a delegate action on all visual descendants of this dependency object of a particular type.
            
             USE SPARINGLY.
            
             This method walks the entire tree. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindDescendantsReverse``1(System.Windows.DependencyObject)">
             <summary>
             In reverse order:
             Find all visual descendants of this dependency object of a particular type.
            
             USE SPARINGLY.
            
             This method walks the entire tree. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.TraverseVisualTreeReverse``1(System.Windows.DependencyObject,System.Action{``0})">
             <summary>
             In reverse order:
             Execute a delegate action on all visual descendants of this dependency object of a particular type.
            
             USE SPARINGLY.
            
             This method walks the entire tree. Use of this method on large trees
             or excessively will introduce a performance hit.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Finds the common ancestor of obj1 and obj2 using the GetVisualOrLogicalParent
            as the parent evaluation method.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <returns>The first element in the parent tree that is both an ancestor of obj1 and obj2, or
            null if no such element exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.FindCommonAncestor``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Finds the common ancestor of obj1 and obj2 using the given function to get the parent of each element.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <returns>The first element in the parent tree that is both an ancestor of obj1 and obj2, or
            null if no such element exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AddPropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler)">
            <summary>
            Adds a handler that is called when <paramref name="property" /> changes on <paramref name="instance" />
            </summary>
            <typeparam name="T">The type of object being bound</typeparam>
            <param name="instance">The instance whose property change will be handled</param>
            <param name="property">The property whose change will be handled</param>
            <param name="handler">The method that is called when <paramref name="property" /> changes</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AddPropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler,System.Type)">
            <summary>
            Adds a handler that is called when <paramref name="property" /> changes on <paramref name="instance" />
            </summary>
            <typeparam name="T">The type of object being bound</typeparam>
            <param name="instance">The instance whose property change will be handled</param>
            <param name="property">The property whose change will be handled</param>
            <param name="handler">The method that is called when <paramref name="property" /> changes</param>
            <param name="targetType">The type of the object where <paramref name="property" /> is set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RemovePropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler)">
            <summary>
            Removes a handler for a dependency property change
            </summary>
            <typeparam name="T">The type of object being bound</typeparam>
            <param name="instance">The instance whose property change will no longer be handled</param>
            <param name="property">The property whose change will no longer be handled</param>
            <param name="handler">The method to be removed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RemovePropertyChangeHandler``1(``0,System.Windows.DependencyProperty,System.EventHandler,System.Type)">
            <summary>
            Removes a handler for a dependency property change
            </summary>
            <typeparam name="T">The type of object being bound</typeparam>
            <param name="instance">The instance whose property change will no longer be handled</param>
            <param name="property">The property whose change will no longer be handled</param>
            <param name="handler">The method to be removed</param>
            <param name="targetType">The type of the object where <paramref name="property" /> is set</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTextTrimmed(System.Windows.Controls.TextBlock)">
            <summary>
            Returns whether the text of the TextBlock is trimmed
            Unfortunately the TextBlock control does not have a property to tell when ellipsis are displayed
            So we have to calculate outselves if the text fits in the text block element
            </summary>
            <param name="textBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTopmost(System.IntPtr)">
            <summary>
            Determines if an HWND is a topmost window.
            </summary>
            <param name="hWnd">The HWND to test.</param>
            <returns>True if the hWnd has the WS_EX_TOPMOST style, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsNearlyEqual(System.Double,System.Double)">
            <summary>
            Helper method to determine if a double is the same type of non-real or nearly equal to another double.
            </summary>
            <param name="value1">First double to compare.</param>
            <param name="value2">Second double to compare.</param>
            <returns>True if <paramref name="value1" /> is the same type of non-real as <paramref name="value2" />,
            or if they are nearly equal. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsSignificantlyLessThan(System.Double,System.Double)">
            <summary>
            Indicates if <paramref name="value1" /> (<code>this</code>) is significantly less than <paramref name="value2" />.
            </summary>
            <param name="value1">Value to be compared.</param>
            <param name="value2">Other double to be compared.</param>
            <returns>True if <paramref name="value1" /> is significantly less than <paramref name="value2" />,
            False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsSignificantlyGreaterThan(System.Double,System.Double)">
            <summary>
            Indicates if <paramref name="value1" /> (<code>this</code>) is significantly greater than <paramref name="value2" />.
            </summary>
            <param name="value1">Value to be compared.</param>
            <param name="value2">Other double to be compared.</param>
            <returns>True if <paramref name="value1" /> is significantly greater than <paramref name="value2" />,
            False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsConnectedToPresentationSource(System.Windows.DependencyObject)">
            <summary>
            Used to determine if a given DependencyObject is rooted in a PresentationSource.
            In order to determine screen coordinates from relative coordinates, this element
            has to be rooted in a PresentationSource.  It can also tell us whether something
            is presently in the visual tree or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AcquireWin32Focus(System.Windows.DependencyObject,System.IntPtr@)">
            <summary>
            Puts the Win32 focus to the HWND of the HwndSource of the DependencyObject provided.
            If a new HWND other than currently focused one is focused then it returns true,
            setting the previousFocus parameter to the previously focused HWND and it returns
            false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsClipped(System.Windows.UIElement)">
            <summary>
            Checks whether the element's text is clipped by a parent ScrollViewer
            (the element can still be scrolled to view the clipped text)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.IsTrimmed(System.Windows.UIElement)">
            <summary>
            Checks whether the control is a TextBlock whose text is trimmed (and ellipses are displayed)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToColorFromArgb(System.UInt32)">
            <summary>
            Returns a Color object from ARGB
            </summary>
            <param name="colorValue">Uint value representing an ARGB color value</param>
            <returns>The Color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToColorFromRgba(System.UInt32)">
            <summary>
            Returns a Color object from RGBA
            </summary>
            <param name="colorValue">Uint value representing a RGBA color value</param>
            <returns>The Color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToRgba(System.Windows.Media.Color)">
            <summary>
            Returns a uint representing the RGBA value of the color
            </summary>
            <param name="color">The color</param>
            <returns>The RGBA value of the color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToArgb(System.Windows.Media.Color)">
            <summary>
            Returns a uint representing the ARGB value of the color
            </summary>
            <param name="color">The color</param>
            <returns>The ARGB value of the color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetIntAttribute(System.Xml.XmlReader,System.String,System.Int32)">
            <summary>
            Get a named attribute from the current node in the given XmlReader as an int
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetDoubleAttribute(System.Xml.XmlReader,System.String,System.Double)">
            <summary>
            Get a named attribute from the current node in the given XmlReader as a double
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetGuidAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            Get a named attribute from the current node in the given XmlReader as a Guid
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToDimensionString(System.Windows.Size)">
            <summary>
            Returns a string for <paramref name="size" />, as "{width}x{height}"
            </summary>
            <param name="size">The size to turn into a string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.HexDigitToCharLowercase(System.Byte)">
            <summary>
            Convert a 4-bit value (nybble) into its printable hexadecimal representation
            </summary>
            <param name="n"></param>
            <returns>The hexadecimal representation of <paramref name="n" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.AppendLowerCaseHexDigits(System.Text.StringBuilder,System.Byte)">
            <summary>
            Append the printable hexadecimal representation of a byte to a string builder.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to which to append the hex characters.</param>
            <param name="b">The value to convert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToLowercaseString(System.Windows.Media.Color)">
            <summary>
            Returns a lowercase string for <paramref name="color" />.  This is equivalent to
            color.ToString().ToLower(), but it doesn't create extra garbage.
            </summary>
            <param name="color">The color to turn into a string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.ToLowercaseString(System.Nullable{System.Windows.Media.Color})">
            <summary>
            Returns a lowercase string for <paramref name="color" />.  This is equivalent to
            color.ToString().ToLower(), but it doesn't create extra garbage.
            </summary>
            <param name="color">The color to turn into a string</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.GetValueIfCreated``1(System.Lazy{``0})">
            <summary>
            Returns the Value of a <see cref="T:System.Lazy`1" /> if it has been created,
            or null if it hasn't.
            </summary>
            <typeparam name="T">The type controlled by the lazy initializer</typeparam>
            <param name="lazy">The lazy initializer</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageScalingMode">
            <summary>
            The scaling mode to use for WinForms/Win32 images
            </summary>
            <remarks>
            DEV NOTE: The image scaling modes available here for WinForms and WPF match the similar scaling modes for Win32 from 
            vscommon\vsuilib\VsUIDpiHelper.h
            If changes are made to algorithms in this managed DpiHelper class, matching changes will have to be made to the native class, too.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Default">
            <summary>
            Let the shell pick what looks best depending on the current DPI zoom factor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.BorderOnly">
            <summary>
            Keep the actual image unscaled, add a border around the image
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.NearestNeighbor">
            <summary>
            Sharp results, but pixelated, and possibly distorted unless multiple of 100% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Bilinear">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.Bilinear)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.Bicubic">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.Bicubic)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.HighQualityBilinear">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.HighQualityBilinear)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.HighQualityBicubic">
            <summary>
            Smooth results, without distorsions, but fuzzy (uses GDI+ InterpolationMode.HighQualityBicubic)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageScalingMode.MixedNearestNeighborHighQualityBicubic">
            <summary>
            Sharper results than Bicubic for large zoom levels, without distorsions, but fuzzy (2 steps-scaling, uses NearestNeighbor up to the closest multiple of 100%, then GDI+ InterpolationMode.HighQualityBicubic from there)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil">
            <summary>
            LayoutDoubleUtil, uses fixed eps unlike DoubleUtil which uses relative one.
            This is more suitable for some layout comparisons because the computation
            paths in layout may easily be quite long so DoubleUtil method gives a lot of false
            results, while bigger absolute deviation is normally harmless in layout.
            </summary>
            <remarks>
            The class is similar to System.Windows.LayoutDoubleUtil, which is unfortunately internal.
            If being built for MS.VS.Imaging the class is internal, otherwise it is public.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Determines if two double values are close to each other.
            </summary>
            <param name="value1">First value to compare</param>
            <param name="value2">Second value to compare</param>
            <returns>True if the values are close, false if they are not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines if two rectangles are close to each other.  The rectangles are close
            if their origins are close and their sizes are close.
            </summary>
            <param name="rect1">First value to compare</param>
            <param name="rect2">Second value to compare</param>
            <returns>True if the values are close, false if they are not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Determines if two sizes are close to each other.  The sizes are close
            if their widths are close and their heights are close.
            </summary>
            <param name="size1">First value to compare</param>
            <param name="size2">Second value to compare</param>
            <returns>True if the values are close, false if they are not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if two points are close to each other.  The points are close
            if their x-coordinates are close and their y-coordinates are close.
            </summary>
            <param name="size1">First value to compare</param>
            <param name="size2">Second value to compare</param>
            <returns>True if the values are close, false if they are not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            Determines if one double value is less than another, but not close to it.
            </summary>
            <param name="value1">First value to compare</param>
            <param name="value2">Second value to compare</param>
            <returns>True if <paramref name="value1" /> is less than <paramref name="value2" />, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            Determines if one double value is less than or close to another.
            </summary>
            <param name="value1">First value to compare</param>
            <param name="value2">Second value to compare</param>
            <returns>True if <paramref name="value1" /> is less than or close to <paramref name="value2" />, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            Determines if one double value is greater than another, but not close to it.
            </summary>
            <param name="value1">First value to compare</param>
            <param name="value2">Second value to compare</param>
            <returns>True if <paramref name="value1" /> is greater than <paramref name="value2" />, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Determines if one double value is greater than or close to another.
            </summary>
            <param name="value1">First value to compare</param>
            <param name="value2">Second value to compare</param>
            <returns>True if <paramref name="value1" /> is greater than or close to <paramref name="value2" />, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutDoubleUtil.IsNonreal(System.Double)">
            <summary>
            Determines whether a double value represents a non-real value.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if the value is non-real, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ObservableObject">
            <summary>
            This type is forwarded from MS.VS.Shell.xx.dll
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.ObservableObject" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ObservableObject.HasPropertyChangedEventSinks">
            <summary>
            Returns a value indicating whether this object's <see cref="E:Microsoft.VisualStudio.PlatformUI.ObservableObject.PropertyChanged" />
            event has any subscriptions
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value and notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="propertyName">The property name to notify of changes if the values are different.</param>
            <returns>True if the property value was changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value and notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="beforeNotifyAction">An action to call if the value changes, before notifying property changes.</param>
            <param name="propertyName">The property name to notify of changes if the values are different.</param>
            <returns>True if the property value was changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.SetProperty``1(``0@,``0,System.Action{``0,``0},System.String)">
            <summary>
            Checks for a change to a value, and if the value is different, stores the value and notifies of property changes.
            </summary>
            <typeparam name="T">The type of field changing.</typeparam>
            <param name="field">The storage location for the field behind the property.</param>
            <param name="newValue">The new value to store in the field.</param>
            <param name="beforeNotifyAction">An action to call if the value changes, before notifying property changes.</param>
            <param name="propertyName">The property name to notify of changes if the values are different.</param>
            <returns>True if the property value was changed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.BuildPropertyDependencies(System.Type)">
            <summary>
            Builds a dictionary of properties that are referenced by a <see cref="T:Microsoft.VisualStudio.PlatformUI.DependsOnPropertyAttribute" />
            to the properties that reference them.
            </summary>
            <param name="type">The type for which property dependencies are to be built</param>
            <returns>
            A dictionary of property dependencies, or null if none of the type's properties are marked with a
            <see cref="T:Microsoft.VisualStudio.PlatformUI.DependsOnPropertyAttribute" />
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.GetDependentProperties(System.String)">
            <summary>
            Returns a collection of the properties that are (recursively) dependent on <paramref name="property" />
            </summary>
            <param name="property">The name of the property whose dependents are to be returned</param>
            <returns>The (possibly empty) collection of dependent properties</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.AddDependentProperties(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Utilities.OneOrMany{System.String}},System.Collections.Generic.List{System.String}@)">
            <summary>
            Adds the properties that are dependent on <paramref name="property" /> to
            <paramref name="allDependentProperties" />.  <paramref name="allDependentProperties" />
            will be created if needed
            </summary>
            <param name="rootProperty">The name of the root property for which dependencies are requested</param>
            <param name="property">The name of the property</param>
            <param name="propertyDependencies">The property dependency map</param>
            <param name="allDependentProperties">The properties that depend on <paramref name="property" /></param>
            <returns>True if <paramref name="property" /> has dependent properties, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ObservableObject.ValidatePropertyDependencies(System.Collections.Generic.IDictionary{System.String,Microsoft.VisualStudio.Utilities.OneOrMany{System.String}})">
            <summary>
            Validates that there are no circular property dependencies in the current type
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.PathUtil">
            <summary>
            This type is forwarded from MS.VS.Shell.xx.dll
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.Normalize(System.String)">
            <summary>
            Returns a normalized form of the given path.
            
            What it does:
              - Takes pains not to allocate extra temporary strings.
              - Verifies that the path contains no invalid path characters, throwing
                an exception if any invalid characters are found.
              - Strips leading and trailing whitespace.
              - Replaces "/" with "\"
              - Replaces multiple consecutive "\" with a single "\", except for the
                leading "\\" of a UNC path.
              - Removes the trailing "\", unless it's part of a root (e.g. "C:\")
              - Converts to lowercase
              
            What it doesn't do:
              - Fully qualify a non-rooted filename (e.g. "dir\filename.ext")
              - Simplify relative pathnames (e.g. "C:\dir\..\FileInDriveRoot.ext").
                It's tempting to use Path.GetFullPathName to perform this function,
                but that would entail an expensive trip to the disk or network.
              - Verify that the path exists.
              
            </summary>
            <param name="path">Path to normalize</param>
            <returns>Normalized from of <paramref name="path" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsNormalized(System.String)">
            <summary>
            Indicates whether the given path is in normalized form.
            </summary>
            <param name="path">Path to test</param>
            <returns>true if normalized, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.NormalizePath(System.String)">
            <summary>
            Extension method to return a normalized form of the given path. 
            </summary>
            <param name="path">Path to normalize</param>
            <returns>Normalized from of <paramref name="path" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsNormalizedPath(System.String)">
            <summary>
            Extension method to check whether the given path is in normalized form.
            </summary>
            <param name="path">Path to test</param>
            <returns>true if normalized, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsDescendant(System.String,System.String)">
            <summary>
            Indicates whether the a child path is a descendant of a parent directory.
            This is a purely textual computation indicating that the child *could be*
            a descendant of the parent; there is no file system interaction to determine
            whether child actually *is* a descendant of parent.
            </summary>
            <param name="parent">Parent directory</param>
            <param name="child">Prospective child file/directory</param>
            <returns>True if descendant, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.GetCommonPathPrefix(System.String,System.String)">
            <summary>
            Returns the longest leading string that is common to <paramref name="path1" /> and <paramref name="path2" />.
            Case is not considered in the comparison.
            </summary>
            <param name="path1">The first path to compare</param>
            <param name="path2">The second path to compare</param>
            <returns>The longest common prefix, or String.Empty if there is no common prefix</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.ArePathsEqual(System.String,System.String)">
            <summary>
            Determines if two paths are equal.  This method does not treat Path.DirectorySeparatorChar
            and Path.AltDirectorySeparatorChar as equivalent.
            </summary>
            <param name="path1">First path to compare</param>
            <param name="path2">Second path to compare</param>
            <returns>True if two paths are equal, false if they are not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsRoot(System.String)">
            <summary>
            Determines if the given path represents a root directory.
            </summary>
            <param name="path">First path to compare</param>
            <returns>True if <paramref name="path" /> is a root, false if it is not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsReparsePoint(System.String)">
            <summary>
            Determines if the given path is a Junction.
            </summary>
            <param name="path">Path to a directory</param>
            <returns>True if <paramref name="path" />is a Junction, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.ContainsReparsePoint(System.String,System.String)">
            <summary>
            Determines if any level in the given path is a Junction, up to <paramref name="pathRoot" />
            (<paramref name="pathRoot" /> itself will not be included in the determination)
            </summary>
            <param name="path">Path to a directory</param>
            <param name="pathRoot">Path to a parent directory of <paramref name="path" /></param>
            <returns>True if any directory between <paramref name="path" /> and <paramref name="pathRoot" />
            is a Junction. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsDirectorySeparator(System.Char)">
            <summary>
            Determines if a character is a directory separator
            </summary>
            <param name="c">Character to test</param>
            <returns>True if <paramref name="c" /> is a directory separator, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.IsImplicitDirectory(System.String)">
            <summary>
            Determines if the given directory is one of the implicit directories
            contained in all directories (i.e. "." or "..")
            </summary>
            <param name="directory">Directory to test</param>
            <returns>True if <paramref name="directory" /> is an implicit directory, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.SafeGetExtension(System.String)">
            <summary>
            Return the extension of the specified path string.  This always returns a
            non-null string for the extension.  It will return <see cref="F:System.String.Empty" /> if:
            
                *   <paramref name="path" /> is null 
                *   <paramref name="path" /> is empty
                *   <paramref name="path" /> does not contain an extension
            
            Otherwise, <paramref name="path" />'s extension (including the period ".").
            </summary>
            <param name="path">The path from which to get the extension</param>
            <returns>The extension, or <see cref="F:System.String.Empty" /> if the extension could be not obtained</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.GetFileSystemCasing(System.String)">
            <summary>
            Returns the path with casing that matches what's on the file system.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.LooksLikeLocalRootedFilePath(System.String)">
            <summary>
            Heuristically determines whether the given string "looks like" a local rooted file path --
            e.g. begins with a drive letter followed by ":\", contains only valid path characters, etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.HasInvalidChars(System.String)">
            <summary>
            Returns whether <paramref name="path" /> contains any invalid path characters.
            This method uses a cached array, in contrast to <see cref="M:System.IO.Path.GetInvalidPathChars" />,
            which allocates a new array for each call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.MakeRelative(System.String,System.String)">
            <summary>
            Returns a relative path from <paramref name="relativePathBase" /> to <paramref name="pathToRelativize" />.
            The parameters are treated as folders if they end in "\", otherwise as filenames.  The
            path from c:\foo\bar to c:\cat\dog is ..\cat\dog -- NOT ..\..\cat\dog because "bar" and
            "dog" are files, not folders.  If "bar" is a folder, you must append "\" to ask for the
            path from c:\foo\bar\ to c:\cat\dog -- THEN the answer will be ..\..\cat\dog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.DerelativizePath(System.String,System.String)">
            <summary>
            Combines a relative path with a base path to return a rooted version of the relative path, collapsing any
            ".." segments that appear at the beginning of the relative path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.PathParser.MoveNext">
            <summary>
            Advances to the next segment of the parser's path.
            </summary>
            <returns>True if a segment was found, false if not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PathUtil.PathParser.CompareCurrentSegment(Microsoft.VisualStudio.PlatformUI.PathUtil.PathParser)">
            <summary>
            Compares the current segment of this parser to the current segment of another
            parser, by ordinal, ignoring case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Add(`0)">
            <summary>
            Adds a WeakReference to the item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Clear">
            <summary>
            Clears all items from the list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Remove(`0)">
            <summary>
            Removes an item from the underlying collection, if it exists.  This
            is O(n), where n is the number of WeakReferences currently in the list.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.ToList">
            <summary>
            Gets a list containing strong references to the items in this collection.
            </summary>
            <returns>A list containing strong references to items in this collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.GetAliveItemsCount">
            <summary>
            Return the number of strong references remaining in the collection.
            Note that this is O(n), where n is the number of WeakReferences
            currently in the list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.WeakCollection`1.Prune(System.Int32)">
            <summary>
            Creates a new inner list copy containing the currently-living
            items.
            </summary>
            <param name="anticipatedSize">The size that's expected
            for the compressed list.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlag">
            <summary>
            A structure that represents a feature flag which consists of a name and the enabled state
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.IsEnabled">
            <summary>
            A Boolean value indicating whether the feature should be enabled
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.Name">
            <summary>
            A string of the form ^(\w+\.)+\w+$, following a pattern of [AreaPath].[Name]
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.Title">
            <summary>
            A string value which will be displayed on the preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.PreviewPaneChannels">
            <summary>
            A comma separated list of channels which will control the visibility of the feature flag on the preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.LearnMoreUrl">
            <summary>
            A URL to more information about the feature flag to be displayed on the preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.Description">
            <summary>
            A description about the feature flag 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.RequiredAction">
            <summary>
            A string indicating the required action necessary to apply the feature when the user checks the feature flag on the preview pane.
            This will be appended with the string "requires" and displayed with the title on the preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.FeedbackUrl">
            <summary>
            A URL for the Preview Pane for the users to provide feedback on the feature
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.PackageGuid">
            <summary>
            A string specifying the package guid to lookup localized strings
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.OverrideDefaultValueChannels">
            <summary>
            A comma separated list of channels where the default value will be overriden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.VisibleToInternalUsersOnlyChannels">
            <summary>
            A comma separated list of channels where the feature will be visible on the preview pane to internal users only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlag.#ctor(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a FeatureFlag with all the properties to display it on the Preview Features Pane as well.
            </summary>
            <param name="name">A string of the form ^(\w+\.)+\w+$, following a pattern of [AreaPath].[Name]</param>
            <param name="isEnabled">A Boolean value indicating whether the feature should be enabled.</param>
            <param name="title">A string representing the title of the feature flag to be displayed on the preview pane.</param>
            <param name="previewPaneChannels">A comma separated list of channels for which the feature flag will be showed on the preview pane.</param>
            <param name="learnMoreUrl">A link to provide more information about the feature flag.</param>
            <param name="description">A brief description about the feature flag to be displayed on the preview pane.</param>
            <param name="requiredAction">A string for ex: restart indicating the action required for the feeature to take effect.</param>
            <param name="feedbackUrl">A link for users to provide feedback about the feature.</param>
            <param name="packageGuid">A string specifying the package guid to lookup localized strings.</param>
            <param name="overrideDefaultValueChannels">A comma separated list of channels where the default value will be overriden.</param>
            <param name="visibleToInternalUsersOnlyChannels">A comma separated list of channels where the feature will be visible on the preview pane to internal users only.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlags">
            <summary>
            A service that can be used to determine if a feature should be enabled or disabled. It can also
            be used to enumerate the current state of feature flags. This service is free-threaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.customizationsStore">
            <summary>
            This store trumps all other stores, unless <see cref="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.GetFeatureValueFromStores(System.String,System.Boolean,System.Boolean)" /> is asked to skip it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.remoteStore">
            <summary>
            This store always trumps the <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.defaultsStore" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.defaultsStore">
            <summary>
            This is the store of last resort.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.syncObject">
            <summary>
            The lock to acquire before accessing mutable fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.defaultsOrRemoteStoreCache">
            <summary>
            A dictionary of feature flag *paths* (i.e. processed by <see cref="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.FeatureNameToPath(System.String)" />) to the result of <see cref="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetBoolValue(System.String,System.String)" />
            as it was returned from <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.remoteStore" /> or <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.defaultsStore" /> (in that order).
            </summary>
            <remarks>
            Obtain the <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.syncObject" /> lock when accessing this dictionary.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.customizationsStoreCache">
            <summary>
            A dictionary of feature flag *paths* (i.e. processed by <see cref="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.FeatureNameToPath(System.String)" />) to the result of <see cref="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetBoolValue(System.String,System.String)" />
            as it was returned from <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.customizationsStore" />.
            </summary>
            <remarks>
            Obtain the <see cref="F:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.syncObject" /> lock when accessing this dictionary.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.#ctor(Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore,Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore)">
            <summary>
            Creates an instance of the feature flags service that can be used to determine if a feature should be
            enabled or disabled as well as enumerate registered flags.
            </summary>
            <param name="defaultsStore">An implementation of <see cref="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore" /> that contains the default values for registered flags.</param>
            <param name="customizationsStore">An implementation of <see cref="T:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore" /> that contains the customized values for registered flags.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.#ctor(Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore,Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore,Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore)">
            <summary>
            Creates an instance of the feature flags service that can be used to determine if a feature should be
            enabled or disabled as well as enumerate registered flags.
            </summary>
            <param name="defaultsStore">An implementation of <see cref="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore" /> that contains the default values for registered flags.</param>
            <param name="customizationsStore">An implementation of <see cref="T:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore" /> that contains the customized values for registered flags.</param>
            <param name="remoteStore">An implementation of <see cref="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore" /> that contains remote overrides for non-customized values for registered flags.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.Dispose">
            <summary>
            Drops any event handlers added to the <see cref="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore" /> objects provided to the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.IsFeatureEnabled(System.String,System.Boolean)">
            <summary>
            This method is used to determine whether a feature is enabled. If the flag cannot be
            located, or if there is an error processing the request the default value is returned.
            </summary>
            <param name="featureName">A string of the form ^(\w+\.)+\w+$, following a pattern of
            [AreaPath].[Name]</param>
            <param name="defaultValue">The value returned if there is an error processing the request
            or if the flag cannot be located.</param>
            <returns>The current state of the feature flag or the defaultValue if there is an error
            processing the request</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.IsFeatureEnabledWithoutCustomization(System.String,System.Boolean)">
            <summary>
            Do not use this method as it's intended for Telemetry only.
            This is used to determine the value of a feature without user customization.
            To get the value of Feature flag use <see cref="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.IsFeatureEnabled(System.String,System.Boolean)" />
            This will check for feature flag value in remote store, if not found, falls back
            to default store.
            </summary>
            <param name="featureName">A string of the form ^(\w+\.)+\w+$, following a pattern of
            [AreaPath].[Name]</param>
            <param name="defaultValue">The value returned if there is an error processing the
            request or if the flag cannot be located.</param>
            <returns>The default value or current state of the feature flag if there is an error
            processing the request</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.GetFeatureValueFromStores(System.String,System.Boolean,System.Boolean)">
            <summary>
            This method is used to get the value of feature flag from the stores.
            If the flag cannot be located, or if there is an error processing
            the request the default value is returned.
            </summary>
            <param name="featureName">A string of the form ^(\w+\.)+\w+$, following a pattern of
            [AreaPath].[Name]</param>
            <param name="defaultValue">The value returned if there is an error processing the request
            or if the flag cannot be located.</param>
            <param name="getCustomizationValue">Determines whether the customization store will be checked for value or not.
            If it is true then first customization store will be checked,
            then remote store and then fall back to default store.
            If it is false, then first remote store will be checked,then fall back to default store.
            </param>
            <returns>The current state of the feature flag or the defaultValue if there is an error
            processing the request</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.GetFlags">
            <summary>
            A method used to retrieve all feature flags for this user and appid combination.
            The values of the flags returned are the currently set values and may differ from
            the defaults. This will only return the set of registered flags.
            </summary>
            <returns>An enumerable collection of <see cref="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlag" /> </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.FeatureNameToPath(System.String)">
            <summary>
            Replaces '.' with '\' characters.
            </summary>
            <param name="featureName">The period-delimited feature flag name.</param>
            <returns>The backslash-delimited path name to the feature flag.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlags.GetFlags(System.String,System.Collections.Generic.List{Microsoft.VisualStudio.FeatureFlags.FeatureFlag})">
            <summary>
            A recursive function that aggregates all feature flags at the given collection path and below into the specified collection.
            </summary>
            <param name="collectionPath">The path under which to start searching for feature flags.</param>
            <param name="flags">The collection to add discovered flags to.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlagsChangedEventArgs">
            <summary>
            Arguments for the event raised by the <see cref="E:Microsoft.VisualStudio.FeatureFlags.IObservableFeatureFlagsStore.Changed" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.FeatureFlagsChangedEventArgs.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlagsChangedEventArgs" /> struct.
            </summary>
            <param name="name">The name of the feature flag. This value uses '.' as a separator.</param>
            <param name="enabled"><c>true</c> if the feature flag is enabled; <c>false</c> otherwise. Use <c>null</c> to indicate removal of the setting from the store.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlagsChangedEventArgs.Name">
            <summary>
            Gets the name of the feature flag whose value has changed.
            </summary>
            <remarks>
            This value uses '.' as a separator.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.FeatureFlags.FeatureFlagsChangedEventArgs.Enabled">
            <summary>
            Gets a value indicating whether the feature flag is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags">
            <summary>
            A service that can be used to determine if a feature should be enabled or disabled. It can also 
            be used to enumerate the current state of feature flags. This service is free-threaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags.IsFeatureEnabled(System.String,System.Boolean)">
            <summary>
            This method is used to determine whether a feature is enabled. If the flag cannot be 
            located, or if there is an error processing the request the default value is returned.
            </summary>
            <param name="name">A string of the form ^(\w+\.)+\w+$, following a pattern of
            [AreaPath].[Name]</param>
            <param name="defaultValue">The value returned if there is an error processing the request
            or if the flag cannot be located.</param>
            <returns>The current state of the feature flag or the defaultValue if there is an error 
            processing the request</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlags.GetFlags">
            <summary>
            A method used to retrieve all feature flags for this user and appid combination. 
            The values of the flags returned are the currently set values and may differ from
            the defaults. This will only return the set of registered flags.
            </summary>
            <returns>An enumerable collection of <see cref="T:Microsoft.VisualStudio.FeatureFlags.FeatureFlag" /> </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore">
            <summary>
            An abstraction of the repository for feature flags. The collection semantics are modeled after IVsSettingsStore and as such:
            
            Collections can contain properties and sub collections. Sub collection paths are described with the strings 
            like the directory paths of file systems. Path contains names of all the parent collections. Similarly, separator 
            used between the names of the parent collections is '\' (back-slash) character. Example of a sub collection path 
            would be: "Root Collection\Internal Collection\Leaf Collection".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetBoolValue(System.String,System.String)">
            <summary>
            Retrieves a boolean value stored under the <paramref name="collectionPath" /> with the dictated <paramref name="name" />. If the
            <paramref name="collectionPath" /> or <paramref name="name" /> doesn't exist, then null is returned.
            </summary>
            <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be queried</param>
            <param name="name">The name of the value to read</param>
            <returns>True or False depending on the state of the value of the name under the collection Path, or null if the value doesn't exist</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetSubCollections(System.String)">
            <summary>
            Retrieves all subcollections under the <paramref name="collectionPath" />. These are 'primitive' subCollections in that it is only
            the next level of subcollections. For example a query of GetSubCollections with collectionPath 'Root Collection' against a collection
            that contained "Root Collection\Internal Collection\Leaf Collection", would return 'Internal Collection'.
            </summary>
            <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be queried</param>
            <returns>The immediate subcollections rooted at the <paramref name="collectionPath" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetString(System.String,System.String)">
            <summary>
            Retrieves a string value stored under the <paramref name="collectionPath" /> with the dictated <paramref name="name" />. If the
            <paramref name="collectionPath" /> or <paramref name="name" /> doesn't exist, then null is returned.
            </summary>
            <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be queried</param>
            <param name="name">The name of the value to read</param>
            <returns>string value of the name under the collection Path, or null if the value doesn't exist</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.IObservableFeatureFlagsStore">
            <summary>
            Optionally implemented by an <see cref="T:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore" /> in order to invalidate any cached values
            from prior calls to <see cref="M:Microsoft.VisualStudio.FeatureFlags.IFeatureFlagsStore.GetBoolValue(System.String,System.String)" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.FeatureFlags.IObservableFeatureFlagsStore.Changed">
            <summary>
            Occurs when the value of a feature flag changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlags">
            <summary>
            A testability service to allow changing the state of a feature flag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlags.EnableFeature(System.String,System.Boolean)">
            <summary>
            This method is used to set the state of a feature flag. Unlike IsFeatureEanbled 
            this method will throw if any of the flags are unrecognized (i.e. if the flag wasn't 
            registered with the service). EnableFeature immediately persists the
            enabled state to the persistence store.
            </summary>
            <param name="name">A string of the form ^(\w+\.)+\w+$, following a pattern of
            [AreaPath].[Name]</param>
            <param name="enabled">A value indicating what the result of calling IsFeatureEnabled
            with this <paramref name="name" /> will return</param>
        </member>
        <member name="T:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore">
            <summary>
            An abstraction of a writable repository for feature flags. The collection semantics are modeled after IVsSettingsStore and as such:
            
            Collections can contain properties and sub collections. Sub collection paths are described with the strings 
            like the directory paths of file systems. Path contains names of all the parent collections. Similarly, separator 
            used between the names of the parent collections is '\' (back-slash) character. Example of a sub collection path 
            would be: "Root Collection\Internal Collection\Leaf Collection".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore.DeleteProperty(System.String,System.String)">
            <summary>
            Deletes the given property from the collection. Succeeds silently if the property doesn't exist.
            </summary>
            <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be used</param>
            <param name="name">The name of the property to be deleted</param>
        </member>
        <member name="M:Microsoft.VisualStudio.FeatureFlags.IWritableFeatureFlagsStore.SetBool(System.String,System.String,System.Boolean)">
            <summary>
            Updates the value of the property to the given bool value. If the previous data type of the property was something else
            this method overwrites it. If the property doesn't exist, it will create one. If the colleciton doesn't exist, it will be created.
            </summary>
            <param name="collectionPath">The full path, separated by back-slash characters to the collection/subcollection to be written to</param>
            <param name="name">The name of the property to be written or created</param>
            <param name="enabled">The value to set the new/updated property to</param>
        </member>
        <member name="T:Microsoft.VisualStudio.IVsService`1">
            <summary>
            Provides access to a Visual Studio proffered service.
            </summary>
            <typeparam name="T">
            The service identity and interface of the Visual Studio service.
            When the service identity and interface are distinct types, use <see cref="T:Microsoft.VisualStudio.IVsService`2" /> instead.
            </typeparam>
            <remarks>
            This service acquiring interface is typically acquired via a MEF import attribute. For example:
            <c><![CDATA[[Import] IVsService<IVsRunningDocumentTable> rdt;]]></c>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.IVsService`1.GetValueAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an instance of the <typeparamref name="T" /> service.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An instance of the service.</returns>
            <remarks>
            Repeat calls to this method will return the same instance.
            </remarks>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Thrown when the service is not available.
            This may be because the service is not registered or because of a fault in the service factory.
            An <see cref="P:System.Exception.InnerException" /> may include details about an activation failure.
            </exception>
            <exception cref="T:System.OperationCanceledException">Throw when <paramref name="cancellationToken" /> is canceled before the request can be satisfied.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.IVsService`1.GetValueOrNullAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an instance of the <typeparamref name="T" /> service.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An instance of the service if available; otherwise <see langword="null" />.</returns>
            <remarks>
            This method will not throw exceptions for missing services or faulted service factories.
            It simply returns <see langword="null" /> for any failure.
            </remarks>
            <exception cref="T:System.OperationCanceledException">Throw when <paramref name="cancellationToken" /> is canceled before the request can be satisfied.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.IVsService`2">
            <summary>
            Provides access to a Visual Studio proffered service.
            </summary>
            <typeparam name="TService">The service identity of the Visual Studio service.</typeparam>
            <typeparam name="TInterface">The initial interface used to interact with the Visual Studio service.</typeparam>
            <remarks>
            <para>
            This service acquiring interface is typically acquired via a MEF import attribute. For example:
            <c><![CDATA[[Import] IVsService<SVsRunningDocumentTable, IVsRunningDocumentTable> rdt;]]></c>
            </para>
            <para>
            When <typeparamref name="TService" /> and <typeparamref name="TInterface" /> are the same type, the <see cref="T:Microsoft.VisualStudio.IVsService`1" /> interface is a simpler option.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.Commanding.LogNameFilter.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.LogHub.Commanding.LogNameFilter" /> instance. 
            </summary>
            <param name="nameFilter">
            The search string to match against the names of log files. This parameter can contain a combination of letters (a-z and A-Z), numbers (0-9), underscores (_), and wildcard (* and ?) characters, but it doesn't support regular expressions.
            See the remarks section for more details about the wildcard characters.
            </param>
            <remarks>
            A valid log name can have any number of segments, and is of the form: <code>Segment1.Segment2.Segment3</code>
            The wildcards in <paramref name="nameFilter" /> refer to path segments, and the following wildcards are permitted:
            <list type="table">
                <listheader>
                    <term>Question Mark (?)</term>
                    <description>Matches exactly one period-separated segment in the log name.</description>
                </listheader>
                <item>
                    <term>Asterisk (*)</term>
                    <description>Matches one or more period-separated segments in the log name.</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LogHub.ITraceConfiguration">
            <summary>
            Configure <see cref="T:System.Diagnostics.Trace" /> configuration for registration of a new log streams with Trace Hub.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.ITraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <summary>
            Registers a new log stream with the tracing hub and exposes it to requesting clients.
            </summary>
            <param name="id">Representing the fully-qualified id of a given log stream and all information that can be used to identify the log.</param>
            <param name="options">Logging options for a given log stream.</param>
            <param name="traceSource">The <see cref="T:System.Diagnostics.TraceSource" /></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
            <remarks>
            This overload should not be used as it accepts a <see cref="T:System.Diagnostics.TraceSource" /> supplied from the client.
            We reserve the ability to return a custom instance of <see cref="T:System.Diagnostics.TraceSource" /> and the result of this method should be used.
            This method is being left in-place for scenarios where using a <see cref="T:System.Diagnostics.TraceSource" /> supplied from this API is not possible,
            however due to performance reasons this overload should be avoided whenever possible.
            </remarks>
            <returns>Results of calls to register a new trace log stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.ITraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <summary>
            Registers a new log stream with the tracing hub and exposes it to requesting clients.
            </summary>
            <param name="id">Representing the fully-qualified id of a given log stream and all information that can be used to identify the log.</param>
            <param name="options">Logging options for a given log stream.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
            <remarks>
            This is the preferred overload vs <see cref="M:Microsoft.VisualStudio.LogHub.ITraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)" />.
            This allows the implementer of this interface to provide the TraceSource implementation.
            </remarks>
            <returns>Results of calls to register a new trace log stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceConfiguration.RegisterLogSource(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions)">
            <summary>
            Registers a new log stream with the tracing hub and exposes it to requesting clients.
            </summary>
            <param name="id">Representing the fully-qualified id of a given log stream and all information that can be used to identify the log.</param>
            <param name="options">Logging options for a given log stream.</param>
            <returns>Results of calls to register a new trace log stream.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceConfiguration.RegisterLogSource(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource)">
            <summary>
            Registers a new log stream with the tracing hub and exposes it to requesting clients.
            </summary>
            <param name="id">Representing the fully-qualified id of a given log stream and all information that can be used to identify the log.</param>
            <param name="options">Logging options for a given log stream.</param>
            <param name="traceSource">The <see cref="T:System.Diagnostics.TraceSource" /></param>
            <returns>Results of calls to register a new trace log stream.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.LogHub.LocalTraceHub.DefaultLoggingLevel">
            <summary>
            This is the default level we will log at when the environment variables that control the log level aren't set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LogHub.LocalTraceHub.DefaultLogLevelSettings">
            <summary>
            This is the settings object <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> that is the default when settings are not provided.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LogHub.LocalTraceHub.logsByName">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> that looks up the <see cref="T:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog" /> of a log
            defined by <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LogHub.LocalTraceHub.logNamesByService">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> that looks up a set of <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" /> names
            Used to lookup the real <see cref="T:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog" /> in <see cref="F:Microsoft.VisualStudio.LogHub.LocalTraceHub.logsByName" /> data structure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisterTraceLogAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <summary>
            Registers a new log stream with this local tracing hub instance.
            </summary>
            <param name="logId">
            Id of the log stream within the service, this should be globally unique. The <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" />
            should be a fully-qualified hierarchical name starting with your team's namespace.
            This should be a string like "Microsoft.VisualStudio.Debugger.Concord.DispatcherDiagnosticsLog" where the
            last segment is a friendly name of the log. It is important to use a fully-qualified hierarchical name even
            when this log stream is also classified by a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" />. This must be unique across
            all log streams from all services and components; when a duplicate request is received the method will
            return an error code in <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" />.
            </param>
            <param name="options">Options describing how the tracing hub can treat this log.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> with the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> of the newly registered log, a status code in
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" /> indicating if the log was already registered or this is a new
            registration or an error, a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> from
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.VerbositySettings" /> indicating the current logging
            verbosity of the log stream, and a <see cref="T:System.String" /> representing the directory and file prefix where
            the log should be written to.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisterTraceLog(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions)">
            <summary>
            Registers a new log stream with this local tracing hub instance.
            </summary>
            <param name="logId">
            Id of the log stream within the service, this should be globally unique. The <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" />
            should be a fully-qualified hierarchical name starting with your team's namespace.
            This should be a string like "Microsoft.VisualStudio.Debugger.Concord.DispatcherDiagnosticsLog" where the
            last segment is a friendly name of the log. It is important to use a fully-qualified hierarchical name even
            when this log stream is also classified by a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" />. This must be unique across
            all log streams from all services and components; when a duplicate request is received the method will
            return an error code in <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" />.
            </param>
            <param name="options">Options describing how the tracing hub can treat this log.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> with the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> of the newly registered log, a status code in
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" /> indicating if the log was already registered or this is a new
            registration or an error, a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> from
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.VerbositySettings" /> indicating the current logging
            verbosity of the log stream, and a <see cref="T:System.String" /> representing the directory and file prefix where
            the log should be written to.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceHub.SubscribeToLogVerbosityAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState},Microsoft.VisualStudio.RpcContracts.Logging.LogId,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog" /> class.
            </summary>
            <param name="id">
            The fully-qualified id of the log stream. This should be globally unique and is immutable.
            </param>
            <param name="options">
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions" /> of the log stream, this specifies the options for the log stream
            at registration. This is mutable.
            </param>
            <param name="verbositySettings">
            The current verbosity being logged for this log stream, specified in <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" />.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog.Id">
            <summary>
            Gets the fully-qualified id of the given log stream.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog.Options">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions" /> of the log stream.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog.VerbositySettings">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> being recorded for the log stream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.LocalTraceHub.RegisteredLog.GetLogFilePathPrefix">
            <summary>
            Gets the prefix for the log file and ensures the directory exists.
            </summary>
            <returns>
            <see cref="T:System.String" /> representing the path and file name to prepend to the log file being written to.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LogHub.TraceConfiguration">
            <summary>
            This class will only provide log registration that is not capable of doing cross-process correlation. It is advised to only use this for services that run within the devenv process;
            however it should work for all services if you want to use this now.
            <para>
            Check back for a future update of this library.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LogHub.TraceConfiguration.LogSessionKeyEnvVarName">
            <summary>
            The name of an environment variable that contains a unique hash that is shared among all ServiceHub processes sharing the same root client
            process.
            </summary>
            <remarks>
            Note: This value must be kept in sync with the name in the DevCore repo.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.CreateTraceConfigurationInstanceAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            This will create an <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService" /> instance that can be used to call
            <see cref="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)" />.
            </summary>
            <param name="serviceBroker">
            The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> handle to access Visual Studio services.
            The generated <see cref="T:Microsoft.VisualStudio.LogHub.TraceConfiguration" /> will take ownership of this object.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask`1" /> which may be awaited to retrieve the generated <see cref="T:Microsoft.VisualStudio.LogHub.TraceConfiguration" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.CreateTraceConfigurationInstanceAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This will create an <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService" /> instance that can be used to call
            <see cref="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)" />.
            </summary>
            <param name="serviceBroker">
            The <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> handle to access Visual Studio services.
            This is used to access a non-local TraceHub.
            </param>
            <param name="ownsServiceBroker">
            Indicates whether or not the resulting <see cref="T:Microsoft.VisualStudio.LogHub.TraceConfiguration" /> owns the IServiceBroker provided to it.
            When set to <see langword="true" /> the returned <see cref="T:Microsoft.VisualStudio.LogHub.TraceConfiguration" /> will dispose of the provided
            <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> when <see cref="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.Dispose" /> is called.
            When set to <see langword="false" /> the provided <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> will not be automatically disposed.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask`1" /> which may be awaited to retrieve the generated <see cref="T:Microsoft.VisualStudio.LogHub.TraceConfiguration" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceConfiguration.RegisterLogSourceAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Diagnostics.TraceSource,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.LogHub.TraceSourceListener.AddListener(System.Diagnostics.TraceSource,Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration)">
            <summary>
            Attaches an <see cref="T:Microsoft.VisualStudio.LogHub.ServiceLogTraceListener" /> to the provided <paramref name="traceSource" />.
            </summary>
            <param name="traceSource">The <see cref="T:System.Diagnostics.TraceSource" /> to attach to the listener to.</param>
            <param name="logRegistration">
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> result from
            <see cref="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService.RegisterTraceLogAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)" />.
            </param>
            <returns><see cref="T:System.Boolean" /> indicating if the operation succeeded. If true, listener is attached, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory">
            <summary>
            A delegate that creates new instances of a service to be exposed by an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="moniker">The identifier for the service that is requested.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="serviceBroker">The service broker that the service returned from this delegate should use to obtain any of its own dependencies.</param>
            <param name="cancellationToken">A token to indicate that the caller has lost interest in the result.</param>
            <returns>A unique instance of the service. If the value implements <see cref="T:System.IDisposable" />, the value will be disposed when the client disconnects.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory">
            <summary>
            A delegate that creates new instances of a service to be exposed by an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="moniker">The identifier for the service that is requested.</param>
            <param name="options">Additional options that alter how the service may be activated or provide additional data to the service constructor.</param>
            <param name="serviceBroker">The service broker that the service returned from this delegate should use to obtain any of its own dependencies.</param>
            <param name="authorizationServiceClient">
            The authorization service for this brokered service to use.
            Must be disposed of by the service or the service factory, unless the service factory itself throws an exception.
            </param>
            <param name="cancellationToken">A token to indicate that the caller has lost interest in the result.</param>
            <returns>A unique instance of the service. If the value implements <see cref="T:System.IDisposable" />, the value will be disposed when the client disconnects.</returns>
            <seealso cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy">
            <summary>
            Policies that may apply to how to treat credentials.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy.RequestOverridesDefault">
            <summary>
            If the service request carries client credentials with it, use that instead of what this filter would apply.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy.FilterOverridesRequest">
            <summary>
            Always replace the client credentials on a request with the set specified on this filter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute">
            <summary>
            Exports a class as a brokered service.
            </summary>
            <remarks>
            <para>The class that this attribute is applied to must implement <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService" />.</para>
            <para>Any other MEF attributes used by the class with this attribute applied should come from the System.ComponentModel.Composition namespace.</para>
            <para>This attribute may be applied multiple times if multiple versions of the brokered service are supported.</para>
            <para>
            Exported brokered services may import any other MEF export from the default scope, along with the following types (with no explicit contract name):
            <list type="bullet">
            <item><see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.ServiceActivationOptions" /></item>
            <item><see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /></item>
            </list>
            </para>
            <para>Brokered services may not import other brokered service. They must use <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to acquire them.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" /> class.
            </summary>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
            <param name="version">The version of the proffered service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />). May be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceName">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" /> of the exported brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceVersion">
            <summary>
            Gets the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" /> of the exported brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience">
            <summary>
            Gets or sets a value indicating which clients should be allowed to directly acquire this service.
            Audiences may be bitwise-OR'd together to expand the set of clients that are allowed to acquire this service.
            </summary>
            <value>The default value is <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Process" />.</value>
            <remarks>
            This is an architectural control and not a security boundary, since untrusted parties may acquire a service
            that you *do* allow to acquire this service, thus giving indirect access to this service to the untrusted client.
            Use <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" /> (usually via the caching
            <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> wrapper) to perform security checks within
            your publicly exposed methods to ensure the ultimate client is authorized to perform any operation.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when an attempt is made to set this value to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None" />.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.AllowTransitiveGuestClients">
             <summary>
             Gets or sets a value indicating whether guest clients are allowed to transitively acquire this service.
             By default (<c>false</c>), only owners are allowed to access a brokered service. To opt-in to allowing
             guests to acquire the proffered service, set this to <c>true</c>. By setting this to <c>true</c> the service
             now has sole responsibility in correctly using <see cref="T:Microsoft.ServiceHub.Framework.Services.IAuthorizationService" />
             to authorize sensitive operations.
             </summary>
             <remarks>
             <para>Whereas <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" /> is an architectural control, this property defines the security boundary.</para>
             
             <para> Transitive Access Example: Service A performs sensitive operations. It is proffered with <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveClient" />
             so that it can only be *directly* acquired by owners. However, this is not sufficient to prevent unauthorized access.
             If Service B is proffered with <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.AllClientsIncludingGuests" />,
             it can be *directly* acquired by guests. When Service B internally acquires an instance of Service A, this means that guests now have
             *indirect* access to the sensitive operations in Service A. If Service A has not implemented authorization to guard sensitive operations,
             this indirect access violates the security boundary.</para>
            
             <para>In order to prevent untrusted parties transitively aquiring a service that should require authorization,
             by default all brokered services are only accessible to owners. This is regardless of the value of <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" />.
             In the example above, if Service B has been aquired by a guest, the attempt to acquire Service A will fail.</para>
             
             <para>When a service has implemented authorization to guard sensitive operations, it can opt-in to allowing
             guest acquisition by setting this property to <c>true</c>.</para>
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata">
            <summary>
            Describes the metadata expected from the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" />.
            </summary>
            <devremarks>
            This should stay in sync with the metadata added by that attribute.
            Each metadata is declared as an array because that attribute has <see cref="P:System.AttributeUsageAttribute.AllowMultiple" />
            set to <see langword="true" />.
            </devremarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.ServiceName">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceName" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.ServiceVersion">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.ServiceVersion" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.Audience">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServicesExportMetadata.AllowTransitiveGuestClients">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.AllowTransitiveGuestClients" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer">
            <summary>
            Provides a means to proffer services into <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> and access to the global <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)">
            <summary>
            Proffers a service for publication via an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> associated with this container.
            </summary>
            <param name="serviceDescriptor">
            The descriptor for the service.
            The <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" /> is used to match service requests to the <paramref name="factory" />.
            The <see cref="M:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.ConstructRpcConnection(System.IO.Pipelines.IDuplexPipe)" /> method is used to convert the service returned by the <paramref name="factory" /> to a pipe when the client prefers that.
            </param>
            <param name="factory">The delegate that will create new instances of the service for each client.</param>
            <returns>A value that can be disposed to remove the proffered service from availability.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="serviceDescriptor" /> represents a <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> that has already been proffered.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if no registration can be found for the proffered <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" />.
            </exception>
            <remarks>
            The service identified by the <see cref="P:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor.Moniker" /> must have been pre-registered
            with a <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience" /> indicating who should have access to it and whether it might be obtained from a remote machine or user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.AuthorizingBrokeredServiceFactory)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.GetFullAccessServiceBroker">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> with full access to all services available to this process with local credentials applied by default for all service requests.
            This should *not* be used within a brokered service, which should instead use the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that is given to its service factory.
            </summary>
            <returns>An <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> instance created for the caller.</returns>
            <remarks>
            <para>
            When a service request is made with an empty set of <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCredentials" />,
            local (full) permissions are applied.
            A service request that includes its own client credentials may effectively "reduce" permission levels for the requested service
            if the service contains authorization checks. It will not remove a service from availability entirely since the service audience
            is always to allow all services to be obtained.
            </para>
            <para>
            Callers should use the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> they are provided via their <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> instead of using
            this method to get an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> so that they are secure by default.
            An exception to this rule is when a service exposed to untrusted users has fully vetted the input for a specific incoming RPC call
            and wishes to request other services with full trust in order to accomplish something the user would otherwise not have permission to do.
            This should be done with great care.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerDiagnostics">
            <summary>
            Allows for retrieval or export of manifest, registration and runtime data that can be useful in diagnosing a service acquisition failure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerDiagnostics.ExportDiagnosticsAsync(System.String,Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Threading.CancellationToken)">
            <summary>
            Writes a bunch of diagnostic data to a JSON file.
            </summary>
            <param name="filePath">The path to the JSON file to be written. If it already exists it will be overwritten.</param>
            <param name="serviceAudience">The audience to consider is querying for services.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes when the writing is done.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal">
            <summary>
            An internal-interface that provides access to more of what <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer" /> offers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal.LocalUserCredentials">
            <summary>
            Gets credentials to use to impersonate the local user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainerInternal.GetLimitedAccessServiceBroker(Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Microsoft.VisualStudio.Shell.ServiceBroker.ClientCredentialsPolicy)">
            <summary>
            Gets a service broker that targets an out of proc and/or less trusted consumer.
            </summary>
            <param name="audience">The architectural position of the consumer.</param>
            <param name="clientCredentials">The client credentials to associate with this consumer, if less trusted.</param>
            <param name="credentialPolicy">How to apply client credentials to individual service requests.</param>
            <returns>The custom <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService">
            <summary>
            An interface that must be implemented by a brokered service that is exported to MEF
            via the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService.Descriptor">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> to be used when activating the service.
            </summary>
            <remarks>
            When a brokered service supports multiple versions in their <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" />,
            it may be important to consider the version being activated to know which <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> to return
            from this property.
            This <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> may be imported via MEF in the same MEF part that implements this interface
            in order to check the value before returning from this property getter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.IExportedBrokeredService.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the brokered service before returning the new instance to its client.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that completes with initialization.</returns>
            <remarks>
            <para>This method offers the brokered service an <em>optional</em> opportunity to do async initialization,
            similar to what <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> would have allowed for when proffering a non-MEF
            brokered service with <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.Proffer(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor,Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory)" />.
            Empty methods may simply return <see cref="P:System.Threading.Tasks.Task.CompletedTask" />.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience">
            <summary>
            Identifies various audiences that may want or need to access a service.
            When used to register a service (e.g. ProvideBrokeredServiceAttribute)
            it determines whether that service can be accessed locally, remotely and/or by 3rd parties.
            </summary>
            <remarks>
            This enum may also be used as a filter when constructing an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />
            where each flag reduces the set of services available as only services that specify every flag
            in the filter are available.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.None">
            <summary>
            No flags. The service is not available to anyone.
            When used for a filtered view, it means apply no filters (all services are available).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Process">
            <summary>
            Services are available for clients running in the same process (or <see cref="T:System.AppDomain" /> on the .NET Framework).
            They will not be available from other processes (e.g. ServiceHub services).
            A brokered service that includes this flag may still be *indirectly* exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" />
            by way of another brokered service that is exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" /> that is proffered from this process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.Local">
            <summary>
            The service is available for clients that support this process (e.g. ServiceHub services). These always run on the same machine and user account.
            It does *not* include processes connected over Live Share or a Visual Studio Online Environment connection, even if these processes are running on the same machine.
            A brokered service that includes this flag may still be *indirectly* exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" />
            by way of another brokered service that is exposed to <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest" /> that is proffered from this machine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveClient">
            <summary>
            When the service is running on an Visual Studio Online environment it is available to the client.
            </summary>
            <remarks>
            Host services are available for the *one* client running on any machine that is connected remotely using the exclusive
            owner connection (not the traditional Live Share sharing session).
            Such a connection is *always* owned by the same owner as the server and thus is considered trusted.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.LiveShareGuest">
            <summary>
            When the service is running on a Live Share host it is available for Live Share guests,
            which may or may not be using the same user account as the host.
            </summary>
            <remarks>
            Host services are available for remote Live Share clients running under *any* user account.
            Any necessary authorization checks are the responsibility of the service.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.RemoteExclusiveServer">
            <summary>
            When the service is running on a client of an Visual Studio Online environment, it is available to the server.
            </summary>
            <remarks>
            Client services are proffered to a server over an exclusive connection that is always operated by the owner at both ends
            (and is not the traditional Live Share sharing session).
            A server never has more than one of these connections concurrently.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.AllClientsIncludingGuests">
            <summary>
            The service is available for local processes as well as clients of Visual Studio Online environments and all Live Share guests (including untrusted strangers).
            </summary>
            <remarks>
            Host services are available for all clients (owner or guest), whether they are local, remote over Live Share or remote over an exclusive connection.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceAudience.PublicSdk">
            <summary>
            The service is considered part of the public SDK,
            and thus is available to 3rd party clients that are only privileged to access public SDK services.
            This flag should only be specified for public services that have stable APIs.
            This flag must be combined with other flags to indicate which local and/or remote clients are allowed to request this service.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices">
            <summary>
            Provides an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> implementation for brokered services proffered via MEF
            and serves as the factory for these services.
            </summary>
            <remarks>
            This factory only creates <em>one</em> brokered service.
            As this object serves as the entry into a MEF sharing boundary, that means only one brokered service gets an instance of this class.
            This is as desired, since each consumer of an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> should ideally have its own copy.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.InnerServiceBroker">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that this instance forwards all calls to.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            This should be set to an object that is scoped for the particular activated brokered service the same way the object passed to
            <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceFactory" /> would be.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ServiceActivationOptions">
            <summary>
            Gets or sets the <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ServiceActivationOptions" /> for the particular brokered service this object in created to serve.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ActivatedMoniker">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> for the particular brokered service this object in created to serve.
            </summary>
            <remarks>
            This should be set early during MEF brokered service activation so that it can be imported by the brokered service once activated.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.AuthorizationServiceClient">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceHub.Framework.Services.AuthorizationServiceClient" /> to be exported for optional use by the brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ExportedServiceMetadata">
            <summary>
            Enumerates the metadata exported from all MEF-based brokered services.
            </summary>
            <remarks>
            This is used for brokered service registration and proffering by the <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Initialize" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.Helper">
            <summary>
            Gets or sets a helper class that contains MefV1 imports.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.CreateBrokeredServiceAsync(System.Threading.CancellationToken)">
            <summary>
            Activates the one brokered service indicated by the <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.ActivatedMoniker" /> property.
            </summary>
            <returns>The activated service.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.MefV1Helper">
            <summary>
            A class with MEFv1 attributes to force brokered service NonShared construction.
            </summary>
            <remarks>
            Our parent class must use MEFv2 attributes because only they can express sharing boundaries with <see cref="T:System.Composition.SharedAttribute" />.
            But only MEFv1 attributes allow setting <see cref="P:System.ComponentModel.Composition.ImportManyAttribute.RequiredCreationPolicy" />
            as required to activate a new brokered service for each client.
            We bridge this feature gap between the two sets of attributes via this helper class, so that the outer class can use MEFv2
            and the nested class can use MEFv1, thereby making both sets of features available as required.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerForExportedBrokeredServices.MefV1Helper.ExportedBrokeredServices">
            <summary>
            Gets or sets the collection of all brokered services, from which only one is ever activated (for a given instance of this class).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices">
            <summary>
            Implements the <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> to be proffered into the <see cref="T:Microsoft.VisualStudio.Utilities.ServiceBroker.GlobalBrokeredServiceContainer" />
            in order to effectively proffer all the MEF-activated brokered services in the IDE.
            </summary>
            <remarks>
            A host IDE should derive from this class and apply <see cref="T:System.Composition.ExportAttribute" /> to the derived type.
            At startup, the IDE should acquire this export and call <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.RegisterAndProfferServicesAsync(System.Threading.CancellationToken)" />
            to add MEF exported brokered services to the container.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.serviceRegistration">
            <summary>
            The registration data for all MEF brokered services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.serviceMonikers">
            <summary>
            The monikers to all MEF brokered services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.ServiceBrokerFactory">
            <summary>
            Gets or sets the sharing boundary factory used to activate each MEF brokered service.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Microsoft#ServiceHub#Framework#IServiceBroker#AvailabilityChanged">
            <summary>
            We never raise this event, so just drop the handlers on the floor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.GetBrokeredServiceContainerAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the global brokered service container.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The global brokered service container.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.ActivateBrokeredServiceAsync(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceActivationOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of a MEF sharing boundary within which a brokered service with the specified moniker will be activated.
            </summary>
            <param name="serviceMoniker">The moniker of the required service.</param>
            <param name="contextualServiceBroker">The service broker that is created specifically for this brokered service.</param>
            <param name="serviceActivationOptions">The activation options to use with this service.</param>
            <returns>The MEF export representing this sharing boundary.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ServiceBrokerOfExportedServices.Initialize">
            <summary>
            Initializes internal data structures after MEF has set importing properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer">
            <summary>
            The service ID for the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer">brokered service container</see>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsFullAccessServiceBroker">
            <summary>
            A type to serve as the MEF contract name for importing an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" /> that is equivalent
            to what would have come from a call to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.IBrokeredServiceContainer.GetFullAccessServiceBroker" /> on
            the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.SVsBrokeredServiceContainer" />.
            </summary>
            <remarks>
            This can be imported in a MEF part like this:
            <code><![CDATA[
            [Import(typeof(SVsFullAccessServiceBroker))]
            private IServiceBroker serviceBroker;
            ]]></code>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.AmbientContextStoreLoggerAdapter">
            <summary>
            Adds ambient context to an <see cref="T:Microsoft.VisualStudio.Settings.IStoreUpdateLogger" />.  Ambient context is implemented via the <see cref="M:Microsoft.VisualStudio.Settings.Internal.AmbientContextStoreLoggerAdapter.SetContext(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance[])" />
            method, which allows the caller to supply properties which will be set on all events emitted within the current execution context until the returned
            <see cref="T:System.IDisposable" /> is disposed.  In other words, if two different threads or two different async flows are running concurrently, calling
            <see cref="M:Microsoft.VisualStudio.Settings.Internal.AmbientContextStoreLoggerAdapter.SetContext(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance[])" /> in one will not affect the logging of the other, even if the other emits log entries while the
            <see cref="M:Microsoft.VisualStudio.Settings.Internal.AmbientContextStoreLoggerAdapter.SetContext(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance[])" /> return value is active (not yet disposed).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.AmbientContextStoreLoggerAdapter.ReplaceOrCombineWithExistingProperty(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance)">
            <summary>
            Given a new ambient property, returns a value that is either the new property or a combination of the old and new properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.AsyncLocalRestorer">
            <summary>
            Captures the current value of an <see cref="T:System.Threading.AsyncLocal`1" /> on construction and restores it on disposal.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.ExclusiveFileOpener">
            <summary>
            Maintains state to support looping while repeatedly attempting to open a file with exclusive access.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.FireAndForgetTaskTracker">
            <summary>
            Manages "fire and forget" tasks by providing a way to wait until all in-progress tasks have completed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.HttpEscaper">
            <summary>
            Escapes strings that will be part of URLs so they won't interfere with URL processing
            and won't be blocked as "dangerous".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.ISettingsManagerResetUserData">
            <summary>
            Clear the settings store when it is initialized rather than download any new shared settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.Internal.ISettingsManagerResetUserData.ClearSettingsOnStoreInitialization">
            <summary>
            Clear the settings store when it is initialized rather than download any new shared settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.Internal.ISettingsManagerResetUserData.ClearSettings">
            <summary>
            List of settings to be cleared. Use this list to clear only a specific set of settings
            as against deleting all the settings when <see cref="P:Microsoft.VisualStudio.Settings.Internal.ISettingsManagerResetUserData.ClearSettingsOnStoreInitialization" /> is true.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.ITraceLogger">
            <summary>
            Logs trace output.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.ITraceLogger.LogAsync(Microsoft.VisualStudio.Settings.Internal.TraceLogEntryType,System.String,System.Object[])">
            <summary>
            Logs a single message.
            </summary>
            <param name="entryType">The type of message, e.g. information or error.</param>
            <param name="messageOrFormat">A format string (as one would pass to <see cref="M:System.String.Format(System.String,System.Object[])" />) or a literal string if <paramref name="args" /> is empty.</param>
            <param name="args">Arguments corresponding to the fields in the format string.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.JsonEqualityComparer">
            <summary>
            Compares objects based on their serialized JSON representation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.JsonUtilities.TryGetContentOfJValue(System.Object,System.Object@)">
            <summary>
            If target is a JValue, gets its underlying .NET object and returns true; otherwise, returns false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.JsonUtilities.GetPropertiesOfJsonObject(System.Object)">
            <summary>
            If target is <c>IEnumerable{KeyValuePair{string,JToken}}</c>, returns its contents; otherwise, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore">
            <summary>
            Provides exclusive access to a resource with a guarantee that higher-priority access requests are
            serviced first and equal-priority requests are serviced in the order they are made.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.waiters">
            <summary>
            The requests currently waiting to acquire the resource, in the order they should be serviced.  Lock this when accessing it.
            Never acquire <see cref="F:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.accessLock" /> while holding a lock on <see cref="F:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.waiters" /> -- that could lead to a deadlock.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.processingLock">
            <summary>
            This is used in <see cref="M:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.ProcessOneRequestAsync" /> to ensure that processing is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.WaitForAccessAsync(System.Int32,Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.LockType,System.Threading.CancellationToken)">
            <summary>
            Acquires the access lock.  The caller must dispose the returned object to allow subsequent requests to succeed.
            The caller may NOT schedule any UI thread tasks or make any RPC transitions to the UI thread while holding the
            lock.  Doing so risks deadlock.
            </summary>
            <param name="priority">Lower priority numbers are serviced first.</param>
            <param name="cancellationToken">This is used to cancel the wait.</param>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before access is granted.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.WaitingCount">
            <summary>
            Gets the number of access requests currently pending.
            </summary>
            <remarks>
            Due to multi-threading, the value may be invalid by the time it's returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.ProcessOneRequestAsync">
            <summary>
            Wait for <see cref="F:Microsoft.VisualStudio.Settings.Internal.PrioritizedFifoSemaphore.accessLock" /> to be available and signal the next request in line as
            completed.
            </summary>
            <remarks>
            This method must always run on a background thread and not require the UI thread, to avoid
            deadlocks.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.Serializer">
            <summary>
            Serializes simple, known types using TypeConverter (for perf) and everything else using Json.NET.
            This helps avoid perf regressions during VS startup as long as only simple types are used for settings that
            must be stored or retrieved during startup.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.Internal.Serializer.SpecialTypeIndicator">
            <summary>
            A JSON value will never begin with this so we can use it to distinguish JSON from specially serialized values.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.Internal.Serializer._specialTypes">
            <summary>
            Stores the Type and TypeConverter associated with each type name.  In the static constructor, entries for
            all the supported types will be added, but the TypeConverter values will be null.  They will be changed
            to non-null lazily as the TypeConverters are needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Serialize the given object to a string.
            </summary>
            <param name="makeConsistentWithJsonRoundTripping">
            Ensures that the return value, when passed to Deserialize&lt;object&gt;, will be returned as the same type, as long as the original object was
            a simple type like int, float, etc..  If this parameter is false, the type may be converted (e.g. int will be converted to long, float to double).
            Complex and user-defined types will always be returned from Deserialize&lt;object&gt; as <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.ConvertToJsonDotNetPreferredDeserializationType(System.Object)">
            <summary>
            Converts an object to the type that would result if serialized via Json.NET and then deserialized,
            but without actually using Json.NET (for perf reasons).  For example:
            - short =&gt; long
            - int =&gt; long
            - ulong =&gt; long unless its value is &gt; long.MaxValue
            - float =&gt; double
            If the object cannot (or need not) be converted, the original object is returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.GetConverter(System.String)">
            <summary>
            If <paramref name="typeName" /> is a supported type for TypeConverter-based serialization, ensures the
            converter is in _specialTypes and returns it; otherwise, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.TryCastWithUnboxing``1(System.Object,``0@)">
            <summary>
            Try to unbox a value and then cast it to the requested type.  Simply using the cast operator on
            a boxed value, e.g. "return (T)value," will throw InvalidCastException if T is not exactly
            the same type as value.  To avoid this (allowing scenarios like storing a byte which is then
            queried as an int), we first "rebox" the value as type T and then apply the cast operator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.ConvertToEfficientRepresentation(System.String)">
            <summary>
            Convert a serialized string to the representation that's most efficient to deserialize.
            For well-known primitive types, this is our internal serialization format rather than JSON.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.Serializer.SerializeAsDoubleOrDecimal(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Re-serialize a <see cref="T:Newtonsoft.Json.Linq.JToken" /> in our internal format as double or decimal,
            whichever provides more accuracy.
            </summary>
            <param name="token">A token that must be of type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Float" /></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.SingleFileIndexedStorage">
            <summary>
            Allows reading and writing name-value string pairs in a file and implements IDisposable to hold the file open
            until it's disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.SingleFileIndexedStorage.Cache">
             <summary>
             We cache the globals, setting names, and dictionaries used to track file content changes because they are used
             every time.  We don't cache the indexed content because it can grow quite large and because callers access different
             parts of it each time.
            
             This is an inner class because it's closely tied to <see cref="T:Microsoft.VisualStudio.Settings.Internal.SingleFileIndexedStorage" /> -- it isn't useful in
             any other context.  It's internal rather than private so it can be tested independently.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.SingleFileIndexedStorage.#ctor(System.String,System.Boolean,Microsoft.VisualStudio.Settings.Internal.ITraceLogger,System.IDisposable)">
            <summary>
            WARNING: do not call this without first acquiring the storage lock (e.g. via
            StorageAccess.Open / OpenAsync).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.Internal.StorageAccess.PendingAccessRequests">
            <summary>
            Gets the number of access requests currently pending.
            </summary>
            <remarks>
            Due to multi-threading, the value may be invalid by the time it's returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageAccess.Open(System.String,System.TimeSpan,System.Boolean)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <returns>An object which releases the storage access when disposed.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the timeout is exceeded before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageAccess.OpenAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <returns>An object which releases the storage access when disposed.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageAccess.OpenAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            </summary>
            <returns>An object which releases the storage access when disposed.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageAccess.OpenAsync(System.String,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <returns>An object which releases the storage access when disposed.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled or <paramref name="timeout" /> is exceeded before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageAccess.OpenAsync(System.String,System.Int32,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <returns>An object which releases the storage access when disposed.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled or <paramref name="timeout" /> is exceeded before access is granted.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.StorageAccess.MultiDisposer">
            <summary>
            Guarantee disposal of all provided objects even if exceptions are thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.PendingAccessRequests">
            <summary>
            Gets the number of access requests currently pending.
            </summary>
            <remarks>
            Due to multi-threading, the value may be invalid by the time it's returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.Open(System.String,System.TimeSpan,System.Boolean)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.TimeoutException">Thrown if the timeout is exceeded before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.Open(System.String,Microsoft.VisualStudio.Settings.Internal.ITraceLogger,System.TimeSpan,System.Boolean)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.TimeoutException">Thrown if the timeout is exceeded before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.OpenAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.OpenAsync(System.String,Microsoft.VisualStudio.Settings.Internal.ITraceLogger,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.OpenAsync(System.String,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled or <paramref name="timeout" /> is exceeded before access is granted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.StorageFactory`1.OpenAsync(System.String,Microsoft.VisualStudio.Settings.Internal.ITraceLogger,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Acquires access to the storage file.  The caller may NOT schedule any UI thread tasks or make
            any RPC transitions to the UI thread after this call before disposing the storage object.  Doing so risks deadlock.
            Reentrant (RPC) calls that occur while the lock is held can also lead to deadlocks because the returned object
            holds a semaphore that is only released on disposal.
            </summary>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if <paramref name="cancellationToken" /> is canceled or <paramref name="timeout" /> is exceeded before access is granted.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.TraceLogEntryType">
            <remarks>
            Update the the switch statement in <see cref="M:Microsoft.VisualStudio.Settings.TabDelimitingLogMessageFormatter.EnumValueName(Microsoft.VisualStudio.Settings.Internal.TraceLogEntryType)" />
            whenever this enum's values change.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.XmlIndexedStorage">
            <summary>
            Allows reading and writing name-value string pairs in a file and implements IDisposable to hold the file open
            until it's disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Internal.XmlIndexedStorage.Cache">
            <summary>
            This class is immutable.  To update it, we replace it with a new instance.  This allows readers to operate
            against a previous snapshot of the cache while the writer is updating it, without exposing them to race
            conditions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.XmlIndexedStorage.CreateInstanceAgainstCacheSnapshot(System.String,System.Boolean,Microsoft.VisualStudio.Settings.Internal.ITraceLogger)">
            <summary>
            If the static cache exists and is valid, create an XmlIndexedStorage against it.  This allows read-only storage
            objects to be created while writers are active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Internal.XmlIndexedStorage.#ctor(System.String,System.Boolean,Microsoft.VisualStudio.Settings.Internal.ITraceLogger,System.IDisposable)">
            <summary>
            WARNING: do not call this without first acquiring the storage lock (e.g. via
            StorageAccess.Open / OpenAsync).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.PropertyChangedAsyncEventHandler">
            <summary>
            An event handler similar to <see cref="T:System.ComponentModel.PropertyChangedEventHandler" /> that returns a
            <see cref="T:System.Threading.Tasks.Task" /> so the handler can be asynchronous.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.CollectionChangedAsyncEventHandler">
            <summary>
            A handler for changes to an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" /> that returns a
            <see cref="T:System.Threading.Tasks.Task" /> so it can be asynchronous.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StoreUpdatedEventHandler">
            <summary>
            A handler for events raised by <see cref="E:Microsoft.VisualStudio.Settings.IAsyncStringStorage.StoreUpdated" /> that returns a
            <see cref="T:System.Threading.Tasks.Task" /> so it can be asynchronous.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.AsyncEventHandler">
            <summary>
            A handler for async events that returns a <see cref="T:System.Threading.Tasks.Task" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.LockedStorageCreatorDelegate`1">
            <summary>
            A delegate that creates a stoage object, used by the constructor
            of the storage factory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.NonLockedStorageCreatorDelegate`1">
            <summary>
            A delegate that creates a storage object, used by the constructor
            of the storage factory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.DelegatingTraceLogger">
            <summary>
            Delegates calls to <see cref="M:Microsoft.VisualStudio.Settings.Internal.ITraceLogger.LogAsync(Microsoft.VisualStudio.Settings.Internal.TraceLogEntryType,System.String,System.Object[])" /> to one or more other loggers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.DisposableComposite">
            <summary>
            <see cref="T:System.IDisposable" /> that simply disposes a collection of other <see cref="T:System.IDisposable" />s when it is disposed. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1">
            <summary>
            Schedules tasks such that only one executes at a time and tasks requested while one is already
            pending just piggyback on the pending task instead of resulting in new work.
            </summary>
            <typeparam name="T">The argument to be passed to the filter.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1.#ctor(System.Func{System.Collections.Generic.IReadOnlyList{`0},System.Threading.Tasks.Task},System.Predicate{`0},System.Threading.SemaphoreSlim,System.TimeSpan)">
            <param name="worker">The main worker task.</param>
            <param name="filter">Performs a check to decide whether to invoke the worker task.  May be null.</param>
            <param name="semaphore">The semaphore to use for serializing worker tasks.</param>
            <param name="batchingThreshold">Multiple calls to <see cref="M:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1.DoWorkAsync(`0)" /> within this time span will be batched together.</param>
            <remarks>
            By passing a nonzero <see cref="F:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1.batchingThreshold" />, you can enable multiple <see cref="M:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1.DoWorkAsync(`0)" /> calls
            to be batched into a single task as long as each is within a <see cref="F:Microsoft.VisualStudio.Settings.ExclusiveScheduler`1.batchingThreshold" /> time span of the
            previous one. If you pass zero, multiple calls can still be batched but only into two or more tasks, not into
            a single task.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.FileCollectionSizeController.MaxFileBytesToKeep">
            <summary>
            Get maximum total size of log files allowed. This includes all logs, including the recent ones.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.FileCollectionSizeController.MaxFileCountToKeep">
            <summary>
            Get maximum number of log files allowed. This includes all logs, including the recent ones.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.FileCollectionSizeController.DeleteFilesIfNecessary(System.String)">
            <summary>
            Delete files from <paramref name="folder" />, oldest first (by last write time), as long as the oldest file is at least
            <see cref="P:Microsoft.VisualStudio.Settings.FileCollectionSizeController.MinAgeToKeep" /> old and the total combined size is greater than <see cref="P:Microsoft.VisualStudio.Settings.FileCollectionSizeController.MinFileBytesToKeep" /> bytes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.FileTraceLogger">
            <summary>
            Logs trace messages to a file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.FileTraceLogger.LogArgs">
            <summary>
            Arguments for message logging.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.FileTraceLogger.InternalLogAsync(System.Threading.Tasks.Task)">
            <remarks>
            This method isn't thread safe (it mustn't run at the same time on two threads).
            </remarks>
            <param name="predecessor">The task representing the previous instance of this method.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.FileTraceLogger.SerializeWithNewline(System.String)">
            <summary>
            Serializes a string into <see cref="F:Microsoft.VisualStudio.Settings.FileTraceLogger.byteBuffer" />.  NOT THREAD SAFE.
            </summary>
            <remarks>
            The reason we do the encoding this way instead of using StreamWriter is to avoid memory allocations.
            </remarks>
            <returns>The number of bytes in the result (may be less than <see cref="F:Microsoft.VisualStudio.Settings.FileTraceLogger.byteBuffer" />.Length</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.FilteringStoreUpdateLogger">
            <summary>
            A decorator that can filter certain store updates so they aren't logged.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.GetValueResult">
            <summary>
            The result of an operation to retrieve a value from the settings store.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Success">
            <summary>
            The value was retrieved and converted to the specified type successfully. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Missing">
            <summary>
            The value is not present in the store.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.Corrupt">
            <summary>
            The stored value could not be deserialized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.IncompatibleType">
            <summary>
            The deserialized value could not be converted to the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.ObsoleteFormat">
            <summary>
            The stored value is in a old serialization format that is no longer supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.GetValueResult.UnknownError">
            <summary>
            An unexpected error occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IAsyncStringStorage">
            <summary>
            Stores and retrieves strings.  Used as an abstraction over the settings service in the hub and unit-test mocks.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.SetAsync(Microsoft.VisualStudio.Settings.NamedVersionedString,System.Threading.CancellationToken)">
            <summary>
            Creates or changes a setting value.  The value provided will replace the existing value only if <paramref name="value.Revision.Revision" />
            is equal to the current revision of the value.  The revision number increases each time the value is set.
            </summary>
            <returns>True if the value was replaced successfully, else false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Only used by tests.  Does not fire change events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IAsyncStringStorage.GetStoreIdentityAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the unique ID for the settings store, which is randomly generated whenever the store is recreated.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.IAsyncStringStorage.StoreUpdated">
            <summary>
            Indicates the store has been updated, but what specific values may have changed is unknown. Clients maintaining cached copies
            of data should refetch in this case.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs">
            <summary>
            Arguments for a change in the application's idle state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs.IsIdle">
            <summary>
            Whether the application is currently idle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.VisualStudio.Settings.IdleStateChangedEventArgs" /> object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IFileCollectionSizeController">
            <summary>
            Controls the size of a collection of files (such as log files) by deleting older ones when necessary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IFileCollectionSizeController.DeleteFilesIfNecessary(System.String)">
            <summary>
            Removes files from <paramref name="folder" /> if necessary to meet a size limitation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.IListChanges`2.Deletions">
            <summary>
            The keys of items that were deleted.  Order doesn't matter here. There may be items with the same key in both the <see cref="P:Microsoft.VisualStudio.Settings.IListChanges`2.Deletions" /> and 
            <see cref="P:Microsoft.VisualStudio.Settings.IListChanges`2.Additions" /> list. This represents a replacement. This property will not be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.IListChanges`2.Additions">
            <summary>
            Key/value pairs that were added, in chronological order (earliest at the beginning, latest at the end). There may be items with the same key in 
            both the <see cref="P:Microsoft.VisualStudio.Settings.IListChanges`2.Deletions" /> and <see cref="P:Microsoft.VisualStudio.Settings.IListChanges`2.Additions" /> list. This represents a replacement. This property will not be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IListMerger">
            <summary>
            Handles merging operations for setting collections.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IListMerger.ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
            <summary>
            Given a baseline and two current lists, computes the merged result. The differences between the baseline and the current
            lists are analyzed in terms of the following operations:
              * Add a new item to the front (index 0)
              * Remove an item from anywhere
            This method derives an ordered list of operations that would transform the baseline into each of the current lists, combines
            them, and applies them to the baseline to generate the result. The order of operations in "first" and "second" is maintained
            within the list but not between lists; for example, if the baseline is {0}, first is {1,0} and second is {2,0}, the result
            may be {1,2,0} or {2,1,0}. Both are equally valid.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="first" />, <paramref name="second" />, or <paramref name="baseline" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IRemoteDefaultsStore.GetSettingDefault``1(System.String,System.String,``0)">
            <summary>
            Attempts to get a default setting override from the remote store, or defaultValue if it does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IRemoteDefaultsStore.CollectionExists(System.String)">
            <summary>
            Determines if a collection of overrides exists.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IServiceHubClient">
            <summary>
            Wrapper over HubClient (the useful parts).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingNameTranslator">
            <summary>
            Translates between private names and shared names.  This allows an application to isolate its settings
            from other apps by inserting a prefix or suffix.
            </summary>
            <remarks>
            Members of this interface may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingNameTranslator.GetSharedNameFromPrivateName(System.String)">
            <summary>
            Given the name of a setting in the private store, returns the name by which the setting should
            be identified in the shared and online stores.
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="privateName" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="privateName" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingNameTranslator.GetPrivateNameFromSharedName(System.String)">
            <summary>
            Given the name of a setting in the shared/online store, returns the name by which the setting should
            be identified in the private store.
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="sharedName" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="sharedName" /> is empty.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsChangeSuppressor">
            <summary>
            Allows temporary blocking of changes to settings that have been modified since
            a certain version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsChangeSuppressor.CurrentSettingsVersion">
            <summary>
            Gets a string which can later be passed in to SuppressChangesToSettingsNewerThan to block changes to
            settings modified since the time this method was called.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsChangeSuppressor.SuppressChangesToSettingsNewerThan(System.String)">
            <summary>
            Blocks changes to settings modified since a given previous version.  Any such changes will be silently
            ignored.  The suppression will continue until the return value is disposed.  Only changes within the
            same "cone" of execution will be affected; if someone else tries to change an affected setting in a
            separate but concurrent async flow, that change will be allowed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsChangeSuppressor.CanChange(System.String)">
            <summary>
            Indicates whether the specified setting is allowed to change based on active suppressions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsList">
            <summary>
            A collection of settings.  The collection is ordered but the server is order-agnostic.  Items can be added
            only at the front but removed from anywhere.  The collection is preserved by the server in the order it was created.
            Keys are treated as case insensitive.
            </summary>
            <remarks>
            Members of this interface may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.AddToFrontAsync(System.String,System.Object,System.Object)">
            <summary>
            Adds a new element to the front of the list.  If there is already an element with the same key in the
            list, that one is deleted.
            </summary>
            <param name="value">An object which will be serialized and persisted as the new value.</param>
            <param name="state">A caller-specified object that will be exposed on change events.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key" /> is empty.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when the given object cannot be serialized.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the value cannot be persisted to the private store (for example, because the disk is full).</exception>
            <exception cref="T:Microsoft.VisualStudio.Settings.SettingTooLargeException">Thrown when the serialized list exceeds the maximum allowed size.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Returns the value corresponding to the given key.  Returns <paramref name="defaultValue" /> if the value is
            missing or not parsable as <typeparamref name="T" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.ClearAsync(System.Object)">
            <summary>
            Removes all elements from the list.
            </summary>
            <param name="state">A caller-specified object that will be exposed on change events.</param>
            <exception cref="T:System.IO.IOException">Thrown when the value cannot be persisted to the private store (for example, because the disk is full).</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.RemoveAsync(System.String,System.Object)">
            <summary>
            Removes a specific element from the list, or does nothing if the element is not found.
            </summary>
            <param name="state">A caller-specified object that will be exposed on change events.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="key" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="key" /> is empty.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the value cannot be persisted to the private store (for example, because the disk is full).</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsList.Keys">
            <summary>
            Gets a snapshot (not a "live" collection) of the keys in the list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsList.RefreshContentFromStoreAsync">
            <summary>
            In case the underlying store has gotten out of sync with the in-memory list representation (which can happen if another
            instance modifies the store, read the store content again and merge it with the in-memory list.
            </summary>
            <exception cref="T:System.TimeoutException">Thrown when the underlying store cannot be accessed within the timeout period.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an IO error occurs while reading the store.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.ISettingsList.CollectionChangedAsync">
            <remarks>
            This event handler may be invoked on any thread. When changes involve both deletions and additions (or replacements, which are modeled as 
            deletion+addition pairs) the additions will be applied first followed by the deletions.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsManager">
            <summary>
            Stores and retrieves settings as well as handling synchronization between applications and machines.
            </summary>
            <remarks>
            Members of this interface may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetValueAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="value">An object which will be serialized and persisted as the new value.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is empty.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when the given object cannot be serialized.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the value cannot be persisted to the private store (for example, because the disk is full).</exception>
            <exception cref="T:Microsoft.VisualStudio.Settings.SettingTooLargeException">Thrown when the serialized object exceeds the maximum allowed size.</exception>
            <exception cref="T:Microsoft.VisualStudio.Settings.SettingNameTooLongException">Thrown when <paramref name="name" /> exceeds the maximum allowed length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Returns the value of a property, or the default if the value is not set.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.TryGetValue``1(System.String,``0@)">
            <summary>
            Attempts to reads a value from the store and returns the result of the operation.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetOrCreateList(System.String,System.Boolean)">
            <summary>
            Retrieves an existing list or creates a new one if one with the specified name doesn't exist.
            </summary>
            <remarks>
            The reason for a special-case "get or create" method for lists (instead of letting the client pass, say,
            IEnumerable to SetValue to create a list) is to avoid a race condition between two clients in which both
            are composing lists "offline" at the same time.  That would require the client to merge the two list
            contents (or discard one of the lists).  By requiring clients to use this method instead, we ensure that
            lists are always "live", never "offline", so as soon as one client starts adding content to the list,
            that content will be visible to all other clients.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is empty.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the empty list cannot be persisted to the private store (for example, because the disk is full).</exception>
            <exception cref="T:Microsoft.VisualStudio.Settings.SettingNameTooLongException">Thrown when <paramref name="name" /> exceeds the maximum allowed length.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.NamesStartingWith(System.String)">
            <summary>
            Returns the names of all settings currently stored whose names begin with the given prefix (case insensitive).
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="prefix" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.GetSubset(System.String)">
            <summary>
            Gets a collection representing all settings whose names match the specified pattern (either an exact match
            or a prefix match depending on whether the pattern ends in '*', both case-insensitive).
            </summary>
            <param name="namePattern">The full name of a setting or a prefix ending in '*'.  Case-insensitive.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="namePattern" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="namePattern" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetSharedStore(Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
            <summary>
            Temporary internal helper method that will be removed after VS 14 Preview.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager.SetOnlineStore(Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
            <summary>
            Temporary internal helper method that will be removed after VS 14 Preview.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManager2.StoreUpdateLogger">
            <summary>
            The logger used to record setting store updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManager2.GetRevision(System.String)">
            <summary>
            Returns the internal revision number of the given setting, or null if there is none.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsManagerHost">
            <summary>
            Functionality provided by the application that creates an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" /> via
            <see cref="M:Microsoft.VisualStudio.Settings.SettingsManagerFactory.CreateInstance(Microsoft.VisualStudio.Settings.ISettingsManagerHost)" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.ISettingsManagerHost.IdleStateChanged">
            <summary>
            Raised when the host application goes idle or becomes active again, to enable reduced
            resource usage during the idle period.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.ISettingsManagerHost.HostShuttingDown">
            <summary>
            Raised when the host is about to shut down, to give the settings manager an opportunity
            to release resources, finish or cancel async tasks, etc. The host should wait until
            the async event handler is complete (e.g. using the
            <see cref="M:Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEventAsync``1(System.Delegate,System.Object,``0)" /> extension
            method) before continuing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.AppInitCompletionTask">
            <summary>
            Optional task indicating the host is finished starting. The settings manager will defer
            resource-intensive tasks until after this task completes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.NameTranslator">
            <summary>
            Optional translator between private and shared setting names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.PrivateStorage">
            <summary>
            The backing store for private settings.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.Logger">
            <summary>
            A logger for error telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerHost.IsSharedOrRoamedSetting(System.String)">
            <summary>
            Determines whether a setting is private vs. shared/roamed.
            </summary>
            <param name="settingName">The name of the setting to test.</param>
            <returns>False if the setting is private, else true.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.CollectionName">
            <summary>
            Gets the name of the settings collection to be addressed by this host.  This is used to partition settings
            based on host parameters like VS's /rootSuffix parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.TelemetrySettings">
            <summary>
            Gets the serialized telemetry settings from the host, obtained via ITelemetrySession.SerializeSettings.
            This may be null if the host has no telemetry session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost.AppDir">
            <summary>
            Gets the application directory
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerHost2.GetTelemetrySettingsAsync">
            <summary>
            Gets the serialized telemetry settings from the host, obtained via ITelemetrySession.SerializeSettings.
            The result may be null if the host has no telemetry session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost3.RemoteDefaultsStore">
            <summary>
            The remote defaults store to override setting defaults.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost4.DurableHostIdentity">
            <summary>
            Additional process infomation.
            Use to add context to the log, does not need to follow any specific format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost4.StoreUpdateLogger">
            <summary>
            A logger for recording updates to setting stores.  May be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost4.IsRoamingEnabledByDefault">
            <summary>
            Gets a value indicating whether roaming and sharing should be enabled when the "RoamingEnabled"
            setting hasn't been persisted yet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerHost5.IsRoamingAndSharingAllowed">
            <summary>
            If false, prevents roaming and sharing regardless of the value of the setting that normally controls it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerInternal.Serialize(System.Object,System.Boolean)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.Settings.Internal.Serializer.Serialize(System.Object,System.Boolean)" /> for details.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerInternal.AddSettingsChangedHandler(Microsoft.VisualStudio.Settings.PropertyChangedAsyncEventHandler,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a handler for settings change events.
            </summary>
            <param name="namePattern">The full name of a setting or a prefix ending in '*'.  Case-insensitive.</param>
            <param name="useWeakReference">If true, the event handler will be held using a weak reference so that
            the handler can be GC'd without needing to call RemoveSettingsChangedHandler.</param>
            <param name="callHandlerBeforeCallingExternalHandlers">Call the provided handler before calling external handlers
            to enable any custom processing (like a 3 way merge) of the the setting value before calling the external event handlers</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerInternal.GetEvent(Microsoft.VisualStudio.Settings.SettingsEvent)">
            <summary>
            Get traced event for the settings code marker.
            </summary>
            <param name="settingsEvent">Code marker to get the event for.</param>
            <returns>The traced event for the code marker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsManagerInternal.SetValueAsync(System.String,System.Object,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="value">An object which will be serialized and persisted as the new value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.ISettingsManagerInternal.CrossProcessLockFactory">
            <summary>
            Cross process lock factory
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsService">
            <summary>
            The public API presented by the service module.  Implementers should expect a separate instance to be created
            for (at least) each client or (at most) each client request.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)">
            <summary>
            Initializes the service.  Must be called once and only once per client connection, before any of the other methods.
            </summary>
            <param name="collectionName">
            The collection of settings to target.  Each collection is isolated from the others.  Typically a specific client instance
            will target a single collection.  In VS, the collection matches the /rootSuffix parameter of the client, facilitating
            scenarios like isolation of the experimental hive for extension development.  Must be non-null; empty string is OK.
            </param>
            <param name="isRoamingEnabled">Tells the service whether to synchronize with the user's online settings.</param>
            <param name="roamingEnabledRevision">The client's stored revision number for the roaming enabled setting.  This is used to avoid overwriting a more recently updated value.</param>
            <param name="telemetrySettings">Output of ITelemetrySession.SerializeSettings from the client.</param>
            <param name="clientId">The idenitifier of the client</param>
            <param name="durableClientIdentity">The identifier of the client, i.e. a devenv instance</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called more than once.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.GetSettingAsync(System.String)">
            <summary>
            Retrieves a setting by name (case insensitive); returns null if the setting does not exist.
            </summary>
            <param name="settingName">The setting name (case insensitive)</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called before <see cref="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.PutSettingAsync(System.String,Microsoft.VisualStudio.Settings.ServiceUploadParameters)">
            <summary>
            Stores a new value for a setting.
            </summary>
            <param name="settingName">The setting name (case insensitive)</param>
            <param name="settingInfo">The attributes of the setting to store, and the client ID</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called before <see cref="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.DeleteSettingAsync(System.String,System.Guid)">
            <summary>
            Deletes a setting.
            </summary>
            <param name="settingName">The setting name (case insensitive)</param>
            <param name="clientId">The idenitifier of the client, included in the resulting change event</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called before <see cref="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.GetMultipleSettingsAsync(System.Int32)">
            <summary>
            Returns all setttings whose revision number is greater than <paramref name="modifiedAfter" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called before <see cref="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.DeleteAllSettingsAsync(System.Guid)">
            <summary>
            Delete all settings in the collection.
            </summary>
            <param name="clientId">The idenitifier of the client, included in the resulting change event</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this is called before <see cref="M:Microsoft.VisualStudio.Settings.ISettingsService.InitAsync(System.String,System.Boolean,System.Int32,System.String,System.Guid,System.String)" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ISettingsService.GetStoreIdentityAsync">
            <summary>
            Gets the unique ID for the settings store, which is randomly generated whenever the store is recreated.
            This allows clients to detect when the store has been deleted and their stored revision numbers are invalid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ISettingsSubset">
            <summary>
            A subset of settings (either a single setting or all settings matching a wildcard pattern)
            for which one can subscribe to change events.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.ISettingsSubset.SettingChangedAsync">
            <remarks>
            This event handler may be invoked on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IStoreUpdateLogger">
            <summary>
            A logger for settings store update records.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingUpdateAsync(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Logs a record of an update to a specific setting store.
            </summary>
            <param name="storeName">The name of the store being updated, e.g. "private store".</param>
            <param name="settingName">The full name of the setting, including an app name prefix like "Blend-" if the setting is not shared across apps.</param>
            <param name="settingValue">The full serialized value of the setting.</param>
            <param name="isMachineLocal">A value indicating whether the setting value content is specific to this machine.</param>
            <param name="source">The source of the update, e.g. "ISettingsManager.SetValueAsync" or "shared store update", if known; otherwise null.</param>
            <param name="onlineRevision">The Azure Devops revision number associated with this value, if known; otherwise null.</param>
            <param name="localRevision">The local shared store revision number associated with this value, if known; otherwise null.</param>
            <param name="listMergeBaseline">The content of the baseline that was used in the three-way merge which produced this list value, if any; otherwise null.</param>
            <param name="isRoamingEnabled">A value indicating whether roaming is currently enabled on the machine.</param>
            <param name="isRoamable">A value indicating whether the setting is registered for roaming across machines.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingUpdateFailureAsync(System.Exception,System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Logs a record of a failure to update a specific setting in a specific store.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingUpdateAsync(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingUpdateFailureAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Logs a record of a failure to update a specific setting in a specific store.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingUpdateAsync(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingDeletionAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Logs a record of a deletion in a specific setting store.
            </summary>
            <param name="storeName">The name of the store being updated, e.g. "private store".</param>
            <param name="settingName">The full name of the setting being deleted, including an app name prefix like "Blend-" if the setting is not shared across apps.</param>
            <param name="source">The source of the update, e.g. "ISettingsManager.SetValueAsync" or "shared store update".</param>
            <param name="isRoamingEnabled">A value indicating whether roaming is currently enabled on the machine.</param>
            <param name="isRoamable">A value indicating whether the setting is registered for roaming across machines.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingDeletionFailureAsync(System.Exception,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Logs a record of a failure to delete a specific setting from a specific store.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogSettingDeletionAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogClearSettingsAsync(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Logs a record of clearing all settings from a specific store.
            </summary>
            <param name="storeName">The name of the store being updated, e.g. "private store".</param>
            <param name="source">The source of the update, e.g. "ISettingsManager.SetValueAsync" or "shared store update".</param>
            <param name="isRoamingEnabled">A value indicating whether roaming is currently enabled on the machine.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogClearSettingsFailureAsync(System.Exception,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Logs a record of a failure to clear a specific store.
            </summary>
            <inheritdoc cref="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.LogClearSettingsAsync(System.String,System.String,System.Nullable{System.Boolean})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLogger.BeginNoisyOperation">
            <summary>
            Signals the beginning of an operation that may log a large number of updates.  The logger may choose to handle the logging differently during this
            operation, e.g. batching the updates for telemetry and posting a single event at the end.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IStoreUpdateLoggerWithAmbientContext">
            <summary>
            Adds ambient context to an <see cref="T:Microsoft.VisualStudio.Settings.IStoreUpdateLogger" />.  Ambient context is implemented via the <see cref="M:Microsoft.VisualStudio.Settings.IStoreUpdateLoggerWithAmbientContext.SetContext(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance[])" />
            method, which allows the caller to supply properties which will be set on all events emitted within the current execution context until the returned
            <see cref="T:System.IDisposable" /> is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStoreUpdateLoggerWithAmbientContext.SetContext(Microsoft.VisualStudio.Settings.StoreLogPropertyInstance[])">
            <summary>
            Sets one or more ambient property values that will be added to all store logging (unless overridden by local parameters)
            until the returned <see cref="T:System.IDisposable" /> is disposed.  These apply only to the current execution context, so other
            threads or async execution flows running concurrently, even against the same logger instance, will not be affected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IStringStorage">
            <summary>
            Stores and retrieves strings.  Used as an abstraction over the registry and unit-test mocks.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.Get(System.String)">
            <summary>
            Returns the value and machine-local flag for the named item, or null if the item doesn't exist.
            </summary>
            <param name="name">The case-insensitive name of the setting.</param>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="name" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.NamesStartingWith(System.String)">
            <summary>
            Returns the names of all settings currently stored whose names begin with the given prefix (case insensitive).
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="prefix" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="prefix" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.SetAsync(System.String,Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag,System.Action,System.Threading.CancellationToken)">
            <summary>
            Stores a value and machine-local flag under a specified name.
            </summary>
            <param name="name">The case-insensitive name of the setting.</param>
            <param name="value">Setting value.</param>
            <param name="onBeforePropertyChanged">Action to execute before raising property changed events.</param>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="name" /> or <paramref name="value" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="name" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.DeleteIfExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a stored value.
            </summary>
            <param name="name">The case-insensitive name of the setting.</param>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="name" /> is null.</exception>
            <exception cref="T:System.ArgumentException">May be thrown when <paramref name="name" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IStringStorage.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes all stored values.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Settings.IStringStorage.PropertyChangedAsync">
            <summary>
            Raised when a setting value is created, changes, or is deleted.
            </summary>
            <remarks>
            This event handler may be invoked on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.IUploaderDownloader">
            <summary>
            Handles uploads and downloads, including revision tracking.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.UpdateSharedStoreFromPrivateStoreAsync(System.String,Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
            <summary>
            Upload the specified setting from the private store to the shared store.  If the local setting is missing, delete it from the shared store.
            If the upload succeeds, the local revision number is updated.  If the upload fails, a download from the shared store is triggered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.UploadNotYetUploadedSettingsAsync(System.Predicate{System.String},Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
            <summary>
            Uploads all settings in the private store for which <paramref name="isUploadable" /> returns true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.GetHighestSyncedRevision">
            <summary>
            Returns the highest revision number in the private store.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.UpdatePrivateStoreWithDownloadedValueAsync(System.String,Microsoft.VisualStudio.Settings.VersionedString,System.Boolean)">
            <summary>
            Given a serialized value downloaded from the shared store, stores it (along with the new revision number) in the private store.  Lists are
            merged if necessary.  If <paramref name="value" /> is null, the setting will be deleted from the private store.
            </summary>
            <param name="name">The name of the setting</param>
            <param name="value">The serialized value</param>
            <param name="isFromNotification">Indicates whether this is being called as a result of a setting change notification from the shared store</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.PrepareForInitialSyncWithSharedStore(Microsoft.VisualStudio.Settings.IAsyncStringStorage)">
            <summary>
            Performs preparation steps before the initial sync, if any are needed.
            </summary>
            <returns>A description of the prep work done, or null if none was performed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.IUploaderDownloader.ForgetRevisionNumbersAsync">
            <summary>
            Deletes all locally stored revision numbers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.JsonStringDeserializationResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.Settings.IJsonStringSerializer.Deserialize(System.String,System.Int32)" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.JsonStringDeserializationResult.NextIndex">
            <summary>
            The index (in the Json) of the character following the deserialized string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.JsonStrings">
            <summary>
            This will also be referenced from the settings service module.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.JsonStringSerializer.Parse(System.String,System.Int32,System.Text.StringBuilder)">
            <summary>Parse a string encoded as JSON</summary>
            <param name="json">The JSON, within which the string we want to parse is embedded</param>
            <param name="i">The index of the character just after the starting quote</param>
            <param name="builder">The buffer where the result will be stored</param>
            <returns>The index of the closing quote character</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.LazyDictionary`2">
            <summary>
            Presents an IDictionary facade over a dictionary with lazy values, so that retrieving a value
            via the non-lazy facade automatically instantiates it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.LimitedJsonSerializer.NullOrQuotedStringLength(System.String)">
            <summary>
            Returns the string length + 2 (for quotes), or the length of the null token, as a quick approximation of the serialized
            Json length.  The actual serialized length will be greater if there are characters that need escaping.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.LimitedJsonSerializer.FindDelimitedSpan(System.String,System.Char,System.Char,System.Int32@,System.Int32@)">
            <summary>
            Returns a pair of indices indicating the position of the delimiters.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ListMerger">
            <summary>
            Handles merging operations for setting collections.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.ListMerger.ListChanges`2.Deletions">
            <summary>
            The keys of items that were deleted.  Order doesn't matter here.  Deletions are always applied before additions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.ListMerger.ListChanges`2.Additions">
            <summary>
            Key/value pairs that were added, in chronological order (earliest at the beginning, latest at the end).  Additions
            are always applied after deletions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ListMerger.ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
            <summary>
            Given a baseline and two current lists, computes the merged result.  The differences between the baseline and the current
            lists are analyzed in terms of the following operations:
              * Add a new item to the front (index 0)
              * Remove an item from anywhere
            This method derives an ordered list of operations that would transform the baseline into each of the current lists, combines
            them, and applies them to the baseline to generate the result.  The order of operations in "first" and "second" is maintained
            within the list but not between lists; for example, if the baseline is {0}, first is {1,0} and second is {2,0}, the result
            may be {1,2,0} or {2,1,0}.  Both are equally valid.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="first" />, <paramref name="second" />, or <paramref name="baseline" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ListMerger.MergeChanges``2(Microsoft.VisualStudio.Settings.ListMerger.ListChanges{``0,``1},Microsoft.VisualStudio.Settings.ListMerger.ListChanges{``0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Merge two sets of changes into one, eliminating duplicates based on key values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ListMerger.GenerateTransformation``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Compares "original" and "target" lists to generate a list of changes that would transform the former into the latter.
            The only operations supported are "add to front" and "delete (from anywhere)".  Examples:
              {x,y,z} -&gt; {a,b,c}: delete x, delete y, delete z, add c, add b, add a
              {x,y,z} -&gt; {a,x,y}: delete z, add a
              {x,y,z} -&gt; {x,y,a}: delete z, delete y, delete x, add a, add y, add x
              {x,y,z} -&gt; {x,a,y,z}: delete x, add a, add x
              {x,y,z} -&gt; {y,z,x}: delete z, delete y, add z, add y
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.ListMerger.Microsoft#VisualStudio#Settings#IListMerger#ThreeWayMerge``2(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IReadOnlyList{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger)">
            <summary>
            Same as the static ThreeWayMerge method; provided to facilitate unit testing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.NamedVersionedString">
            <summary>
            A setting value serialized as a string along with an associated name, version, and machine-local flag.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.NameTranslatingStoreUpdateLogger">
            <summary>
            IStoreUpdateLogger decorator that translates setting names from their "private store" representation
            to their "shared store" representation so they will be consistent with logging from the settings
            service module.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingNameTooLongException">
            <summary>
            This exception is thrown from <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" /> when attempting to create a setting whose name
            exceeds the length limit imposed by the roaming settings server (currently 128 characters).
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsEvent">
            <summary>
            Settings event that may be fired by the settings service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.None">
            <summary>
            No event. The default value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.SyncWithServerAndClientsEnded">
            <summary>
            Event that is fired by the roaming settings service when it ends sync with the server and the clients.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.ProcessSignInStateChangeEnded">
            <summary>
            Event that is fired by the roaming settings service when it ends processing sign in state change.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.SyncWithSharedStoreEnded">
            <summary>
            Event that is fired with sync with the shared store ends.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.UploadsComplete">
            <summary>
            Event that is fired when the uploads are complete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsEvent.AllPendingUploadsCompletedOrFailed">
            <summary>
            Event that is fired when the settings are uploaded online.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsEventArgs">
            <summary>
            Event args for a settings event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsEventArgs.#ctor(Microsoft.VisualStudio.Settings.SettingsEvent)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Settings.SettingsEventArgs" /> class with the provided <paramref name="settingsEvent" />.
            </summary>
            <param name="settingsEvent">Settings event.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.SettingsEventArgs.Event">
            <summary>
            Gets or sets the settings event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs" /> describing a change to an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Adding(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" /> describing the addition of a single item to a list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Removing(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" /> describing the removal of a single item from a list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Removing(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" /> describing the removal of multiple items from a list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Replacing(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" /> describing the replacement of a single item in a list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.Clearing(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs" /> describing the removal of all items from a list.
            </summary>
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsListOperation">
            <summary>
            An operation performed on an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.AddItem">
            <summary>
            An item as been added to the list.  The added item is specified by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemAdded" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.RemoveItem">
            <summary>
            An item has been removed from the list.  The removed item is specified by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.RemoveMultipleItems">
            <summary>
            Multiple items have been removed from the list.  The removed items are specified by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.ReplaceItem">
            <summary>
            An item has been replaced by a different item.  The old item is specifed by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved" /> and its replacement by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemAdded" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsListOperation.Clear">
            <summary>
            All items have been removed from the list.  The removed items are specified by
            <see cref="P:Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs.ItemsRemoved" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsListSynchronizer.OnStoreChangedDeferredAsync(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invoke the store change handler at some future point but do not wait on it.  Returns a completed no-op task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.SetSharedSettingsForPrivateStoreAsync">
            <remarks>
            This should ONLY be called via <see cref="F:Microsoft.VisualStudio.Settings.SettingsManager._storeUpdatedActionBlock" />, to ensure that execution
            of this method doesn't overlap with itself.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.OnPropertyChangedAsync(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when something changes in the private or shared store, this method sends change events
            to all the applicable listeners.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.TryGetValue``1(System.String,``0@)">
            <remarks>
            This is a perf hot path.  Because of this, we log success telemetry (and non-exception failure telemetry) asynchronously.
            Exception telemetry is synchronous in case the exception (which is re-thrown) crashes the process (which would prevent
            asynchronous telemetry from being logged).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetEvent(Microsoft.VisualStudio.Settings.SettingsEvent)">
            <summary>
            Get traced event for the settings code marker.
            </summary>
            <param name="settingsEvent">Code marker to get the event for.</param>
            <returns>The traced event for the code marker</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsManagerFactory">
            <summary>
            A factory class that constructs an <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" />.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManagerFactory.CreateInstance(Microsoft.VisualStudio.Settings.ISettingsManagerHost)">
            <summary>
            Provides a settings manager for this application.
            </summary>
            <param name="host">The host of the settings manager. Must implement <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManagerHost3" />.</param>
            <exception>ArgumentNullException if <paramref name="host" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingTooLargeException">
            <summary>
            This exception is thrown (from <see cref="T:Microsoft.VisualStudio.Settings.ISettingsManager" />, <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" />, etc.) when a setting value is given whose
            serialized representation exceeds the size limit on the roaming settings server (currently 1MB).
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StoreLogPropertyDefinition">
            <summary>
            A non-generic way to refer to a <see cref="T:Microsoft.VisualStudio.Settings.StoreLogPropertyDefinition`1" />, and also the place where the
            well-known properties are defined.
            </summary>
            <remarks>
            All well-known properties should have reference/nullable type parameters so the fallback logic for resolving ambient/
            local property values will work correctly.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Settings.StoreLogPropertyDefinition.CanonicalRepresentation">
            <summary>
            A setting may be persisted in different formats as it flows through the pipeline.  This is a representation of the
            setting value that will remain constant regardless of the underlying serialization format.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StoreLogPropertyDefinition`1">
            <summary>
            A store log property without a value assigned.
            </summary>
            <typeparam name="T">The property type</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.NestingStringStoreLogPropertyDefinition">
            <summary>
            A store log property definition of type <see cref="T:System.String" /> that supports "nesting".  See <see cref="T:Microsoft.VisualStudio.Settings.NestingStringStoreLogPropertyInstance" />
            for details.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StoreLogPropertyInstance">
            <summary>
            A non-generic way to refer to a <see cref="T:Microsoft.VisualStudio.Settings.StoreLogPropertyInstance`1" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StoreLogPropertyInstance`1">
            <summary>
            A store log property with a specific value.
            </summary>
            <typeparam name="T">The property type</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.NestingStringStoreLogPropertyInstance">
            <summary>
            A store log property of type <see cref="T:System.String" /> that supports "nesting" -- e.g. if ambient property value "foo"
            is already set and a new ambient property value "bar" is set, the result will be "foo : bar".
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.StringWithMachineLocalFlag">
            <summary>
            A setting value serialized as a string along with a flag indicating whether the value
            contains machine-local content.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SuppressingStoreLogPropertyInstance`1">
            <summary>
            An ambient store logging property instance that doesn't provide a value of its own but
            suppresses any existing ambient value for the property.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.TelemetryAndTraceLogger">
            <summary>
            Sends log output to both the telemetry log and trace logs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.DummyLogger">
            <summary>
            A logger class that implements ITelemetryAndTraceLogger but does nothing
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger">
            <summary>
            Telemetry logging for the settings manager, provided by the host application.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogFailure(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext)">
            <summary>
            Logs information about an operation failure.
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="result" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogFailure(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext,System.Exception)">
            <summary>
            Logs information about an operation failure associated with a specific exception.
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="result" /> or <paramref name="ex" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.ISettingsLogger.LogSuccess(Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext)">
            <summary>
            Logs information about a successful operation.
            </summary>
            <exception cref="T:System.ArgumentNullException">May be thrown when <paramref name="result" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.LogHelpers.FormatSettingValue(System.String)">
            <summary>
            Formats a setting value for log output, e.g. truncating it if very long to avoid bloating the log files too much.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingAction">
            <summary>
            A setting-related action that can be logged via telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext">
            <summary>
            The context of a setting-related action for logging via telemetry.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.SettingLogContext.#ctor(Microsoft.VisualStudio.Settings.Telemetry.SettingScenario,Microsoft.VisualStudio.Settings.Telemetry.SettingAction,Microsoft.VisualStudio.Settings.Telemetry.SettingType,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <exception>No exceptions may be thrown.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingScenario">
            <summary>
            A high-level scenario type for a setting-related action logged via telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.Telemetry.SettingType">
            <summary>
            The scope of the setting involved in a setting-related action logged via telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.WindowsTelemetry.GetWindowsTelemetryLevel">
            <summary>
            Returns the Windows telemetry level.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.Telemetry.WindowsTelemetry.GetValueAndDispose(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Small extension to ensure each RegistryKey is closed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.UploaderDownloader.UpdatePrivateStoreWithDownloadedValueAsync(System.String,Microsoft.VisualStudio.Settings.VersionedString,System.Boolean)">
            <param name="isFromNotification">Indicates whether this is being called as a result of a setting change notification from the shared store.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.UploaderDownloaderParameters">
            <summary>
            Immutable parameters collection for IUploaderDownloader creation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.UploaderDownloaderParameters.#ctor(Microsoft.VisualStudio.Settings.ISettingsManager,Microsoft.VisualStudio.Settings.IStringStorage,Microsoft.VisualStudio.Settings.Internal.Serializer,System.Func{System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}}},Microsoft.VisualStudio.Settings.SerializeAndStoreValueAsyncDelegate,Microsoft.VisualStudio.Settings.AsyncLocalBool,System.Action{System.Threading.Tasks.Task},System.Func{System.ComponentModel.PropertyChangedEventArgs,System.Threading.Tasks.Task},Microsoft.VisualStudio.Settings.ICrossProcessLockFactory,Microsoft.VisualStudio.Settings.IStoreUpdateLoggerWithAmbientContext)">
            <summary>
            Constructs a new <see cref="T:Microsoft.VisualStudio.Settings.UploaderDownloaderParameters" /> instance.
            </summary>
            <param name="settingsManager">The settings manager</param>
            <param name="privateStore">The local backing store</param>
            <param name="serializer">A serializer for converting arbitrary types to/from string representation</param>
            <param name="tryDeserializeAsList">Deserializes the given string as a list; returns null if deserialization fails</param>
            <param name="serializeAndStoreLocalValueAsync">Serializes a value and stores it in the local backing store</param>
            <param name="privateStoreChangesShouldTriggerUpload">Controls whether local store changes in the current async flow should trigger an upload</param>
            <param name="registerTaskWithoutAwaiting">Registers a "fire and forget" task but does not wait on it</param>
            <param name="fireLocalSettingChangeEventAsync">Fires an event to listeners as if the private store had signaled a setting change</param>
            <param name="crossProcessLockFactory">Lock factory to acquire cross process locks</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.VersionedString">
            <summary>
            A setting value serialized as a string along with an associated version and machine-local flag.
            </summary>
            <remarks>
            Members of this class may be called on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2.#ctor(Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionIdentificationToken,System.Diagnostics.TraceSource,System.String,System.IO.SearchOption,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2" /> class.
            </summary>
            <param name="identifier">Extension identifier.</param>
            <param name="logger">A trace source to log with.</param>
            <param name="fileSearchPattern">The search pattern for the files to locate.</param>
            <param name="searchOption">Configures options for how the files are searched for.</param>
            <param name="joinableTaskFactory">Optional joinable task factory instance to use for async operations.</param>
            <param name="disposalToken">A token that should canceled when the process is trying to shutdown.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2.Identifier">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2.GetValueAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2.GetKeysAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataReader`2.ProcessMetadataFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Processes and returns a dictionary of Key/Value pairs.
            </summary>
            <param name="file">The file to process.</param>
            <param name="cancellationToken">Token to signal cancellation.</param>
            <returns>A dicitonary of keys and values to be lazily created.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServiceFactory`5">
            <summary>
            Lazily creates one instance of a store to be shared among different instances of a service.
            </summary>
            <typeparam name="TService">The service to be created by this fatory.</typeparam>
            <typeparam name="TStore">The store required to create the service.</typeparam>
            <typeparam name="TReader">The reader required to create the service.</typeparam>
            <typeparam name="TKey">The key type used in the store.</typeparam>
            <typeparam name="TValue">The value type used in the store.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServiceFactory`5.CreateServiceAsync(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of a serivce using a shared instance of a store.
            </summary>
            <returns>An instance of the service.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataStore`3.#ctor(System.Diagnostics.TraceSource,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataStore`3" /> class that can be shared across brokered service instances.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.DisposableHolder`1">
             <summary>
             Hold a disposable so that it is possible to automatically dispose on error and also possible to hold onto the disposable after work is completed.
             using(var holder = disposable.Hold())
             {
                //use disposable
            
                // remove the value from the holder so that we can continue to use the disposable.
                disposable=holder.TakeValue();
             }.
             </summary>
             <typeparam name="TDisposable">A disposable class.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.DisposableHolder`1.GetValue">
            <summary>
            Access the disposable content while keeping it inside the holder and therefore subject to the current `using` scope.
            </summary>
            <returns>Held value.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.DisposableHolder`1.TakeValue">
            <summary>
            Release the disposable content from the holder so that a `using` on the current holder doesn't dispose it when going out of scope.
            </summary>
            <returns>Held value.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.DisposableHolder`1.Move">
            <summary>
            Move the disposable content to a new holder so that it can be assigned to a different `using` scope.
            </summary>
            <returns>New holder with the value of this holder.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.DuplicateStringResourceFoundError">
            <summary>
              Looks up a localized string similar to Error duplicate resource '{0}' found. Skipping adding the resource to the dictionary..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ExtensionMetadataParseError">
            <summary>
              Looks up a localized string similar to Parsing file '{0}' for extension '{1}' failed..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ExtensionWatcher_ExtensionsChanged">
            <summary>
              Looks up a localized string similar to Extensions have changed:\n\n{0}\n\nScheduling an extensions changed notification..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ExtensionWatcher_TriggerNotification">
            <summary>
              Looks up a localized string similar to Triggering extensions changed notification with extensions:\n\n{0}.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.MetadataStore_ExtensionProvidesKeys">
            <summary>
              Looks up a localized string similar to Extension installed to '{0}' provides metadata for the following keys: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ResourceDictionary_DuplicateKeyRemoved">
            <summary>
              Looks up a localized string similar to Extension providing a duplicate resource was uninstalled. Adding resource '{0}' from extension '{1}' to the '{2}' dictionary..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceResources.ResourceIdNotFound">
            <summary>
              Looks up a localized string similar to The {0} '{1}' was not found..
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataReader.MinLazyLoadFileSize">
            <summary>
            The minimum size of a file for it be worth while to lazily load it's sections and require the file to be opened a second time instead of storing it in memory.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService">
            <summary>
            Client that communicates with the ServiceHub ServiceModule.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService.observers">
            <summary>
            A dictionary where the keys are the observers and the values are the lists of sections that they want to be notified of changes in.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService.#ctor(Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionMetadataStore,Microsoft.VisualStudio.Threading.JoinableTaskFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService" /> class. Is owned by a single caller.
            </summary>
            <param name="store">Metadata store shared instance.</param>
            <param name="joinableTaskFactory">A joinable task factory.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService.SubscribeForMetadataEventsAsync(System.Collections.Generic.IEnumerable{System.String},System.IObserver{Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataService.NotifyObserverAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionIdentificationToken},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionIdentificationToken},System.Threading.CancellationToken)">
            <remarks>
            Passing in null for addedExtensions indicates that the full set of available metadata should be sent.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataServiceFactory">
            <summary>
            This service provider is used to create instances of IExtensionMetadataService only and does not respond to
            any other queries.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionMetadataStore">
            <summary>
            Manages JSON metadata stored in extensions.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo">
            <summary>
            Container for extensions root directory information that can be sent to metadata services.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo" />.
            </summary>
            <param name="rootDirectories">Extension root directories monitor.</param>
            <param name="excludedDirectories">Any subdirectories to be excluded from monitoring.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo.RootDirectories">
            <summary>
            Gets the list of extension root directories monitor.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo.ExcludedDirectories">
            <summary>
            Gets the list of subdirectories to be excluded from the monitoring list.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher">
            <summary>
            This class will monitor the extension directories and fire the <see cref="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.ExtensionsChanged" /> event when an extension is installed or uninstalled.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.IsValidExtensionDirectory(System.String)">
            <remarks>
            A directory is a valid extension directory if:
               1. It exists.
               2. It is not prefixed with a ".".
               3. It contains a ".vsextension" directory.
               4. It is not pending delete.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.GetDirectories(System.String,System.Int32,System.Threading.CancellationToken)">
            <remarks>
            This method does not return any directories that start with a "." or any excluded directories and their children.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.IsUninstalled(System.String)">
            <summary>
            An extension has been uninstalled when it's install directory no longer exists OR it is pending delete.
            </summary>
            <param name="path">The path of the extension's install directory.</param>
            <returns>True if the extension has been uninstalled, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.IsPendingDelete(System.String)">
            <summary>
            An extension is pending uninstall, it has a file at it's root called <see cref="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionWatcher.PendingDeleteFileName" />.
            </summary>
            <param name="path">The path of the extension's install directory.</param>
            <returns>True if the extension is pending uninstall, false otherwise.</returns>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.IDynamicMetadataStore`1.StoreChanged">
            <summary>
            An event to be fired whenever the store changes.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataReader`2">
            <summary>
            Interface to read extension metadata from an installed extension.
            </summary>
            <typeparam name="TKey">The type fo the key to be used for the reader.</typeparam>
            <typeparam name="TValue">The type of the value of the metadta for the reader.</typeparam>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataReader`2.Identifier">
            <summary>
            Gets the identifier for this reader. This value doesn't have to be unique across readers.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataReader`2.GetKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Enumerates the list of keys available through this reader.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>List of keys that this reader exposes.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataReader`2.GetValueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the data for a specified key.
            </summary>
            <param name="key">Key name.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>JToken object representing the metadata.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataStore.OnMetadataChangedAsync(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsChangedEventArgs,System.Threading.CancellationToken)">
            <summary>
            Updates the store's internal state whenever extensions are added or removed.
            </summary>
            <param name="args">Contains the set of changed extensions.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>The MetadataStoreChangedEventArgs resulting from the change of extensions.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataStore.FireStoreChangedEventAsync(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Fires the StoreChangedEvent on the MetadataStore.
            </summary>
            <param name="eventArgs">The arguments to be passed to the StoreChanged event.
            This should be the object returned from calling of <see cref="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IMetadataStore.OnMetadataChangedAsync(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsChangedEventArgs,System.Threading.CancellationToken)" />.</param>
            <param name="force">If true, the event should be fired regardless of any optimizations.</param>
            <param name="cancellationToken">A token to signal cancellation.</param>
            <returns>A task to track the async work.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory.CreateExtensionMetadataServiceAsync(System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of extension metadata service.
            </summary>
            <param name="logger">TraceSource instance to utilize for logging.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory.CreateExtensionResourceDictionaryServiceAsync(System.Diagnostics.TraceSource,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of extension resource dictionary service.
            </summary>
            <param name="logger">TraceSource instance to utilize for logging.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory.CreateAsync(System.IObservable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionsDirectoryInfo},Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem,System.Diagnostics.TraceSource,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of metadata services factory.
            </summary>
            <param name="extensionLocations">Observable instance providing extension paths to monitor.</param>
            <param name="directoryChangeListener"><see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> instance to utilize for directory watching.</param>
            <param name="logger">TraceSource instance to utilize for logging.</param>
            <param name="joinableTaskFactory">JoinableTaskFactory instance to utilize.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MetadataServicesFactory.CreateTraceSourceAsync``1(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of TraceSource for a given service moniker and contract type.
            </summary>
            <param name="serviceBroker">Service broker instance to utilize.</param>
            <param name="serviceMoniker">Service moniker this trace source is intended for.</param>
            <param name="options">Optional trace source options.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of TraceSource instance that can be passed to factory methods.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionary">
            <summary>
            NOTE: This class is not thread-safe.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionary.resourceDictionary">
            <summary>
            A dictionary where the key is ExtensionResourceDictionaryItem.Key.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionary.removedDuplicateKeys">
            <summary>
            A dictionary of keys that have multiple extensions providing them. The values are a dictionary where the key is the extension identifier and the value is the value of the key for that extension.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionaryService.#ctor(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionaryStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionaryService" /> class that is owned by a single caller.
            </summary>
            <param name="extensionResourceDictionaryStore">Metadata store shared instance.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionResourceDictionaryService.GetStringResourceAsync(System.Globalization.CultureInfo,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1">
            <summary>
            A base class to encapsulate extension part changes for a specific contract
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.#ctor(Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache,System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1" /> class.
            </summary>
            <param name="proxyManager">Parent proxy manager to utilize for querying proxies.</param>
            <param name="logger">Optional logger instance to utilize.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#ContractType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#ActivationTask">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Logger">
            <summary>
            Gets the logger instance to utilize.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Activate">
            <summary>
            Activates the collection by completing IExtensionPartListener.ActivationTask.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.IsPartMetadataApplicable(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration)">
            <summary>
            Checks if part metadata is applicable for this collection, base implementation will always return true.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#IsPartApplicable(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#OnExtensionPartsAdded(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#OnExtensionPartsRemoved(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Microsoft#Internal#VisualStudio#Extensibility#Framework#IExtensionPartListener#OnServiceAvailabilityChanged(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollectionBase`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">true if managed resources should be disposed.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1">
            <summary>
            A class to encapsulate extension part changes for a specific contract.
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1.#ctor(Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata},System.Boolean},System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1" /> class.
            </summary>
            <param name="proxyManager">Parent proxy manager to utilize for querying proxies.</param>
            <param name="filterCallback">Optional filter callback method.</param>
            <param name="logger">Optional logger instance to utilize.</param>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1.PartsAdded">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1.PartsRemoved">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1.GetCurrentSet">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">true if managed resources should be disposed.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartLazyCollection`1">
            <summary>
            A class to encapsulate extension part changes for a specific contract and allows parts to be created lazily.
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartLazyCollection`1.#ctor(Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache,System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartCollection`1" /> class.
            </summary>
            <param name="proxyManager">Parent proxy manager to utilize for querying proxies.</param>
            <param name="logger">Optional logger instance to utilize.</param>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartLazyCollection`1.PartsAdded">
            <inheritdoc />
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartLazyCollection`1.PartsRemoved">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartLazyCollection`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">true if managed resources should be disposed.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager">
            <summary>
            A manager to get components out of Gladstone extensions and managing their lifecycle.
            </summary>
            <remarks>
            This implementation is meant to be used by IDE hosts, components should query the IDE per the supported
            extensibility mechanism and not create their own instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.#ctor(Microsoft.ServiceHub.Framework.IServiceBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager" /> class.
            </summary>
            <param name="serviceBroker">Service broker instance to utilize.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.GetCollectionAsync``1(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata},System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.GetCollectionAsync``1(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.GetLazyCollectionAsync``1(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.Microsoft#Internal#VisualStudio#Extensibility#Framework#IProxyCache#GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener,System.Threading.CancellationToken)">
            <summary>
            Gets a proxy for an extension part, this could be a proxy that was already created that has multiple contracts.
            </summary>
            <typeparam name="T">Proxy interface type (could be the contract type or an aggregated interface).</typeparam>
            <param name="serviceMoniker">Service moniker to query for.</param>
            <param name="listener">Listener instance that made the request, this will be used to notify the listener when service availability changes.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of T or null if proxy could not be created or does not exist.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.Microsoft#Internal#VisualStudio#Extensibility#Framework#IProxyCache#RemoveListener(Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener)">
            <summary>
            Removes a previously registered listener, this could be raised when the listener is disposed externally.
            </summary>
            <param name="listener">Listener to be removed.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartManager.GetServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Gets the service descriptor for a given service moniker.
            </summary>
            <param name="serviceMoniker">Service moniker to generate the descriptor for.</param>
            <returns>an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor" />.</returns>
            <remarks>Any custom implementation returned here must inherit from <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor" /> and call its base types
            to allow for contract interface aggregation to work correctly.</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata">
            <summary>
            A record for an extension part.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata" /> class.
            </summary>
            <param name="name">Name of the attribute type.</param>
            <param name="values">Key value pair for named arguments.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata.Name">
            <summary>
            Gets the name of the attribute that contributes to metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata.Values">
            <summary>
            Gets the dictionary of named arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadataObserver.listeners">
            <summary>
            Set of listeners that were registered and buffered registrations for them if there is any.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1">
            <summary>
            An extension part record combining metadata and an async method to get the part.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1.Metadata">
            <summary>
            Gets the metadata for the extension part.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1.Extension">
            <summary>
            Gets the extension identifier for the part if there is one available.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1.UniqueIdentifier">
            <summary>
            Gets the unique part identifier. This can be used as a persistent opaque value across sessions.
            </summary>
            <remarks>The value will remaining consistent as long as part is backed by the same service and contract.</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1.GetPartAsync">
            <summary>
            Gets the part instance.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown when part is no longer valid.</exception>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord`1.Invalidate">
            <summary>
            Invalidates a record so that part factory can't be executed anymore and an instance will only be returned
            if it was already created.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration">
            <summary>
            A record for an extension part.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.#ctor(System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Collections.Generic.IReadOnlyList{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration" /> class.
            </summary>
            <param name="contract">Contract type, usually the full type name of the RPC contract interface.</param>
            <param name="serviceMoniker">Service moniker that should be used to retrieve this part.</param>
            <param name="metadata">Metadata collection assigned to the extension part.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.Contract">
            <summary>
            Gets the contract type, usually the full type name of the RPC contract interface.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.ServiceMoniker">
            <summary>
            Gets the service moniker that should be used to retrieve this part.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.OwnerIdentifier">
            <summary>
            Gets or sets the key value to identify this registration.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.Metadata">
            <summary>
            Gets the optional metadata assigned to the extension part.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration.GetExtensionPartDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Int32)">
            <summary>
            Gets an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> that has the correct properties set.
            </summary>
            <param name="serviceMoniker">Service moniker to return the descriptor for.</param>
            <param name="version">Version of the descriptor, only supported value is 1 for now.</param>
            <returns>an instance of <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" />.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor">
            <summary>
            A service descriptor for extension parts that is utilized by <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor" />.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor" /> class.
            </summary>
            <param name="serviceMoniker">Service monikter this descriptor is intended for.</param>
            <param name="formatter">Message formatter to utilize.</param>
            <param name="delimiter">Message delimiter to utilize.</param>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor" /> class.
            </summary>
            <param name="descriptor">Descriptor to copy from.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartServiceJsonRpcDescriptor.Clone">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartCollection`1">
            <summary>
            An interface for being notified of collection changes on extension parts implementing a certain contract.
            </summary>
            <typeparam name="T">Contract type that extension parts would implement.</typeparam>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartCollection`1.PartsAdded">
            <summary>
            An event that is raised when new parts are added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartCollection`1.PartsRemoved">
            <summary>
            An event that is raised when parts are removed from the collection due to service availability changes.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartCollection`1.Activate">
            <summary>
            Starts the monitoring of the collection, this method should be called once the event handlers are registered.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartCollection`1.GetCurrentSet">
            <summary>
            Returns an immutable collection of current set of parts available.
            </summary>
            <returns>an immutable collection of objects that implement contract type.</returns>
            <remarks>This collection is only meant for short term use and should not be stored across invocations.</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartsChangedEventArgs`1">
            <summary>
            Event arguments for extension parts added or removed events.
            </summary>
            <typeparam name="T">Type of the contract that is being monitored.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartsChangedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartsChangedEventArgs`1" /> class.
            </summary>
            <param name="parts">Extension parts that are listed in this event.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartsChangedEventArgs`1.Parts">
            <summary>
            Gets the parts that are listed in this event (could be added or removed parts).
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartLazyCollection`1">
            <summary>
            An interface for being notified of collection changes on extension parts implementing a certain contract.
            </summary>
            <typeparam name="T">Contract type that extension parts would implement.</typeparam>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartLazyCollection`1.PartsAdded">
            <summary>
            An event that is raised when new parts are added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartLazyCollection`1.PartsRemoved">
            <summary>
            An event that is raised when parts are removed from the collection due to service availability changes.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartLazyCollection`1.Activate">
            <summary>
            Starts the monitoring of the collection, this method should be called once the event handlers are registered.
            </summary>
            <remarks>
            The first invocation of PartsAdded after this method will contain all the currently available parts and will
            be delayed until initial discovery of parts is completed. This initial discovery may happen from a cache generated
            during an earlier session of Visual Studio.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.LazyExtensionPartsChangedEventArgs`1">
            <summary>
            Event arguments for extension parts added or removed events.
            </summary>
            <typeparam name="T">Type of the contract that is being monitored.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.LazyExtensionPartsChangedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRecord{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.LazyExtensionPartsChangedEventArgs`1" /> class.
            </summary>
            <param name="parts">Extension parts that are listed in this event.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.LazyExtensionPartsChangedEventArgs`1.Parts">
            <summary>
            Gets the parts that are listed in this event (could be added or removed parts).
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener">
            <summary>
            An internaly interface for a component that listens for extension part changes.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.ContractType">
            <summary>
            Gets the contract type that this instance is intended for.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.ActivationTask">
            <summary>
            Gets a task that is completed when the listener is activated and parts can be forwarded to it.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.IsPartApplicable(Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration)">
            <summary>
            Returns true if an extension part is applicable for this listener based on its metadata.
            </summary>
            <param name="part">Extension part metadata to filter against.</param>
            <returns>true if part is applicable and shoudl be included in the collection, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.OnExtensionPartsAdded(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration},System.Boolean)">
            <summary>
            This method is called when new extension parts should be added to the collection. All parts are guarenteed to be for the contract type specified on the interface.
            </summary>
            <param name="parts">Extension parts to be added.</param>
            <param name="force">Set to true if notification should be sent for an empty list as well.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.OnExtensionPartsRemoved(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartRegistration})">
            <summary>
            This method is called when new extension parts should be added to the collection.
            </summary>
            <param name="parts">Extension parts to be removed.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener.OnServiceAvailabilityChanged(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Called when service availability is changed for the provided service moniker, which should prompt for a requery of the proxy.
            </summary>
            <param name="serviceMoniker">Service moniker that was impacted.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartManager">
            <summary>
            An interface for components to retreieve extension parts that implement a contract by brokered services.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartManager.GetCollectionAsync``1(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.Extensibility.Framework.ExtensionPartMetadata},System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a dynamic collection of parts that implement a certain contract in new extensibility framework.
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
            <param name="filterCallback">Filtering condition based on metadata in extension.json.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an enumeration of proxies that implement contract interface.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartManager.GetCollectionAsync``1(System.Threading.CancellationToken)">
            <summary>
            Gets a dynamic collection of parts that implement a certain contract in new extensibility framework.
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an enumeration of proxies that implement contract interface.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartManager.GetLazyCollectionAsync``1(System.Threading.CancellationToken)">
            <summary>
            Gets a dynamic collection of part metadata and a lazy constructor that implement a certain contract in new extensibility framework.
            </summary>
            <typeparam name="TContract">RPC contract interface type.</typeparam>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an enumeration of proxies that implement contract interface.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache">
            <summary>
            An internal interface for a listener to get a proxy from a central cache manager.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache.GetProxyAsync``1(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener,System.Threading.CancellationToken)">
            <summary>
            Gets a proxy for an extension part, this could be a proxy that was already created that has multiple contracts.
            </summary>
            <typeparam name="T">Proxy interface type (could be the contract type or an aggregated interface).</typeparam>
            <param name="serviceMoniker">Service moniker to query for.</param>
            <param name="listener">Listener instance that made the request, this will be used to notify the listener when service availability changes.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>an instance of T or null if proxy could not be created or does not exist.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.IProxyCache.RemoveListener(Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartListener)">
            <summary>
            Removes a previously registered listener, this could be raised when the listener is disposed externally.
            </summary>
            <param name="listener">Listener to be removed.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.SExtensionPartManager">
            <summary>
            A service contract interface to retrieve an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.IExtensionPartManager" /> through service provider.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext">
            <summary>
            Implements support for tracking component versions within a single context (could be a process, extension boundary).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext.TryRegisterComponent(System.Guid,System.String)">
            <summary>
            Registers a component identifier to be owned by this context, requests for component version
            increments can only be done for registered identifiers.
            </summary>
            <param name="componentIdentifier">Component identifier.</param>
            <param name="displayName">Component display name for diagnostics.</param>
            <returns>true if registration was successful, false if component was already registered.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext.GetCurrent">
            <summary>
            Gets the header that represents the current state of the context including any pending updated state.
            </summary>
            <returns>an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" /> that represents the current state.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext.TryIncrementVersion(System.Guid)">
            <summary>
            Increments the version of the specified component.
            </summary>
            <param name="componentIdentifier">Component identifier to update.</param>
            <returns>true if successful, false if component was not registered or a conflict occured.</returns>
            <remarks>While a component version can be incremented from different threads, the version change will be reflected immediately
            on all subsequent calls.</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext.GetCurrentWithUpdates(Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader)">
            <summary>
            Gets an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" /> that represents the state change from previous instance to current instance.
            </summary>
            <param name="previousHeader">Previous header to calculate delta from.</param>
            <returns>an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" /> that represents the new state and any pending message updates.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionContext.ExecuteRequestAsync``1(Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader,System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Executes the provided body of work in the correct context order based on the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" /> passed in.
            </summary>
            <typeparam name="T">Type that the async work to be executed returns.</typeparam>
            <param name="header">Header that describes the version requirements.</param>
            <param name="func">Asynchronous work to be executed.</param>
            <returns>a Task that represents the completion of the work passed in.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader">
            <summary>
            A serializable header for Json-RPC messages that describes version requests.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader.TopLevelPropertyName">
            <summary>
            Gets the suggested Json-Rpc top level property name for storing version header.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader.Empty">
            <summary>
            Gets the instance of empty version header.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" /> class.
            </summary>
            <param name="requests">List of message version requirements.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader.Requests">
            <summary>
            Gets the list of message version requests for a message to be processed in order.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest">
            <summary>
            Describes a version request for message context in a <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionHeader" />.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.#ctor(System.Guid,System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest" /> class.
            </summary>
            <param name="id">The short form context identifier.</param>
            <param name="requiredVersion">Required version to process the message.</param>
            <param name="updatedVersion">Optional new version to update context once message is processed.</param>
            <param name="displayName">Optional display name for the component, can be passed in initial requests for diagnostics.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.Id">
            <summary>
            Gets the short form context identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.RequiredVersion">
            <summary>
            Gets the version required for this context before processing the message.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.UpdatedVersion">
            <summary>
            Gets the optional version to be updated once message is processed.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.DisplayName">
            <summary>
            Gets the optional context display name for diagnostic purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest.WithoutDisplayName">
            <summary>
            Gets the same instance without display name value.
            </summary>
            <returns>an instance of <see cref="T:Microsoft.Internal.VisualStudio.Extensibility.Framework.MessageVersionRequest" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.HashHelpers.GetStableHashCode(System.String,System.Boolean)">
            <summary>
            Returns a hash code for <paramref name="s" />.  The reason to use this over String.GetHashCode()
            is to guarantee consistent results across product versions.
            </summary>
            <param name="s">String to hash</param>
            <param name="ignoreCase">Indicates whether to generate a case-insensitive hash using Char.ToLowerInvariant</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Validate">
            <summary>
            This type is forwarded from MS.VS.Shell.xx.dll
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an ArgumentNullException if the given object is null.
            </summary>
            <param name="o">Object to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNull(System.Object,System.String)">
            <summary>
            Throws an InvalidOperationException if the given object is not null.
            </summary>
            <param name="o">Object to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given string is empty.
            </summary>
            <param name="s">String to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotEmpty(System.Guid,System.String)">
            <summary>
            Throws an ArgumentException if the given guid is empty.
            </summary>
            <param name="g">Guid to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotWhiteSpace(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the given string contains only whitespaces.
            </summary>
            <param name="s">String to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotNullAndNotEmpty(System.String,System.String)">
            <summary>
            Validates that the given string is both non-null and non-empty.
            </summary>
            <param name="s">String to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotNullAndNotWhiteSpace(System.String,System.String)">
            <summary>
            Validates that the given string is both non-null and does not contain only whitespaces.
            </summary>
            <param name="s">String to test</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Validate that the value of the specified argument has an expected value
            </summary>
            <param name="value">Value to test</param>
            <param name="expectedValue">The exepected value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Validate that the value of the specified argument has an expected value
            </summary>
            <param name="value">Value to test</param>
            <param name="expectedValue">The exepected value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Validate that the value of the specified argument does not have a specific value
            </summary>
            <param name="value">Value to test</param>
            <param name="unexpectedValue">The unexepected value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Validate that the value of the specified argument does not have a specific value
            </summary>
            <param name="value">Value to test</param>
            <param name="unexpectedValue">The unexepected value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsWithinRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Validates that a value is within the specified range.
            </summary>
            <param name="value">Value to test</param>
            <param name="min">Minimum valid value</param>
            <param name="max">Maximum valid value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsWithinRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Validates that a value is within the specified range.
            </summary>
            <param name="value">Value to test</param>
            <param name="min">Minimum valid value</param>
            <param name="max">Maximum valid value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsWithinRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Validates that a value is within the specified range.
            </summary>
            <param name="value">Value to test</param>
            <param name="min">Minimum valid value</param>
            <param name="max">Maximum valid value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsWithinRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Validates that a value is within the specified range.
            </summary>
            <param name="value">Value to test</param>
            <param name="min">Minimum valid value</param>
            <param name="max">Maximum valid value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsWithinRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Validates that a value is within the specified range.
            </summary>
            <param name="value">Value to test</param>
            <param name="min">Minimum valid value</param>
            <param name="max">Maximum valid value</param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Validate.IsNormalized(System.String,System.String)">
            <summary>
            Asserts that the given path is normalized.  An exception is thrown
            exception if the path isn't normalized.
            </summary>
            <param name="path"></param>
            <param name="paramName">
            <paramref name="paramName" /> parameter used if an exception is raised
            </param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2">
            <summary>
            This is a generic replacement for the non-generic System.Collections.Specialized.HybridDictionary.
            </summary>
            <typeparam name="TKey">The Key type for the dictionary</typeparam>
            <typeparam name="TValue">The Value type for the dictionary</typeparam>
            <remarks>
            This type is forwarded from MS.VS.Shell.xx.dll
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2._inner">
            <summary>
            Either null, a List or a Dictionary
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2._keyComparer">
            <summary>
            Comparer for the keys
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.cutoverPoint">
            <summary>
            The cut-over point from List to Dictionary.
            When the collection is empty, _inner is null.
            From 1 to 32 elements, _inner is a List (geometric growth)
            When the 33rd element is added, _inner upgrades to a Dictionary.
            The upgrade to Dictionary is one-way (i.e. Even if the count drops
            below 33 again, _inner remains a Dictionary), unless you call <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Clear" />
            or remove all items in which case it will become a List on the next insertion.
            A power of 2 was chosen to avoid excess space in the List at the cut-over
            point.
            </summary>
            <remarks>internal for unit testing.</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Add(`0,`1)">
            <summary>
            Adds a key/value pair to the collection
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the given key is in the collection
            </summary>
            <param name="key">Key to search for</param>
            <returns>True if the key is in the collection, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Keys">
            <summary>
            Returns the keys in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Remove(`0)">
            <summary>
            Removes the value indexed by the given key from the collection.
            </summary>
            <param name="key">Key to remove</param>
            <returns>True if the key was removed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to return the value corresponding to a key.
            </summary>
            <param name="key">Key to search for</param>
            <param name="value">Value corresponding to <paramref name="key" />, or null if
            <paramref name="key" /> is not in the collection.
            </param>
            <returns>True if <paramref name="key" /> is in the collection, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Values">
            <summary>
            Returns the values in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with a key
            </summary>
            <param name="key">Key of the value to get or set</param>
            <returns>Value corresponding to the key</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.AsDictionary">
            <summary>
            Try cast to a Dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.List">
            <summary>
            Unconditionally cast to a List. Callers should always check for null and try <see cref="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.AsDictionary" /> before calling
            this to avoid a runtime <see cref="T:System.InvalidCastException" />
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.IndexOfKey(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},`0)">
            <summary>
            Find the index of a key in the given list. The search is linear.
            </summary>
            <param name="list">The list to search.</param>
            <param name="key">The key to search for.</param>
            <returns>The index of <paramref name="key" /> in <paramref name="list" /> or -1 if it is not found.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key/value pair to the collection
            </summary>
            <param name="item">Key/value pair to add</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Clear">
            <summary>
            Removes all of the key/value pairs from the collection
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if a key/value pair is in the collection
            </summary>
            <param name="item">Key/value pair to add</param>
            <returns>True if the key/value pair is in the collection, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key/value pairs in the collection to an array
            </summary>
            <param name="array">Array to which the key/value pairs are copied</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" />
            at which copying begins.
            </param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Count">
            <summary>
            Returns the number of items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.IsReadOnly">
            <summary>
            Determines if the collection is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the given key/value pair from the collection
            </summary>
            <param name="item">Key/value pair to remove</param>
            <returns>True if the key/value pair is removed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator for the collection
            </summary>
            <returns>Collection enumerator</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HybridDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection
            </summary>
            <returns>Collection enumerator</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2">
            <summary>
            Dictionary that does not prevent values from being garbage collected. This class is designed to be thread-safe.
            </summary>
            <remarks>
            Example scenarios:
            - Store a weak mapping of keys to values where the values can be collected to prevent leaking memory.
            PERF: Like a regular dictionary, the collection will never reduce its underlying size. This dictionary may be more
            prone to get overly capacious. If profiles show that is a problem, Scavenge could shrink the underlying dictionary
            based on some policy, e.g., if the number of remaining entries are less than 10% of the size of the underlying dictionary.
            </remarks>
            <typeparam name="K">Type of key</typeparam>
            <typeparam name="V">Type of value</typeparam>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.backingDictionary">
            <summary>
            Backing dictionary
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.capacity">
            <summary>
            Improvised capacity. See comment in item setter.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.#ctor">
            <summary>
            Constructor for a collection using the default key comparer
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor taking a specified comparer for the keys
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Count">
            <summary>
            Count of entries.
            Some entries may represent keys or values that have already been garbage collected.
            To clean these out call <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Scavenge" />.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Item(`0)">
            <summary>
            Gets or sets the entry whose key equates to the specified key.
            Getter throws KeyNotFoundException if key is not found.
            Setter adds entry if key is not found.
            </summary>
            <remarks>
            If we find the entry but its target is null, we take the opportunity
            to remove the entry, as if the GC had done it.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Contains(`0)">
            <summary>
            Whether there is a key present with the specified key
            </summary>
            <remarks>
            As usual, don't just call Contained as the wrapped value may be null.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value for the provided key.
            Returns true if the key is found, otherwise false.
            </summary>
            <remarks>
            If we find the entry but its target is null, we take the opportunity
            to remove the entry, as if the GC had done it.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Remove(`0)">
            <summary>
            Removes an entry with the specified key.
            Returns true if found, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Values">
            <summary>
            Gets non GC'd values. Does not perform a scavenge
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Keys">
            <summary>
            Gets all keys. Even ones that have expired.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.GetAliveKeys">
            <summary>
            Gets only the keys that are not expired.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.EnumerateAndScavenge(System.Collections.Generic.List{`0})">
            <summary>
            Remove any entries from the dictionary that represent keys or values
            that have been garbage collected.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakValueDictionary`2.Clear">
            <summary>
            Empty the collection
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode">
            <summary>
            Data types used by <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer" /> when it is necessary to serialize type information in
            addition to the data itself.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer">
            <summary>
            Implements deserialization code for data serialized with <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer" /> and provides
            abstract method to implement support for complex data, uniquely identifiable objects and references.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.DeserializeWithTypeInfo(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
             <summary>
             This method implements MessagePack deserialization for Remote UI data and returns the type of the field being
             deserialized when the field is one of <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> or a nullable of one of such types.
             </summary>
             <param name="reader">MessagePack reader from which the data is read.</param>
             <param name="options">MessagePack options to be used for deserialization.</param>
             <returns>
             The deserialized value and its type information.
            
             A value of <see langword="null" /> is returned as type if the field is of a complex type (a type not listed in
             <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" />).
            
             In case of nullable fields of one of the types listed in <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" />, the corresponding
             <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> is returned.
             </returns>
             <exception cref="T:System.IO.InvalidDataException">When the <paramref name="reader" /> contains invalid data.</exception>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.Serialize(MessagePack.MessagePackWriter@,System.Object,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
            <remarks>
            This method is not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.ConvertToType(Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode)">
            <summary>
            Converts a <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> to its corresponding <see cref="T:System.Type" />.
            </summary>
            <param name="typeCode">The <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> to convert.</param>
            <returns>The <see cref="T:System.Type" /> corresponding to <paramref name="typeCode" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.GetEmptyObject">
            <summary>
            This method is invoked by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.DeserializeWithTypeInfo(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)" /> to retrieve an empty object (an object with no properties).
            </summary>
            <returns>An object with no properties.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.GetReference(Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectId,MessagePack.MessagePackSerializerOptions)">
            <summary>
            This method is invoked by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.DeserializeWithTypeInfo(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)" /> to retrieve the uniquely identifiable object <paramref name="id" />.
            </summary>
            <param name="id">The identifier of the uniquely identifable object to return.</param>
            <param name="options">MessagePack options being used for deserialization.</param>
            <returns>The uniquely identifiable object.</returns>
            <remarks>
            If the object cannot be found, the implementer can either throw an exception or return a placeholder.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.DeserializeComplexObject(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
            <summary>
            This method is invoked by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer.DeserializeWithTypeInfo(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)" /> to have a complex object deserialized.
            </summary>
            <param name="reader">MessagePack reader from which the data is read.</param>
            <param name="options">MessagePack options to be used for deserialization.</param>
            <returns>The uniquely identifiable object.</returns>
            <remarks>
            The implementer can throw <see cref="T:System.NotSupportedException" /> if the current implementation of
            <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.Deserializer" /> doesn't support reading complex objects.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.RemoteUIUtilities.NextServerVersion(Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersion)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersion" /> corresponding to the next server change.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.RemoteUIUtilities.NextClientVersion(Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersion)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectVersion" /> corresponding to the next client change.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.RemoteUIUtilities.Next(Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectId)">
            <summary>
            Generates the next <see cref="T:Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectId" /> value.
            </summary>
            <returns>The next <see cref="T:Microsoft.VisualStudio.RpcContracts.RemoteUI.ObjectId" /> value.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode">
             <summary>
             Values used as keys for Map objects in the Remote UI data serialization format.
             </summary>
             <remarks>
             The Remote UI data serialization format is compatible with MessagePack but requires special handling when
             deserializing Map objects.
            
             The keys of Map objects are one of the <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode" /> values. This allows Remote UI data to be
             serialized in valid MessagePack format (without custom extensions), that can be automatically converted to json,
             while retaining additional metadata (e.g., unique object ids and data type information).
             </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Reference">
            <summary>
            A reference to a uniquely identifiable object. The value of this field is the object identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Id">
            <summary>
            The identifier of a uniquely identifiable object.
            </summary>
            <remarks>
            This field is followed by either an <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Object" /> or <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Command" /> field.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Object">
            <summary>
            The value of the object serialized as a MessagePack map.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Command">
            <summary>
            The value of the object serialized as a MessagePack map. <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Command" /> is used instead of
            <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Object" /> when the value is a command.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Char">
            <summary>
            A <see langword="char" /> value. The value of this field is encoded as a <see cref="T:System.UInt16" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Nullable">
            <summary>
            A nullable value. The value of this field is serialized as non-nullable Remote UI data.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.NullableType">
            <summary>
            An empty nullable and its type information. The value of this field is a <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> or Nil.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.CollectionType">
            <summary>
            The type of the entries of an <see cref="T:System.Collections.ICollection" />, <see cref="T:System.Collections.Generic.ICollection`1" /> or
            <see cref="T:System.Collections.Generic.ICollection`1" /> of nullable values.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.LocalDateTime">
            <summary>
            A <see cref="T:System.DateTime" /> value of kind <see cref="F:System.DateTimeKind.Local" />. The value is serialized after being
            converted to Utc.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.UnspecifiedDateTime">
            <summary>
            A <see cref="T:System.DateTime" /> value of kind <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Version">
            <summary>
            The version of the object.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Collection">
            <summary>
            The value of the object serialized as a MessagePack array.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.NullableCollection">
            <summary>
            The value of the object serialized as a MessagePack array. <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.NullableCollection" /> is used instead of
            <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Collection" /> when the value implements <see cref="T:System.Collections.Generic.ICollection`1" /> of nullable values.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Untyped">
            <summary>
            An untyped value. The value of this field is serialized as Remote UI data. This is used when
            serializing a property of type <see langword="object" /> containing a value that has a corresponding
            <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> in order to inform the deserializer that the field is not of the corresponding type.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.Xaml">
            <summary>
            A XAML string.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer">
             <summary>
             This class implements MessagePack serialization for simple data types that can be sent both from the extension to
             Visual Studio, and from Visual Studio to the extension. This includes the basic data types provided by .NET and
             nullable versions of such data types.
             </summary>
             <remarks>
             MessagePack would normally serialized numeric data using the smallest format possible (e.g., <c>(int)5</c>
             would be serialized as a <see langword="byte" />). <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer" /> instead serializes
             numerical data in the format corresponding to their original data type in order to preserve information about the
             original data type.
            
             Some data like <see langword="char" />, <see cref="T:System.DateTime" /> of type <see cref="F:System.DateTimeKind.Local" /> and nullable
             values use a custom format.
             </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)">
            <summary>
            Retrieves a delegate able to serialize values of type <paramref name="type" />.
            </summary>
            <param name="type">The type to be serialized.</param>
            <returns>A delegate able to serialize <paramref name="type" /> or <see langword="null" /> if
            <paramref name="type" /> is not considered simple data.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type,System.Boolean,Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode@,System.Boolean@)">
            <summary>
            Retrieves a delegate able to serialize values of type <paramref name="type" />.
            </summary>
            <param name="type">The type to be serialized.</param>
            <param name="omitNullableHeader">When <see langword="true" /> the returned delegate will write nullable values
            as Nil or their non-nullable equivalent. This is used when writing <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <param name="dataTypeCode">Returns the <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> corresponding to <paramref name="type" /> or
            <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode.Invalid" />.</param>
            <param name="isNullableValueType">Returns whether <paramref name="type" /> is a <see cref="T:System.Nullable`1" />.
            </param>
            <returns>A delegate able to serialize <paramref name="type" /> or <see langword="null" /> if
            <paramref name="type" /> is not considered simple data.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethodForValueType(System.Type,Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode@)">
            <summary>
            Retrieves a delegate able to serialize values of type <paramref name="type" /> when <paramref name="type" /> is a
            non nullable value type.
            </summary>
            <param name="type">The type to be serialized.</param>
            <param name="dataTypeCode">Returns the <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> corresponding to <paramref name="type" /> or
            <see langword="null" />.</param>
            <returns>A delegate able to serialize <paramref name="type" /> or <see langword="null" /> if
            <paramref name="type" /> is not considered simple data.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethodForReferenceType(System.Type,Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode@)">
            <summary>
            Retrieves a delegate able to serialize values of type <paramref name="type" /> when <paramref name="type" /> is a
            reference type and its value is not null.
            </summary>
            <param name="type">The type to be serialized.</param>
            <param name="dataTypeCode">Returns the <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode" /> corresponding to <paramref name="type" /> or
            <see langword="null" />.</param>
            <returns>A delegate able to serialize <paramref name="type" /> or <see langword="null" /> if
            <paramref name="type" /> is not considered simple data.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeChar(MessagePack.MessagePackWriter@,System.Object)">
            <summary>
            Serialization method for <see langword="char" /> values. This is used by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)" />
            to construct <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeMethod" /> delegates.
            </summary>
            <param name="writer">MessagePack writer to which <paramref name="value" /> is serialized.</param>
            <param name="value">The value to be serialized.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeDateTime(MessagePack.MessagePackWriter@,System.Object)">
            <summary>
            Serialization method for <see cref="T:System.DateTime" /> values. This is used by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)" />
            to construct <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeMethod" /> delegates.
            </summary>
            <param name="writer">MessagePack writer to which <paramref name="value" /> is serialized.</param>
            <param name="value">The value to be serialized.</param>
            <remarks>
            In order to respect the intent of using local <see cref="T:System.DateTime" /> objects, without corrupting their values
            in case serializer and deserializer use different timezones, we convert them to Utc but mark them with
            <see cref="F:Microsoft.Internal.VisualStudio.RemoteUI.SerializerFieldCode.LocalDateTime" /> so that they can be converted to the local timezone of the
            reader when deserializing.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeNullable(MessagePack.MessagePackWriter@,System.Object,MessagePack.MessagePackSerializerOptions,Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeNonNullMethod)">
            <summary>
            Serialization method for nullable objects used when serializing items of typed collections. This is used by
            <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)" /> to construct <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeMethod" /> delegates.
            </summary>
            <param name="writer">MessagePack writer to which <paramref name="value" /> is serialized.</param>
            <param name="value">The value to be serialized.</param>
            <param name="options">MessagePack serializer options used for the serialization.</param>
            <param name="serializeMethod">Delegate to be used for serializing the object value when not null.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeNullableWithHeader(MessagePack.MessagePackWriter@,System.Object,MessagePack.MessagePackSerializerOptions,Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode,Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeNonNullMethod)">
            <summary>
            Serialization method for nullable value types. This is used by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)" /> to
            construct <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeMethod" /> delegates.
            </summary>
            <param name="writer">MessagePack writer to which <paramref name="value" /> is serialized.</param>
            <param name="value">The value to be serialized.</param>
            <param name="options">MessagePack serializer options used for the serialization.</param>
            <param name="typeCode">Code representing the data type of the field to be used when <paramref name="value" />
            is an empty nullable.</param>
            <param name="serializeMethod">Delegate to be used for serializing the object value when not null.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeRerenceTypeWithHeader(MessagePack.MessagePackWriter@,System.Object,MessagePack.MessagePackSerializerOptions,Microsoft.Internal.VisualStudio.RemoteUI.DataTypeCode,Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeNonNullMethod)">
            <summary>
            Serialization method for nullable reference types. This is used by <see cref="M:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.GetSerializeMethod(System.Type)" /> to
            construct <see cref="T:Microsoft.Internal.VisualStudio.RemoteUI.SimpleDataTypesSerializer.SerializeMethod" /> delegates.
            </summary>
            <param name="writer">MessagePack writer to which <paramref name="value" /> is serialized.</param>
            <param name="value">The value to be serialized.</param>
            <param name="options">MessagePack serializer options used for the serialization.</param>
            <param name="typeCode">Code representing the data type of the field to be used when <paramref name="value" />
            is an empty nullable.</param>
            <param name="serializeMethod">Delegate to be used for serializing the object value when not null.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.IVsEtwActivityEventWriter">
            <summary>
            Interface to write activity events
            </summary>
            <remarks>For internal use only</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivity">
            <summary>
            Represents an activity timespan that is marked by start/stop ETW events based on object lifecyle
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivityEventWriter">
            <summary>
            Internal implementation of activity event writer to write activity events to ETW
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivityInfo">
            <summary>
            Contains information to define an activity block
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivityInfo.#ctor(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel)">
            <summary>
            Creates a new activity information struct
            </summary>
            <param name="name">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivityInfo.#ctor(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid)">
            <summary>
            Creates a new activity information struct
            </summary>
            <param name="name">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivityInfo.#ctor(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid,System.Guid)">
            <summary>
            Creates a new activity information struct
            </summary>
            <param name="name">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="activityId">Activity identifier, if Guid.Empty a new GUID will be generated</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords">
            <summary>
            ETW event keywords specific to Visual Studio providers
            </summary>
            <remarks>Please contact vsideperfreleng before adding a value here.</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel">
            <summary>
            ETW event levels specific to Visual Studio providers.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging">
            <summary>
            Visual Studio Common ETW provider.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,``0,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivity)">
            <summary>
            Writes a simple event to ETW stream
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,``0,System.Guid)">
            <summary>
            Writes a simple event to ETW stream
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,``0)">
            <summary>
            Writes a simple event to ETW stream using default verbose level
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel)">
            <summary>
            Writes a simple event to ETW stream
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivity)">
            <summary>
            Writes a simple event to ETW stream
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="relatedActivity">Tagged activity to relate the event</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid)">
            <summary>
            Writes a simple event to ETW stream
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="relatedActivityId">Tagged activity to relate the event</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteEvent(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords)">
            <summary>
            Writes a simple event to ETW stream using default verbose level
            </summary>
            <param name="eventName">Name of the event</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.CreateActivity``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,``0)">
            <summary>
            Creates an activity with user data embedded in the start event
            </summary>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
            <returns>An EtwActivity object to determine the activity duration. The activity will be ended when object is disposed, End or Abort methods are called</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.CreateActivity``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivity,``0)">
            <summary>
            Creates an activity with user data embedded in the start event
            </summary>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="relatedActivity">Related activity to this event, the activity id will be logged in the activity event</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
            <returns>An EtwActivity object to determine the activity duration. The activity will be ended when object is disposed, End or Abort methods are called</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.CreateActivity(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel)">
            <summary>
            Creates an activity
            </summary>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <returns>An EtwActivity object to determine the activity duration. The activity will be ended when object is disposed, End or Abort methods are called</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.CreateActivity(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwActivity)">
            <summary>
            Creates an activity
            </summary>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <param name="relatedActivity">Related activity to this event, the activity id will be logged in the activity event</param>
            <returns>An EtwActivity object to determine the activity duration. The activity will be ended when object is disposed, End or Abort methods are called</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteActivityStart(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid,System.Guid)">
            <summary>
            Write an ETW event to indicate an activity start.
            </summary>
            <remarks>This method should be used in cases where VsEtwActivity class can't be used to control the lifetime of the activity</remarks>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="activityId">Activity identifier, if Guid.Empty a new GUID will be generated</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteActivityStart``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid,System.Guid,``0)">
            <summary>
            Write an ETW event to indicate an activity start.
            </summary>
            <remarks>This method should be used in cases where VsEtwActivity class can't be used to control the lifetime of the activity</remarks>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="activityId">Activity identifier, if Guid.Empty a new GUID will be generated</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteActivityStop(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid,System.Guid)">
            <summary>
            Write an ETW event to indicate an activity stop.
            </summary>
            <remarks>This method should be used in cases where VsEtwActivity class can't be used to control the lifetime of the activity</remarks>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="activityId">Activity identifier, if Guid.Empty a new GUID will be generated</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.WriteActivityStop``1(System.String,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel,System.Guid,System.Guid,``0)">
            <summary>
            Write an ETW event to indicate an activity start.
            </summary>
            <remarks>This method should be used in cases where VsEtwActivity class can't be used to control the lifetime of the activity</remarks>
            <param name="activityName">Name of the activity</param>
            <param name="keyword">ETW keyword to define activity category</param>
            <param name="level">ETW level to define activity event's verbosity</param>
            <param name="activityId">Activity identifier, if Guid.Empty a new GUID will be generated</param>
            <param name="relatedActivityId">Related activity identifier if any, can be Guid.Empty</param>
            <param name="data">User data to be passed through the event. The data must either be an object with EventData attribute or an anonymous struct type</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLogging.IsProviderEnabled(Microsoft.Internal.VisualStudio.Diagnostics.VsEtwKeywords,Microsoft.Internal.VisualStudio.Diagnostics.VsEtwLevel)">
            <summary>
            Determines if provider is enabled for certain keyword and level
            </summary>
            <param name="keywords">One of VsEtwKeywords values, VS events can not be created without a keyword</param>
            <param name="level">One of VsEtwLevels values</param>
            <returns>true if provider is enabled, false otherwise</returns>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string" /> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string" />, or <see langword="null" /> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value" /> is <see langword="null" />.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCWSTR.Length" />
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCWSTR.ToString" />
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>
            <para>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//windef/ns-windef-rect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="P:Windows.Win32.__byte_3.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__byte_3.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="T:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO">
            <summary>Receives file compression information.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_compression_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.CompressedFileSize">
            <summary>The file size of the compressed file.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.CompressionFormat">
            <summary>The compression format that is used to compress the file.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.CompressionUnitShift">
            <summary>The factor that the compression uses.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.ChunkShift">
            <summary>The number of chunks that are shifted by compression.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.ClusterShift">
            <summary>The number of clusters that are shifted by compression.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO.Reserved">
            <summary>Reserved.</summary>
        </member>
        <member name="T:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS">
            <summary>Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set.</summary>
            <remarks>
            <para>As noted in the preceding section, some file information classes are valid only for use with <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. Others are valid only for use with <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. Where neither function is mentioned, the information class is valid with both functions.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileBasicInfo">
            <summary>
            <para>Minimal information for the file should be retrieved or set. Used for file handles. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_basic_info">FILE_BASIC_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo">
            <summary>
            <para>Extended information for the file should be retrieved. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_standard_info">FILE_STANDARD_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileNameInfo">
            <summary>
            <para>The file name should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_name_info">FILE_NAME_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRenameInfo">
            <summary>
            <para>The file name should be changed. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_rename_info">FILE_RENAME_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfo">
            <summary>
            <para>The file should be deleted. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_disposition_info">FILE_DISPOSITION_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAllocationInfo">
            <summary>
            <para>The file allocation information should be changed. Used for file handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_allocation_info">FILE ALLOCATION INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileEndOfFileInfo">
            <summary>
            <para>The end of the file should be set. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_end_of_file_info">FILE_END_OF_FILE_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStreamInfo">
            <summary>
            <para>File stream information for the specified file should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_stream_info">FILE_STREAM_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileCompressionInfo">
            <summary>
            <para>File compression information should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_compression_info">FILE_COMPRESSION_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAttributeTagInfo">
            <summary>
            <para>File attribute information should be retrieved. Used for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_attribute_tag_info">FILE_ATTRIBUTE_TAG_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. The number of files returned for each call to <b>GetFileInformationByHandleEx</b> depends on the size of the buffer that is passed to the function. Any subsequent calls to <b>GetFileInformationByHandleEx</b> on the same handle will resume the enumeration operation after the last file is returned. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_both_dir_info">FILE_ID_BOTH_DIR_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileIdBothDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_both_dir_info">FILE_ID_BOTH_DIR_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIoPriorityHintInfo">
            <summary>
            <para>Priority hint information should be  set. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileinformationbyhandle">SetFileInformationByHandle</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_io_priority_hint_info">FILE_IO_PRIORITY_HINT_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRemoteProtocolInfo">
            <summary>
            <para>File remote protocol information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_remote_protocol_info">FILE_REMOTE_PROTOCOL_INFO</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_full_dir_info">FILE_FULL_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileFullDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_full_dir_info">FILE_FULL_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileStorageInfo">
            <summary>
            <para>File storage information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_storage_info">FILE_STORAGE_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileAlignmentInfo">
            <summary>
            <para>File alignment information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_alignment_info">FILE_ALIGNMENT_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdInfo">
            <summary>
            <para>File information should be retrieved. Use for any handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_info">FILE_ID_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryInfo">
            <summary>
            <para>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_extd_dir_info">FILE_ID_EXTD_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryRestartInfo">
            <summary>
            <para>Identical to <b>FileIdExtdDirectoryInfo</b>, but forces the enumeration operation to start again from the beginning. Use only when calling <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-getfileinformationbyhandleex">GetFileInformationByHandleEx</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/winbase/ns-winbase-file_id_extd_dir_info">FILE_ID_EXTD_DIR_INFO</a>. <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported before Windows 8 and Windows Server 2012</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//minwinbase/ne-minwinbase-file_info_by_handle_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfoEx">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.FileRenameInfoEx">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS.MaximumFileInfoByHandleClass">
            <summary>This value is used for validation. Supported values are less than this value.</summary>
        </member>
        <member name="T:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO">
            <summary>Receives extended information for the file.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_standard_info">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO.AllocationSize">
            <summary>The amount of space that is allocated for the file.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO.EndOfFile">
            <summary>The end of the file.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO.NumberOfLinks">
            <summary>The number of links to the file.</summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO.DeletePending">
            <summary>
            <para><b>TRUE</b> if the file in the delete queue; otherwise, <b>false</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_standard_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO.Directory">
            <summary>
            <para><b>TRUE</b> if  the  file is a directory; otherwise, <b>false</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/ns-winbase-file_standard_info#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO">
            <summary>Contains window information.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.cbSize">
            <summary>
            <para>Type: <b>DWORD</b> The size of the structure, in bytes. The caller must set this member to <c>sizeof(WINDOWINFO)</c>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.rcWindow">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> The coordinates of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.rcClient">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> The coordinates of the client area.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.dwStyle">
            <summary>
            <para>Type: <b>DWORD</b> The window styles. For a table of window styles, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">Window Styles</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.dwExStyle">
            <summary>
            <para>Type: <b>DWORD</b> The extended window styles. For a table of extended window styles, see <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.dwWindowStatus">
            <summary>
            <para>Type: <b>DWORD</b> The window status. If this member is <b>WS_ACTIVECAPTION</b> (0x0001), the window is active. Otherwise, this member is zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.cxWindowBorders">
            <summary>
            <para>Type: <b>UINT</b> The width of the window border, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.cyWindowBorders">
            <summary>
            <para>Type: <b>UINT</b> The height of the window border, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.atomWindowType">
            <summary>
            <para>Type: <b>ATOM</b> The window class atom (see <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a>).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO.wCreatorVersion">
            <summary>
            <para>Type: <b>WORD</b> The Windows version of the application that created the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-windowinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "ADVAPI32.dll".
            </content>
            <content>
            Contains extern methods from "GDI32.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
            <content>
            Contains extern methods from "USER32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetSidSubAuthority(Windows.Win32.Foundation.PSID,System.UInt32)">
            <summary>Returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative identifier (RID).</summary>
            <param name="pSid">
            <para>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-sid">SID</a> structure from which a pointer to a subauthority is to be returned. This function does not handle <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-sid">SID</a> structures that are not valid. Call the <a href="https://docs.microsoft.com/windows/desktop/api/securitybaseapi/nf-securitybaseapi-isvalidsid">IsValidSid</a> function to verify that the <b>SID</b> structure is valid before you call this function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//securitybaseapi/nf-securitybaseapi-getsidsubauthority#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nSubAuthority">Specifies an index value identifying the subauthority array element whose address the function will return. The function performs no validation tests on this value. An application can call the <a href="https://docs.microsoft.com/windows/desktop/api/securitybaseapi/nf-securitybaseapi-getsidsubauthoritycount">GetSidSubAuthorityCount</a> function to discover the range of acceptable values.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the specified <a href="/windows/desktop/api/winnt/ns-winnt-sid">SID</a> subauthority. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the function fails, the return value is undefined. The function fails if the specified <a href="/windows/desktop/api/winnt/ns-winnt-sid">SID</a> structure is not valid or if the index value specified by the <i>nSubAuthority</i> parameter is out of bounds.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//securitybaseapi/nf-securitybaseapi-getsidsubauthority">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetTokenInformation(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Security.TOKEN_INFORMATION_CLASS,System.Void*,System.UInt32,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetTokenInformation(Windows.Win32.Foundation.HANDLE,Windows.Win32.Security.TOKEN_INFORMATION_CLASS,System.Void*,System.UInt32,System.UInt32*)" />
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.PInvoke.GetTokenInformation(Windows.Win32.Foundation.HANDLE,Windows.Win32.Security.TOKEN_INFORMATION_CLASS,System.Void*,System.UInt32,System.UInt32*)" -->
        <member name="M:Windows.Win32.PInvoke.OpenProcessToken(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Security.TOKEN_ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeFileHandle@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.OpenProcessToken(Windows.Win32.Foundation.HANDLE,Windows.Win32.Security.TOKEN_ACCESS_MASK,Windows.Win32.Foundation.HANDLE*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.OpenProcessToken(Windows.Win32.Foundation.HANDLE,Windows.Win32.Security.TOKEN_ACCESS_MASK,Windows.Win32.Foundation.HANDLE*)">
            <summary>Opens the access token associated with a process.</summary>
            <param name="ProcessHandle">A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.</param>
            <param name="DesiredAccess">
            <para>Specifies an <a href="https://docs.microsoft.com/windows/desktop/SecGloss/a-gly">access mask</a> that specifies the requested types of access to the access token. These requested access types are compared with the <a href="https://docs.microsoft.com/windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the token to determine which accesses are granted or denied.</para>
            <para>For a list of access rights for access tokens, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-rights-for-access-token-objects">Access Rights for Access-Token Objects</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-openprocesstoken#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-openprocesstoken">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.PInvoke.FSCTL_SET_COMPRESSION">
            <summary>Sets the compression state of a file or directory on a volume whose file system supports per-file and per-directory compression.</summary>
            <remarks>
            <para>The LZNT1 compression algorithm is the only compression algorithm implemented. As a result, the LZNT1 compression algorithm is used as the DEFAULT compression method. If the file system of the volume containing the specified file or directory does not support per-file or per-directory compression, the operation fails. The compression state change of the file or directory occurs synchronously with the call to [DeviceIoControl](../ioapiset/nf-ioapiset-deviceiocontrol.md). To retrieve the compression state of a file or directory, use the [FSCTL_GET_COMPRESSION](ni-winioctl-fsctl_get_compression.md) control code. To retrieve the compression attribute of a file or directory, use the [GetFileAttributes](../fileapi/nf-fileapi-getfileattributesa.md) function. The compression attribute indicates whether a file or directory is compressed. The compression state indicates whether a file or directory is compressed and, if it is, the format of the compressed data. Directories are not actually compressed by this operation. Rather, the operation sets the default state for files created in the directory to be compressed. Note that the time stamps may not be updated correctly for a remote file. To ensure consistent results, use unbuffered I/O. File compression is supported for files of a maximum uncompressed size of 30 gigabytes. In Windows 8 and Windows Server 2012, this code is supported by the following technologies. Technology | Supported -----------|---------- Server Message Block (SMB) 3.0 protocol | Yes SMB 3.0 Transparent Failover (TFO) | No SMB 3.0 with Scale-out File Shares (SO) | No Cluster Shared Volume File System (CsvFS) | See comment Resilient File System (ReFS) | No CsvFs does not support making a directory compressed. CsvFs allows making file compressed only when the file is opened exclusively by a node. SMB 3.0 Transparent Failover and Scale-Out does not support NTFS compressed files. The FSCTL call is not blocked, but is unsupported."</para>
            <para><h3><a id="Transacted_Operations"></a><a id="transacted_operations"></a><a id="TRANSACTED_OPERATIONS"></a>Transacted Operations</h3> You cannot change the compression state of a file  opened with <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-createfiletransacteda">CreateFileTransacted</a>. For more information about transactions, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/transactional-ntfs-portal">Transactional NTFS</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winioctl/ni-winioctl-fsctl_set_compression#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDeviceCaps(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetDeviceCaps(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDeviceCaps(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="index"></param>
            <returns>
            <para>The return value specifies the value of the desired item. When <i>nIndex</i> is BITSPIXEL and the device has 15bpp or 16bpp, the return value is 16.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wingdi/nf-wingdi-getdevicecaps">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DeviceIoControl(System.Runtime.InteropServices.SafeHandle,System.UInt32,System.Void*,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Threading.NativeOverlapped*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.DeviceIoControl(Windows.Win32.Foundation.HANDLE,System.UInt32,System.Void*,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Threading.NativeOverlapped*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.DeviceIoControl(Windows.Win32.Foundation.HANDLE,System.UInt32,System.Void*,System.UInt32,System.Void*,System.UInt32,System.UInt32*,System.Threading.NativeOverlapped*)">
            <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
            <param name="hDevice">
            <para>A handle to the device on which the operation is to be performed. The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-createfilea">CreateFile</a> function. For more information, see Remarks.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwIoControlCode">
            <para>The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it. For a list of the control codes, see Remarks. The documentation for each control code provides usage details for the <i>lpInBuffer</i>, <i>nInBufferSize</i>, <i>lpOutBuffer</i>, and <i>nOutBufferSize</i> parameters.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpInBuffer">
            <para>A pointer to the input buffer that contains the data required to perform the operation. The format of this data depends on the value of the <i>dwIoControlCode</i> parameter. This parameter can be <b>NULL</b> if <i>dwIoControlCode</i> specifies an operation that does not require input data.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">
            <para>A pointer to the output buffer that is to receive the data returned by the operation. The format of this data depends on the value of the <i>dwIoControlCode</i> parameter. This parameter can be <b>NULL</b> if <i>dwIoControlCode</i> specifies an operation that does not return data.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">
            <para>A pointer to a variable that receives the size of the data stored in the output buffer, in bytes. If the output buffer is too small to receive any data,  the call fails, <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_INSUFFICIENT_BUFFER</b>, and <i>lpBytesReturned</i> is zero. If the output buffer is too small to hold all of the data but can hold some entries, some drivers will return as much data as fits. In this case, the call fails, <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> returns <b>ERROR_MORE_DATA</b>, and <i>lpBytesReturned</i> indicates the amount of data received. Your application should call <b>DeviceIoControl</b> again with the same operation, specifying a new starting point. If <i>lpOverlapped</i> is <b>NULL</b>, <i>lpBytesReturned</i> cannot be <b>NULL</b>. Even when an operation returns no output data and <i>lpOutBuffer</i> is <b>NULL</b>, <b>DeviceIoControl</b> makes use of <i>lpBytesReturned</i>. After such an operation, the value of <i>lpBytesReturned</i> is meaningless. If <i>lpOverlapped</i> is not <b>NULL</b>, <i>lpBytesReturned</i> can be <b>NULL</b>. If this parameter is not <b>NULL</b> and the operation returns data, <i>lpBytesReturned</i> is meaningless until the overlapped operation has completed. To retrieve the number of bytes returned, call <a href="https://docs.microsoft.com/windows/desktop/api/ioapiset/nf-ioapiset-getoverlappedresult">GetOverlappedResult</a>. If <i>hDevice</i> is associated with an I/O completion port, you can retrieve the number of bytes returned by calling <a href="https://docs.microsoft.com/windows/desktop/api/ioapiset/nf-ioapiset-getqueuedcompletionstatus">GetQueuedCompletionStatus</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpOverlapped">
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure. If <i>hDevice</i> was opened without specifying <b>FILE_FLAG_OVERLAPPED</b>, <i>lpOverlapped</i> is ignored. If <i>hDevice</i> was opened with the <b>FILE_FLAG_OVERLAPPED</b> flag, the operation is performed as an overlapped (asynchronous) operation. In this case, <i>lpOverlapped</i> must point to a valid <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ns-minwinbase-overlapped">OVERLAPPED</a> structure that contains a handle to an event object. Otherwise, the function fails in unpredictable ways. For overlapped operations, <b>DeviceIoControl</b> returns immediately, and the event object is signaled when the operation has been completed. Otherwise, the function does not return until the operation has been completed or an error occurs.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the operation completes successfully, the return value is nonzero. If the operation fails or is pending, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ioapiset/nf-ioapiset-deviceiocontrol">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentThread_SafeHandle">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetCurrentThread" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentThread">
            <summary>Retrieves a pseudo handle for the calling thread.</summary>
            <returns>The return value is a pseudo handle for the current thread.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-getcurrentthread">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDiskFreeSpace(System.String,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetDiskFreeSpace(Windows.Win32.Foundation.PCWSTR,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDiskFreeSpace(Windows.Win32.Foundation.PCWSTR,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*)">
            <summary>Retrieves information about the specified disk, including the amount of free space on the disk.</summary>
            <param name="lpRootPathName">
            <para>The root directory of the disk for which information is to be returned. If this parameter is <b>NULL</b>, the function uses the root of the current disk. If this parameter is a UNC name, it must include a trailing backslash (for example, "\\\\MyServer\\MyShare\\"). Furthermore, a drive specification must have a trailing backslash (for example, "C:\\"). The calling application must have <b>FILE_LIST_DIRECTORY</b> access rights for this  directory.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getdiskfreespacew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpSectorsPerCluster">A pointer to a variable that receives the number of sectors per cluster.</param>
            <param name="lpBytesPerSector">A pointer to a variable that receives the number of bytes per sector.</param>
            <param name="lpNumberOfFreeClusters">
            <para>A pointer to a variable that receives the total number of free clusters on the disk that are available to the user who is associated with the calling thread. If per-user disk quotas are in use, this value may be less than the total number of free clusters on the disk.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getdiskfreespacew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpTotalNumberOfClusters">
            <para>A pointer to a variable that receives the total number of clusters on the disk that are available to the user who is associated with the calling thread. If per-user disk quotas are in use, this value may be less than the total number of clusters on the disk.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getdiskfreespacew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getdiskfreespacew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileInformationByHandleEx(Windows.Win32.Foundation.HANDLE,Windows.Win32.Storage.FileSystem.FILE_INFO_BY_HANDLE_CLASS,System.Void*,System.UInt32)">
            <summary>Retrieves file information for the specified file.</summary>
            <param name="hFile">
            <para>A handle to the file that contains the information to be retrieved. This handle should not be a pipe handle.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="FileInformationClass">
            <para>A <a href="https://docs.microsoft.com/windows/desktop/api/minwinbase/ne-minwinbase-file_info_by_handle_class">FILE_INFO_BY_HANDLE_CLASS</a> enumeration value that specifies the type of information to be retrieved. For a table of valid values, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpFileInformation">
            <para>A pointer to the buffer that receives the requested file information. The structure that is returned corresponds to the class that is specified by <i>FileInformationClass</i>. For a table of valid structure types, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwBufferSize">The size of the <i>lpFileInformation</i> buffer, in bytes.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the <i>lpFileInformation</i> parameter. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getfileinformationbyhandleex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(System.Runtime.InteropServices.SafeHandle,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(Windows.Win32.Foundation.HANDLE,System.UInt32*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetNamedPipeClientProcessId(Windows.Win32.Foundation.HANDLE,System.UInt32*)">
            <summary>Retrieves the client process identifier for the specified named pipe.</summary>
            <param name="Pipe">
            <para>A handle to an instance of a named pipe. This handle must be created by the <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-createnamedpipea">CreateNamedPipe</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getnamedpipeclientprocessid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ClientProcessId">The process identifier.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getnamedpipeclientprocessid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetPrivateProfileInt(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,System.Int32,Windows.Win32.Foundation.PCWSTR)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetPrivateProfileInt(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,System.Int32,Windows.Win32.Foundation.PCWSTR)">
            <summary>Retrieves an integer associated with a key in the specified section of an initialization file.</summary>
            <param name="lpAppName">The name of the section in the initialization file.</param>
            <param name="lpKeyName">
            <para>The name of the key whose value is to be retrieved. This value is in the form of a string; the <b>GetPrivateProfileInt</b> function converts the string into an integer and returns the integer.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getprivateprofileintw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nDefault">The default value to return if the key name cannot be found in the initialization file.</param>
            <param name="lpFileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value is the integer equivalent of the string following the specified key name in the specified initialization file. If the key is not found, the return value is the specified default value.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getprivateprofileintw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetPrivateProfileString(System.String,System.String,System.String,Windows.Win32.Foundation.PWSTR,System.UInt32,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetPrivateProfileString(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.Foundation.PCWSTR)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetPrivateProfileString(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PWSTR,System.UInt32,Windows.Win32.Foundation.PCWSTR)">
            <summary>Retrieves a string from the specified section in an initialization file.</summary>
            <param name="lpAppName">
            <para>The name of the section containing the key name. If this parameter is <b>NULL</b>, the <b>GetPrivateProfileString</b> function copies all section names in the file to the supplied buffer.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getprivateprofilestringw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpKeyName">The name of the key whose associated string is to be retrieved. If this parameter is <b>NULL</b>, all key names in the section specified by the <i>lpAppName</i> parameter are copied to the buffer specified by the <i>lpReturnedString</i> parameter.</param>
            <param name="lpDefault">
            <para>A default string. If the <i>lpKeyName</i> key cannot be found in the initialization file, <b>GetPrivateProfileString</b> copies the default string to the <i>lpReturnedString</i> buffer.</para>
            <para>If this parameter is <b>NULL</b>, the default is an empty string, "". Avoid specifying a default string with trailing blank characters. The function inserts a <b>null</b> character in the <i>lpReturnedString</i> buffer to strip any trailing blanks.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getprivateprofilestringw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpReturnedString">A pointer to the buffer that receives the retrieved string.</param>
            <param name="nSize">The size of the buffer pointed to by the <i>lpReturnedString</i> parameter, in characters.</param>
            <param name="lpFileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>
            <para>The return value is the number of characters copied to the buffer, not including the terminating <b>null</b> character. If neither <i>lpAppName</i> nor <i>lpKeyName</i> is <b>NULL</b> and the supplied destination buffer is too small to hold the requested string, the string is truncated and followed by a <b>null</b> character, and the return value is equal to <i>nSize</i> minus one. If either <i>lpAppName</i> or <i>lpKeyName</i> is <b>NULL</b> and the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two <b>null</b> characters. In this case, the return value is equal to <i>nSize</i> minus two. In the event the initialization file specified by <i>lpFileName</i> is not found, or contains invalid values, this function will set <b>errorno</b> with a value of '0x2' (File Not Found). To retrieve extended error information, call <a href="/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-getprivateprofilestringw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetVolumeInformation(System.String,Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt32*,System.UInt32*,System.UInt32*,Windows.Win32.Foundation.PWSTR,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetVolumeInformation(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt32*,System.UInt32*,System.UInt32*,Windows.Win32.Foundation.PWSTR,System.UInt32)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetVolumeInformation(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PWSTR,System.UInt32,System.UInt32*,System.UInt32*,System.UInt32*,Windows.Win32.Foundation.PWSTR,System.UInt32)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory.</summary>
            <param name="lpRootPathName">
            <para>A pointer to a string that contains the root directory of the volume to be described. If this parameter is <b>NULL</b>, the root of the current directory is used. A trailing backslash is required. For example, you  specify \\MyServer\MyShare as "\\MyServer\MyShare\", or the C drive as "C:\".</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpVolumeNameBuffer">
            <para>A pointer to a buffer that receives the name of a specified volume. The buffer size is specified by the <i>nVolumeNameSize</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nVolumeNameSize">
            <para>The length of a volume name buffer, in <b>TCHARs</b>. The maximum buffer size is <b>MAX_PATH</b>+1. This parameter is ignored if the volume name buffer is not supplied.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpVolumeSerialNumber">
            <para>A pointer to a variable that receives the volume serial number. This parameter can be <b>NULL</b> if the serial number is not required. This function returns the volume serial number that the operating system assigns when a hard disk is formatted.  To programmatically obtain the hard disk's serial number that the manufacturer assigns, use the Windows Management Instrumentation (WMI) <a href="https://docs.microsoft.com/previous-versions/windows/desktop/cimwin32a/win32-physicalmedia">Win32_PhysicalMedia</a>  property <b>SerialNumber</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpMaximumComponentLength">
            <para>A pointer to a variable that receives the maximum length, in <b>TCHARs</b>, of a file name component  that a specified file system supports. A file name component is the portion of a file name between backslashes. The value that is stored in the variable  that  *<i>lpMaximumComponentLength</i> points to is used to indicate that a specified file system supports long names. For example, for a FAT file system that supports long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpFileSystemFlags">
            <para>A pointer to a variable that receives flags associated with the specified file system. This parameter can be one or more of the following flags. However, <b>FILE_FILE_COMPRESSION</b> and <b>FILE_VOL_IS_COMPRESSED</b> are mutually exclusive. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpFileSystemNameBuffer">
            <para>A pointer to a buffer that receives the name of the file system, for example, the FAT file system or the NTFS file system. The buffer size is specified by the <i>nFileSystemNameSize</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nFileSystemNameSize">
            <para>The length of the file system name buffer, in <b>TCHARs</b>. The maximum buffer size is <b>MAX_PATH</b>+1. This parameter is ignored if the file system name buffer is not supplied.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If all the requested information is retrieved, the return value is nonzero. If not all the requested information is retrieved, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getvolumeinformationw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetThreadPriority(System.Runtime.InteropServices.SafeHandle,Windows.Win32.System.Threading.THREAD_PRIORITY)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SetThreadPriority(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.THREAD_PRIORITY)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.SetThreadPriority(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.THREAD_PRIORITY)">
            <summary>Sets the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base priority level.</summary>
            <param name="hThread">
            <para>A handle to the thread whose priority value is to be set. The handle must have the <b>THREAD_SET_INFORMATION</b> or <b>THREAD_SET_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/ProcThread/thread-security-and-access-rights">Thread Security and Access Rights</a>.<b>Windows Server 2003:  </b>The handle must have the <b>THREAD_SET_INFORMATION</b> access right.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setthreadpriority#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nPriority"></param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>Windows Phone 8.1:  </b>Windows Phone Store apps may call this function but it has no effect. The function will return a nonzero value indicating success.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setthreadpriority">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.WritePrivateProfileString(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.WritePrivateProfileString(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)">
            <summary>Copies a string into the specified section of an initialization file.</summary>
            <param name="lpAppName">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="lpKeyName">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is <b>NULL</b>, the entire section, including all entries within the section, is deleted.</param>
            <param name="lpString">A <b>null</b>-terminated string to be written to the file. If this parameter is <b>NULL</b>, the key pointed to by the <i>lpKeyName</i> parameter is deleted.</param>
            <param name="lpFileName">
            <para>The name of the initialization file. If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-writeprivateprofilestringw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function successfully copies the string to the initialization file, the return value is nonzero. If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winbase/nf-winbase-writeprivateprofilestringw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DestroyIcon(Windows.Win32.UI.WindowsAndMessaging.HICON)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <param name="hIcon">
            <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.ReleaseDC(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.</summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            <para>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-releasedc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDC(Windows.Win32.Foundation.HWND)">
            <summary>The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDC</b> retrieves the DC for the entire screen.</param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the DC for the specified window's client area. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFocus">
            <summary>Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.</summary>
            <returns>
            <para>Type: <b>HWND</b> The return value is the handle to the window with the keyboard focus. If the calling thread's message queue does not have an associated window with the keyboard focus, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getfocus">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowInfo(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetWindowInfo(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowInfo(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOWINFO*)">
            <summary>Retrieves information about the specified window.</summary>
            <param name="hwnd">
            <para>Type: <b>HWND</b> A handle to the window whose information is to be retrieved.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pwi">
            <para>Type: <b>PWINDOWINFO</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-windowinfo">WINDOWINFO</a> structure to receive the information. Note that you must set the <b>cbSize</b> member to <c>sizeof(WINDOWINFO)</c> before calling this function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)" />
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)">
            <summary>Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpRect">
            <para>Type: <b>LPRECT</b> A pointer to a  <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetFocus(Windows.Win32.Foundation.HWND)">
            <summary>Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.</summary>
            <param name="hWnd">
            <para>Type: **HWND** A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setfocus#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: **HWND** If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. If the *hWnd* parameter is invalid or the window is not attached to the calling thread's message queue, the return value is NULL. To get extended error information, call [GetLastError function](../errhandlingapi/nf-errhandlingapi-getlasterror.md). Extended error ERROR_INVALID_PARAMETER (0x57) means that window is in disabled state.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setfocus">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Security.SID_AND_ATTRIBUTES">
            <summary>Represents a security identifier (SID) and its attributes.</summary>
            <remarks>
            <para>A group is represented by a SID. SIDs have attributes that indicate whether they are currently enabled, disabled, or mandatory. SIDs also indicate how these attributes are used. A <b>SID_AND_ATTRIBUTES</b> structure can represent a SID whose attributes change frequently. For example, <b>SID_AND_ATTRIBUTES</b> is used to represent groups in the <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ns-winnt-sid_and_attributes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.SID_AND_ATTRIBUTES.Sid">
            <summary>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-sid">SID</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.Security.SID_AND_ATTRIBUTES.Attributes">
            <summary>Specifies attributes of the SID. This value contains up to 32 one-bit flags. Its meaning depends on the definition and use of the SID.</summary>
        </member>
        <member name="T:Windows.Win32.Security.TOKEN_INFORMATION_CLASS">
            <summary>Contains values that specify the type of information being assigned to or retrieved from an access token.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenUser">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_user">TOKEN_USER</a> structure that contains the user account of the token.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenGroups">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that contains the group accounts associated with the token.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenPrivileges">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_privileges">TOKEN_PRIVILEGES</a> structure that contains the privileges of the token.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenOwner">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_owner">TOKEN_OWNER</a> structure that contains the default owner <a href="https://docs.microsoft.com/windows/desktop/SecGloss/s-gly">security identifier</a> (SID) for newly created objects.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenPrimaryGroup">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_primary_group">TOKEN_PRIMARY_GROUP</a> structure that contains the default primary group SID for newly created objects.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenDefaultDacl">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_default_dacl">TOKEN_DEFAULT_DACL</a> structure that contains the default DACL for newly created objects.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSource">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_source">TOKEN_SOURCE</a> structure that contains the source of the token. <b>TOKEN_QUERY_SOURCE</b> access is needed to retrieve this information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenType">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ne-winnt-token_type">TOKEN_TYPE</a> value that indicates whether the token is a <a href="https://docs.microsoft.com/windows/desktop/SecGloss/p-gly">primary</a> or <a href="https://docs.microsoft.com/windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenImpersonationLevel">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ne-winnt-security_impersonation_level">SECURITY_IMPERSONATION_LEVEL</a> value that indicates the impersonation level of the token. If the access token is not an <a href="https://docs.microsoft.com/windows/desktop/SecGloss/i-gly">impersonation token</a>, the function fails.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenStatistics">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_statistics">TOKEN_STATISTICS</a> structure that contains various token statistics.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenRestrictedSids">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that contains the list of restricting SIDs in a <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/restricted-tokens">restricted token</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSessionId">
            <summary>
            <para>The buffer receives a <b>DWORD</b> value that indicates the Terminal Services session identifier that is associated with the token. If the token is associated with the terminal server client session, the session identifier is nonzero. <b>Windows Server 2003 and Windows XP:  </b>If the token is associated with the terminal server console session, the session identifier is zero. In a non-Terminal Services environment, the session identifier is zero. If <b>TokenSessionId</b> is set with <a href="https://docs.microsoft.com/windows/desktop/api/securitybaseapi/nf-securitybaseapi-settokeninformation">SetTokenInformation</a>, the application must have the <b>Act As Part Of the Operating System</b> privilege, and the application must be enabled to set the session ID in a token.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups_and_privileges">TOKEN_GROUPS_AND_PRIVILEGES</a> structure that contains the user SID, the group accounts, the restricted SIDs, and the authentication ID associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSessionReference">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSandBoxInert">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if the token includes the <b>SANDBOX_INERT</b> flag.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenAuditPolicy">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenOrigin">
            <summary>
            <para>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_origin">TOKEN_ORIGIN</a> value. If the token  resulted from a logon that used explicit credentials, such as passing a name, domain, and password to the  <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-logonusera">LogonUser</a> function, then the <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_origin">TOKEN_ORIGIN</a> structure will contain the ID of the <a href="https://docs.microsoft.com/windows/desktop/SecGloss/l-gly">logon session</a> that created it. If the token resulted from  network authentication, such as a call to <a href="https://docs.microsoft.com/windows/desktop/api/sspi/nf-sspi-acceptsecuritycontext">AcceptSecurityContext</a>  or a call to <a href="https://docs.microsoft.com/windows/desktop/api/winbase/nf-winbase-logonusera">LogonUser</a> with <i>dwLogonType</i> set to <b>LOGON32_LOGON_NETWORK</b> or <b>LOGON32_LOGON_NETWORK_CLEARTEXT</b>, then this value will be zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ne-winnt-token_information_class#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenElevationType">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ne-winnt-token_elevation_type">TOKEN_ELEVATION_TYPE</a> value that specifies the elevation level of the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenLinkedToken">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_linked_token">TOKEN_LINKED_TOKEN</a> structure that contains a handle to another token that is linked to this token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenElevation">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_elevation">TOKEN_ELEVATION</a> structure that specifies whether the token is elevated.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenHasRestrictions">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if the token has ever been filtered.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenAccessInformation">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_access_information">TOKEN_ACCESS_INFORMATION</a> structure that specifies  security information contained in the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if  <a href="https://docs.microsoft.com/windows/desktop/SecGloss/v-gly">virtualization</a> is allowed for the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if  <a href="https://docs.microsoft.com/windows/desktop/SecGloss/v-gly">virtualization</a> is enabled for the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenIntegrityLevel">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_mandatory_label">TOKEN_MANDATORY_LABEL</a> structure that specifies the token's integrity level.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenUIAccess">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if  the token has the UIAccess flag set.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_mandatory_policy">TOKEN_MANDATORY_POLICY</a> structure that specifies the token's mandatory integrity policy.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenLogonSid">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that specifies the token's logon SID.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenIsAppContainer">
            <summary>The buffer receives a <b>DWORD</b> value that is nonzero if the token is an app container token. Any callers who check the <b>TokenIsAppContainer</b> and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an app container but is an identity level token, you should return <b>AccessDenied</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenCapabilities">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that contains the capabilities associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenAppContainerSid">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_appcontainer_information">TOKEN_APPCONTAINER_INFORMATION</a> structure that contains the AppContainerSid associated with the token. If the token is not associated with an app container, the <b>TokenAppContainer</b> member of the <b>TOKEN_APPCONTAINER_INFORMATION</b> structure points to <b>NULL</b>.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenAppContainerNumber">
            <summary>The buffer receives a <b>DWORD</b> value that includes the   app container number for the token. For tokens that are not app container tokens, this value is zero.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenUserClaimAttributes">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-claim_security_attributes_information">CLAIM_SECURITY_ATTRIBUTES_INFORMATION</a> structure that contains the user claims associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenDeviceClaimAttributes">
            <summary>The buffer receives  a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-claim_security_attributes_information">CLAIM_SECURITY_ATTRIBUTES_INFORMATION</a> structure that contains the  device claims associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenRestrictedUserClaimAttributes">
            <summary>This value is reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceClaimAttributes">
            <summary>This value is reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenDeviceGroups">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that contains the device groups that are associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceGroups">
            <summary>The buffer receives a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-token_groups">TOKEN_GROUPS</a> structure that contains the restricted device groups that are associated with the token.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSecurityAttributes">
            <summary>This value is reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenIsRestricted">
            <summary>This value is reserved.</summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenProcessTrustLevel">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenPrivateNameSpace">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenSingletonAttributes">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenBnoIsolation">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenChildProcessFlags">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.TokenIsLessPrivilegedAppContainer">
            <summary></summary>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_INFORMATION_CLASS.MaxTokenInfoClass">
            <summary>The maximum value for this enumeration.</summary>
        </member>
        <member name="T:Windows.Win32.Security.TOKEN_MANDATORY_LABEL">
            <summary>Specifies the mandatory integrity level for a token.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winnt/ns-winnt-token_mandatory_label">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.TOKEN_MANDATORY_LABEL.Label">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-sid_and_attributes">SID_AND_ATTRIBUTES</a> structure that specifies the mandatory integrity level of the token.</summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>/F0ij+nC63TygPf8IZhqokS3WFoO2066CnvZ1GPdYss=</DigestValue></Reference></SignedInfo><SignatureValue>e9DBRpZ5AMDZqbuugBmSnMhRj5FG5p81YvYVz6YKkq+6e6ecXbHcWZOF4JORoAnw5LhprdqrH2Tii+ejR3Hmkp01bi4OtR0uQZ2AMdbCrMaRGknEtlqH5OKj0PzbdRN9m3UURUwsIBH8a+rG6z1uA2+eqcm1Mc4SK7IUj/sdsIfUS+QQrNk6D9A/s5htJJbV3I/wQ67m0sWTnZ3ugdvcXlvGN+ybS4GWJGqpYMaaBu2wYcjWW7S06CMHPkwvb/C6O0upUqrUilgg1i2U5nYm0EhEEC8GRl6/nYRRpTAQb0sPempbT0YwvONKrWjGahTmq79PYF8PhqzIGPOcMOmaFw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIGAzCCA+ugAwIBAgITMwAAAs3zZL/41ExdUQAAAAACzTANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIyMDUxMjIwNDYwMloXDTIzMDUxMTIwNDYwMlowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6yM7GOtjJiq83q4Ju1HJ7vg7kh3YM0WVQiBovQmpRa4cLYivtxSA85TmG7P88x8Liwt4Yq+ecFYB6GguJYkMEOtMFckdexGT2uAUNvAuQEZcan7Xadx/Ea11m1cr0GlJwUFWTO91w8hldaFD2RhxlrYHarQVHetFY5xTyAkn/KZxYoreob0sR+SFViNIjp36nV2KD1lLVVDJlaltcgV9DbW0JUhyFOoZT76Pf7qir5IxVBQNi2wvQFkGyZh/tbjNJeJw0inwqnHL3SOZd84xJPclElJodSEIQxZ/uUi9iZpwhdI2RGeH+RxO8pAz/qIgN0Pn4SgrHoPtGhB4vg0T2QIDAQABo4IBgjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFNFsph+Aj+7NfskJLRMG3C0LkfWcMFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIzMDAxMis0NzA1MzAwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQBOy0rrjTmwgVmLrbcSQIIpVyfdhqclf304slx2f/S2817PzHypz8EcnZZgNmpNKxliwxYfPcwFhxSPLfSS8KXf1UaFRN/lss0yLJHWwZx239co6P/tLaR5Z66BSXXA0jCLB/k+89wpWPulp40k3raYNWP6Szi12aWY2Hl0IhcKPRuZc1HEnfGFUDT0ABiApdiUUmgjZcwHSBQheTzSqF2ybRKg3D2fKA6zPSnTu06lBOVangXug4IGNbGWJ0A/vy1pc+Q9MAq4jYBkP01lnsTMMJxKpSMH5CHDRcaNEDQ/+mGvQ0wFMpJNkihkj7dJC7R8TRJ9hib3DbX6IVWP29LbshdOXlxN3HbWGW3hqFNcUIsT2QJU3bS5nhTZcvNrgVW8mwGeFLdfBf/1K7oFUPVFHStbmJnPtknUUEAnHCsFxjrmIGdVC1truT8n1sc6OAUfvudzgf7WV0Kc+DpIAWXqrPWGmCxXykZUB1bZkIIRR8web/1haJ8Q1Zbz8ctoKGtLvWfmZSKb6KGUb5ujrV8XQIzAXFgQLJwUa/zo+bN+ehA3X9pf7C8CxWBOtbfjBIjWHctKVy+oDdw8U1X9qoycVxZBX4404rJ3bnR7ILhDJPJhLZ78KPXzkik+qER4TPbGeB04P00zI1JY5jd5gWFgFiORMXQtYp7qINMaypjllQ==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHDDCCBPSgAwIBAgITMwAAAb70IKLultYg1gABAAABvjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMjExMDQxOTAxMjJaFw0yNDAyMDIxOTAxMjJaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpFNUE2LUUyN0MtNTkyRTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKVf8ts+w2u5zLtLcpC2PKJYe2dNxKhTc94hZTKfYDn1ZmQAZoXgnPO0bj3UNj/jh1CYqgkAFjbjUqCP0NYsRMPQAOue5XQ/Gd/xJLaZsShx2rzocEEhT3KUxhVVyMSgsKDvNuIIshzxvOHX4XYullO3+w/vOS2jwdHTrDxyijBpQvaeui7/ckM7wIWRhZhYZbrAsv3oK8+iV/zhzk/agsLoIay9CD3+O1C3taUEhBIocuN/CcEvq2VOAFcr0HM5TAtul7E7gz4BECpc8fa7uxLzVffZfyglPW2xX+Up5DdZqFIClKtPTVpSscyxhL4ZHtkDTKKZ/OiYdX5fz1Xrzf8a2UqVdt6zOJQe5Ye10rAj3hbJU2KIyjdoqDguqdwcu5BJr2QoeqwLDyrAESSEncykAjKvpqg7oj+pq/y77liopz/tmRpivwtf7JL5U47SHobudMqFzQ5YdQjfQd0C4JUGPlAgRKiaIPwcQJ96VnUdNaP+ulyGnIFyP3dMBtv8dDrW4xBgJGnH0JZsNGw3NNnYUBZIv9UPVW8IeJAu1YAIiQPGwucxCGFhzVOwvh3uvQeP9nWaUY4HeaRKR2xfTmIgH+7OTJ2BJxzf+aP2xjtGowG+1SOH/Wr+trAusb4SkweUeJYcRDFhdM+L+wUOQh8jDZC/qE58yS6py1XV57jNAgMBAAGjggE2MIIBMjAdBgNVHQ4EFgQU6yogFqGEQaDxrW8L24YV+mtvoqowHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEAx5X7vXNCJoXQYrNco+emwbzkshqQv60krcvtRePU3+n5hRHqsYcE0x1RzniETXfIHAy0s9He/ZlwqqvMp6uoCYMtruC8sgK9i5sMxVbrsaBlUfGLlJ0bb7Ax+Sfrp8nv5zJMB4gvhvNod7kPH3Bo/th9Jyj5lKVLX0K7jFF78y41eTckYw4gi+XP3+XnJs9NXZ6ZwrxOpCM/xU6ZLznlSZNtiNmpBWYT89uA+jk+ipE7cAUaUhBw2KgkOHGfu0l8e4883e2/tKfbw26Kgsu0sFoCqRkBvsFWyq05uISpGQ83HQBIGKnoV8+/BtNJmCC4g08lIpMEKaGe2pvaQOgXUz2PqNb+gkc3J3iDpyWGpx1s9EfihEf2URbSwsgTLy80hxJ9LEdPtJC5JZ3CoxnQNWAONszm+tdVHiBsrWfVYTcJ+MLORiep+jyZjDzvsjxJDstn/DgYroWqpYqYlocxrbeVLAtIHhtLFvasGuEAFtbEFiK4UpduDDjlcDZfwJvf2ary0Vq9ceJ7qXkfBu/gzcp+DE4NvMhWUVNZLUr8gTFErzdivfQTuqdYEsf8L0rEeOXRt9zwxuXyqhzoA8XLYwVOW1+PXiaozS+0v1J3Sxe0tDli/ZnZP4z1Rz9iOl7TdCuFY3UcLyIK94zYm9xmchiZzkaf2TG2Ng79ZinMe3U=</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIAGCSqGSIb3DQEHAqCAMIIW0gIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUQYLKoZIhvcNAQkQAQSgggFABIIBPDCCATgCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQgzntY77Q2c607KUV/9gJ208TJMAetT/uauJxeg4q8UagCBmPuYzskBhgTMjAyMzAyMjgyMjU2MTUuNjQ1WjAEgAIB9KCB0KSBzTCByjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046RTVBNi1FMjdDLTU5MkUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WgghFUMIIHDDCCBPSgAwIBAgITMwAAAb70IKLultYg1gABAAABvjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMjExMDQxOTAxMjJaFw0yNDAyMDIxOTAxMjJaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpFNUE2LUUyN0MtNTkyRTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKVf8ts+w2u5zLtLcpC2PKJYe2dNxKhTc94hZTKfYDn1ZmQAZoXgnPO0bj3UNj/jh1CYqgkAFjbjUqCP0NYsRMPQAOue5XQ/Gd/xJLaZsShx2rzocEEhT3KUxhVVyMSgsKDvNuIIshzxvOHX4XYullO3+w/vOS2jwdHTrDxyijBpQvaeui7/ckM7wIWRhZhYZbrAsv3oK8+iV/zhzk/agsLoIay9CD3+O1C3taUEhBIocuN/CcEvq2VOAFcr0HM5TAtul7E7gz4BECpc8fa7uxLzVffZfyglPW2xX+Up5DdZqFIClKtPTVpSscyxhL4ZHtkDTKKZ/OiYdX5fz1Xrzf8a2UqVdt6zOJQe5Ye10rAj3hbJU2KIyjdoqDguqdwcu5BJr2QoeqwLDyrAESSEncykAjKvpqg7oj+pq/y77liopz/tmRpivwtf7JL5U47SHobudMqFzQ5YdQjfQd0C4JUGPlAgRKiaIPwcQJ96VnUdNaP+ulyGnIFyP3dMBtv8dDrW4xBgJGnH0JZsNGw3NNnYUBZIv9UPVW8IeJAu1YAIiQPGwucxCGFhzVOwvh3uvQeP9nWaUY4HeaRKR2xfTmIgH+7OTJ2BJxzf+aP2xjtGowG+1SOH/Wr+trAusb4SkweUeJYcRDFhdM+L+wUOQh8jDZC/qE58yS6py1XV57jNAgMBAAGjggE2MIIBMjAdBgNVHQ4EFgQU6yogFqGEQaDxrW8L24YV+mtvoqowHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEAx5X7vXNCJoXQYrNco+emwbzkshqQv60krcvtRePU3+n5hRHqsYcE0x1RzniETXfIHAy0s9He/ZlwqqvMp6uoCYMtruC8sgK9i5sMxVbrsaBlUfGLlJ0bb7Ax+Sfrp8nv5zJMB4gvhvNod7kPH3Bo/th9Jyj5lKVLX0K7jFF78y41eTckYw4gi+XP3+XnJs9NXZ6ZwrxOpCM/xU6ZLznlSZNtiNmpBWYT89uA+jk+ipE7cAUaUhBw2KgkOHGfu0l8e4883e2/tKfbw26Kgsu0sFoCqRkBvsFWyq05uISpGQ83HQBIGKnoV8+/BtNJmCC4g08lIpMEKaGe2pvaQOgXUz2PqNb+gkc3J3iDpyWGpx1s9EfihEf2URbSwsgTLy80hxJ9LEdPtJC5JZ3CoxnQNWAONszm+tdVHiBsrWfVYTcJ+MLORiep+jyZjDzvsjxJDstn/DgYroWqpYqYlocxrbeVLAtIHhtLFvasGuEAFtbEFiK4UpduDDjlcDZfwJvf2ary0Vq9ceJ7qXkfBu/gzcp+DE4NvMhWUVNZLUr8gTFErzdivfQTuqdYEsf8L0rEeOXRt9zwxuXyqhzoA8XLYwVOW1+PXiaozS+0v1J3Sxe0tDli/ZnZP4z1Rz9iOl7TdCuFY3UcLyIK94zYm9xmchiZzkaf2TG2Ng79ZinMe3UwggdxMIIFWaADAgECAhMzAAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAxODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeFRiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130/o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGpF1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+/NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNOwTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLiMxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6HXtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSfpxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3MvUmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1VffwqreEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinLbtg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2FzLixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFXSVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFUa2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUzWLOhcGbyoYICyzCCAjQCAQEwgfihgdCkgc0wgcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkU1QTYtRTI3Qy01OTJFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQBorVpS97z7vBDTgHvotvuMH0zAe6CBgzCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA56iy1DAiGA8yMDIzMDMwMTAxMDUyNFoYDzIwMjMwMzAyMDEwNTI0WjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDnqLLUAgEAMAcCAQACAhEoMAcCAQACAhH2MAoCBQDnqgRUAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAiBGdTYneERZ9jLnkGzwDkNYwPA1s9gPLQzny2tFSZDlmR38YHujZz2Yfdf/rGnrP9qAnJ7SgkpRGI+d1BtBm6E5j8JlKI0dQm4VFhr+vN0EBWyfvbdpdEIfLuqffMHnxg8BRUgMbDWv1+p+G5le/JBoPYGZZsM3+WWjrbZdc100xggQNMIIECQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAb70IKLultYg1gABAAABvjANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCDcgg+h/yJyU8Gxj2URiinCCHdMnqCMJAB84UhZKFeSWDCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EIJTuiq+t9vzsvWW1z64RD4nTQIPxXn+yt0mYPg8Y4QwvMIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAG+9CCi7pbWINYAAQAAAb4wIgQg1H/HN366+Od4pwVvE6G2R6L59y8HZRM2GjiULiX7VU0wDQYJKoZIhvcNAQELBQAEggIAZM1ZHdbca8dxo//xRlW5mWCp63d5mP4Mu0tQwY/gac4ozSwuSd3a5/t45UNrwGYZiwhFoDJQyaXVyO/grMEBlYmCLTXN4EScP8PFHFM0E5JBEL2GcLdlOJDZnEKBjzGo7LP3D370zS3iA4BqF3fs4/IMdKFMFPOWBAuQxdMa0WKIONw8m/4M8uSenaTZE7yR+z4rYL2fmPofi4xsQ5foq+FKY6a/wdj5XVvYfpDYbtjngjQJ99P9snWdN0O9oI94OhVao3XaUnB/sZdddaFZVfn/j2aX1hgFw02/h7TxyWsBSmhFGdu5z+glZNh0s8r4yggHXu7UNBBhYOgMtCGRP6RGm+qwsexf+OY0qbvQNs1afySsDWPxuxtKm3vz0GqG3kgHqStr61DaoDIFD6VR0Kzed5GiIlsDPS/BlmY6B4HG7Vhw7Eh2BvznDzfJ05z+kAkZCEcVleI7XpIFdW7/sOCr3QK+rjWKuYD6RBtct/9F5AtkT6NJBJqh4c9PZlfi1O8ikNuv4YF0/pFzs3GY6oxFfMf0W1+RLAS3gFrejBpFqFM5HDqfmeQdU/eSFFI1uXEMeEUpS1kFAkQV/rqyJrz+AUB1KNwFNNu/biNwjtdd7zlyvi1F3ksmWegqFqnRTyYZQxSJZ3t4WwoSjwibkmpI30NEeI07mxnYN3ZSQOoAAAAA</CounterSignature></Object></Signature></doc>
